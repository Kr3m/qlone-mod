export Team_InitGame
code
proc Team_InitGame 4 12
file "../../../../code/game/g_team.c"
line 25
;1:// Copyright (C) 1999-2000 Id Software, Inc.
;2://
;3:
;4:#include "g_local.h"
;5:
;6:
;7:typedef struct teamgame_s {
;8:	float			last_flag_capture;
;9:	int				last_capture_team;
;10:	flagStatus_t	redStatus;	// CTF
;11:	flagStatus_t	blueStatus;	// CTF
;12:	flagStatus_t	flagStatus;	// One Flag CTF
;13:	int				redTakenTime;
;14:	int				blueTakenTime;
;15:	int				redObeliskAttackedTime;
;16:	int				blueObeliskAttackedTime;
;17:} teamgame_t;
;18:
;19:teamgame_t teamgame;
;20:
;21:gentity_t	*neutralObelisk;
;22:
;23:static void Team_SetFlagStatus( team_t team, flagStatus_t status );
;24:
;25:void Team_InitGame( void ) {
line 26
;26:	memset(&teamgame, 0, sizeof teamgame);
ADDRGP4 teamgame
ARGP4
CNSTI4 0
ARGI4
CNSTI4 36
ARGI4
ADDRGP4 memset
CALLP4
pop
line 28
;27:
;28:	switch( g_gametype.integer ) {
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 4
EQI4 $58
ADDRGP4 $56
JUMPV
LABELV $58
line 30
;29:	case GT_CTF:
;30:		teamgame.redStatus = teamgame.blueStatus = -1; // Invalid to force update
ADDRLP4 0
CNSTI4 -1
ASGNI4
ADDRGP4 teamgame+12
ADDRLP4 0
INDIRI4
ASGNI4
ADDRGP4 teamgame+8
ADDRLP4 0
INDIRI4
ASGNI4
line 31
;31:		Team_SetFlagStatus( TEAM_RED, FLAG_ATBASE );
CNSTI4 1
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 Team_SetFlagStatus
CALLV
pop
line 32
;32:		Team_SetFlagStatus( TEAM_BLUE, FLAG_ATBASE );
CNSTI4 2
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 Team_SetFlagStatus
CALLV
pop
line 33
;33:		break;
line 41
;34:#ifdef MISSIONPACK
;35:	case GT_1FCTF:
;36:		teamgame.flagStatus = -1; // Invalid to force update
;37:		Team_SetFlagStatus( TEAM_FREE, FLAG_ATBASE );
;38:		break;
;39:#endif
;40:	default:
;41:		break;
LABELV $56
line 43
;42:	}
;43:}
LABELV $54
endproc Team_InitGame 4 12
export OtherTeam
proc OtherTeam 0 0
line 46
;44:
;45:
;46:int OtherTeam( team_t team ) {
line 47
;47:	if ( team == TEAM_RED )
ADDRFP4 0
INDIRI4
CNSTI4 1
NEI4 $62
line 48
;48:		return TEAM_BLUE;
CNSTI4 2
RETI4
ADDRGP4 $61
JUMPV
LABELV $62
line 49
;49:	else if ( team == TEAM_BLUE )
ADDRFP4 0
INDIRI4
CNSTI4 2
NEI4 $64
line 50
;50:		return TEAM_RED;
CNSTI4 1
RETI4
ADDRGP4 $61
JUMPV
LABELV $64
line 51
;51:	return team;
ADDRFP4 0
INDIRI4
RETI4
LABELV $61
endproc OtherTeam 0 0
export TeamName
proc TeamName 0 0
line 55
;52:}
;53:
;54:
;55:const char *TeamName( team_t team ) {
line 56
;56:	if ( team == TEAM_RED )
ADDRFP4 0
INDIRI4
CNSTI4 1
NEI4 $67
line 57
;57:		return "RED";
ADDRGP4 $69
RETP4
ADDRGP4 $66
JUMPV
LABELV $67
line 58
;58:	else if ( team == TEAM_BLUE )
ADDRFP4 0
INDIRI4
CNSTI4 2
NEI4 $70
line 59
;59:		return "BLUE";
ADDRGP4 $72
RETP4
ADDRGP4 $66
JUMPV
LABELV $70
line 60
;60:	else if ( team == TEAM_SPECTATOR )
ADDRFP4 0
INDIRI4
CNSTI4 3
NEI4 $73
line 61
;61:		return "SPECTATOR";
ADDRGP4 $75
RETP4
ADDRGP4 $66
JUMPV
LABELV $73
line 62
;62:	return "FREE";
ADDRGP4 $76
RETP4
LABELV $66
endproc TeamName 0 0
export OtherTeamName
proc OtherTeamName 0 0
line 66
;63:}
;64:
;65:
;66:const char *OtherTeamName( team_t team ) {
line 67
;67:	if ( team == TEAM_RED )
ADDRFP4 0
INDIRI4
CNSTI4 1
NEI4 $78
line 68
;68:		return "BLUE";
ADDRGP4 $72
RETP4
ADDRGP4 $77
JUMPV
LABELV $78
line 69
;69:	else if ( team == TEAM_BLUE )
ADDRFP4 0
INDIRI4
CNSTI4 2
NEI4 $80
line 70
;70:		return "RED";
ADDRGP4 $69
RETP4
ADDRGP4 $77
JUMPV
LABELV $80
line 71
;71:	else if ( team == TEAM_SPECTATOR )
ADDRFP4 0
INDIRI4
CNSTI4 3
NEI4 $82
line 72
;72:		return "SPECTATOR";
ADDRGP4 $75
RETP4
ADDRGP4 $77
JUMPV
LABELV $82
line 73
;73:	return "FREE";
ADDRGP4 $76
RETP4
LABELV $77
endproc OtherTeamName 0 0
export TeamColorString
proc TeamColorString 0 0
line 77
;74:}
;75:
;76:
;77:const char *TeamColorString( team_t team ) {
line 78
;78:	if ( team == TEAM_RED )
ADDRFP4 0
INDIRI4
CNSTI4 1
NEI4 $85
line 79
;79:		return S_COLOR_RED;
ADDRGP4 $87
RETP4
ADDRGP4 $84
JUMPV
LABELV $85
line 80
;80:	else if ( team == TEAM_BLUE )
ADDRFP4 0
INDIRI4
CNSTI4 2
NEI4 $88
line 81
;81:		return S_COLOR_BLUE;
ADDRGP4 $90
RETP4
ADDRGP4 $84
JUMPV
LABELV $88
line 82
;82:	else if ( team == TEAM_SPECTATOR )
ADDRFP4 0
INDIRI4
CNSTI4 3
NEI4 $91
line 83
;83:		return S_COLOR_YELLOW;
ADDRGP4 $93
RETP4
ADDRGP4 $84
JUMPV
LABELV $91
line 84
;84:	return S_COLOR_WHITE;
ADDRGP4 $94
RETP4
LABELV $84
endproc TeamColorString 0 0
export PrintMsg
proc PrintMsg 1048 12
line 89
;85:}
;86:
;87:
;88:// NULL for everyone
;89:void QDECL PrintMsg( gentity_t *ent, const char *fmt, ... ) {
line 94
;90:	char		msg[1024];
;91:	va_list		argptr;
;92:	char		*p;
;93:	
;94:	va_start (argptr,fmt);
ADDRLP4 1028
ADDRFP4 4+4
ASGNP4
line 95
;95:	if ( ED_vsprintf( msg, fmt, argptr ) >= sizeof( msg ) ) {
ADDRLP4 4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 1028
INDIRP4
ARGP4
ADDRLP4 1032
ADDRGP4 ED_vsprintf
CALLI4
ASGNI4
ADDRLP4 1032
INDIRI4
CVIU4 4
CNSTU4 1024
LTU4 $97
line 96
;96:		G_Error ( "PrintMsg overrun" );
ADDRGP4 $99
ARGP4
ADDRGP4 G_Error
CALLV
pop
line 97
;97:	}
LABELV $97
line 98
;98:	va_end (argptr);
ADDRLP4 1028
CNSTP4 0
ASGNP4
ADDRGP4 $101
JUMPV
LABELV $100
line 102
;99:
;100:	// double quotes are bad
;101:	while ((p = strchr(msg, '"')) != NULL)
;102:		*p = '\'';
ADDRLP4 0
INDIRP4
CNSTI1 39
ASGNI1
LABELV $101
line 101
ADDRLP4 4
ARGP4
CNSTI4 34
ARGI4
ADDRLP4 1036
ADDRGP4 strchr
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 1036
INDIRP4
ASGNP4
ADDRLP4 1036
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $100
line 104
;103:
;104:	trap_SendServerCommand ( ( (ent == NULL) ? -1 : ent-g_entities ), va("print \"%s\"", msg ));
ADDRGP4 $104
ARGP4
ADDRLP4 4
ARGP4
ADDRLP4 1044
ADDRGP4 va
CALLP4
ASGNP4
ADDRFP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $105
ADDRLP4 1040
CNSTI4 -1
ASGNI4
ADDRGP4 $106
JUMPV
LABELV $105
ADDRLP4 1040
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRGP4 g_entities
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 824
DIVI4
ASGNI4
LABELV $106
ADDRLP4 1040
INDIRI4
ARGI4
ADDRLP4 1044
INDIRP4
ARGP4
ADDRGP4 trap_SendServerCommand
CALLV
pop
line 105
;105:}
LABELV $95
endproc PrintMsg 1048 12
export AddTeamScore
proc AddTeamScore 40 8
line 116
;106:
;107:
;108:/*
;109:==============
;110:AddTeamScore
;111:
;112: used for gametype > GT_TEAM
;113: for gametype GT_TEAM the level.teamScores is updated in AddScore in g_combat.c
;114:==============
;115:*/
;116:void AddTeamScore( vec3_t origin, team_t team, int score ) {
line 121
;117:	int			eventParm;
;118:	int			otherTeam;
;119:	gentity_t	*te;
;120:
;121:	if ( score == 0 ) {
ADDRFP4 8
INDIRI4
CNSTI4 0
NEI4 $108
line 122
;122:		return;
ADDRGP4 $107
JUMPV
LABELV $108
line 125
;123:	}
;124:
;125:	eventParm = -1;
ADDRLP4 4
CNSTI4 -1
ASGNI4
line 126
;126:	otherTeam = OtherTeam( team );
ADDRFP4 4
INDIRI4
ARGI4
ADDRLP4 12
ADDRGP4 OtherTeam
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 12
INDIRI4
ASGNI4
line 128
;127:
;128:	if ( level.teamScores[ team ] + score == level.teamScores[ otherTeam ] ) {
ADDRFP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 level+48
ADDP4
INDIRI4
ADDRFP4 8
INDIRI4
ADDI4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 level+48
ADDP4
INDIRI4
NEI4 $110
line 130
;129:		//teams are tied sound
;130:		eventParm = GTS_TEAMS_ARE_TIED;
ADDRLP4 4
CNSTI4 12
ASGNI4
line 131
;131:	} else if ( level.teamScores[ team ] >= level.teamScores[ otherTeam ] &&
ADDRGP4 $111
JUMPV
LABELV $110
ADDRLP4 16
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 16
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 level+48
ADDP4
INDIRI4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 level+48
ADDP4
INDIRI4
LTI4 $114
ADDRLP4 16
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 level+48
ADDP4
INDIRI4
ADDRFP4 8
INDIRI4
ADDI4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 level+48
ADDP4
INDIRI4
GEI4 $114
line 132
;132:				level.teamScores[ team ] + score < level.teamScores[ otherTeam ] ) {
line 134
;133:		// other team took the lead sound (negative score)
;134:		eventParm = ( otherTeam == TEAM_RED ) ? GTS_REDTEAM_TOOK_LEAD : GTS_BLUETEAM_TOOK_LEAD;
ADDRLP4 0
INDIRI4
CNSTI4 1
NEI4 $121
ADDRLP4 24
CNSTI4 10
ASGNI4
ADDRGP4 $122
JUMPV
LABELV $121
ADDRLP4 24
CNSTI4 11
ASGNI4
LABELV $122
ADDRLP4 4
ADDRLP4 24
INDIRI4
ASGNI4
line 135
;135:	} else if ( level.teamScores[ team ] <= level.teamScores[ otherTeam ] &&
ADDRGP4 $115
JUMPV
LABELV $114
ADDRLP4 24
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 24
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 level+48
ADDP4
INDIRI4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 level+48
ADDP4
INDIRI4
GTI4 $123
ADDRLP4 24
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 level+48
ADDP4
INDIRI4
ADDRFP4 8
INDIRI4
ADDI4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 level+48
ADDP4
INDIRI4
LEI4 $123
line 136
;136:				level.teamScores[ team ] + score > level.teamScores[ otherTeam ] ) {
line 138
;137:		// this team took the lead sound
;138:		eventParm = ( team == TEAM_RED ) ? GTS_REDTEAM_TOOK_LEAD : GTS_BLUETEAM_TOOK_LEAD;
ADDRFP4 4
INDIRI4
CNSTI4 1
NEI4 $130
ADDRLP4 32
CNSTI4 10
ASGNI4
ADDRGP4 $131
JUMPV
LABELV $130
ADDRLP4 32
CNSTI4 11
ASGNI4
LABELV $131
ADDRLP4 4
ADDRLP4 32
INDIRI4
ASGNI4
line 139
;139:	} else if ( score > 0 && g_gametype.integer != GT_TEAM ) {
ADDRGP4 $124
JUMPV
LABELV $123
ADDRFP4 8
INDIRI4
CNSTI4 0
LEI4 $132
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 3
EQI4 $132
line 141
;140:		// team scored sound
;141:		eventParm = ( team == TEAM_RED ) ? GTS_REDTEAM_SCORED : GTS_BLUETEAM_SCORED;
ADDRFP4 4
INDIRI4
CNSTI4 1
NEI4 $136
ADDRLP4 32
CNSTI4 8
ASGNI4
ADDRGP4 $137
JUMPV
LABELV $136
ADDRLP4 32
CNSTI4 9
ASGNI4
LABELV $137
ADDRLP4 4
ADDRLP4 32
INDIRI4
ASGNI4
line 142
;142:	}
LABELV $132
LABELV $124
LABELV $115
LABELV $111
line 144
;143:
;144:	if ( eventParm != -1 ) {
ADDRLP4 4
INDIRI4
CNSTI4 -1
EQI4 $138
line 145
;145:		te = G_TempEntity(origin, EV_GLOBAL_TEAM_SOUND );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 47
ARGI4
ADDRLP4 32
ADDRGP4 G_TempEntity
CALLP4
ASGNP4
ADDRLP4 8
ADDRLP4 32
INDIRP4
ASGNP4
line 146
;146:		te->r.svFlags |= SVF_BROADCAST;
ADDRLP4 36
ADDRLP4 8
INDIRP4
CNSTI4 424
ADDP4
ASGNP4
ADDRLP4 36
INDIRP4
ADDRLP4 36
INDIRP4
INDIRI4
CNSTI4 32
BORI4
ASGNI4
line 147
;147:		te->s.eventParm = eventParm;
ADDRLP4 8
INDIRP4
CNSTI4 184
ADDP4
ADDRLP4 4
INDIRI4
ASGNI4
line 148
;148:	}
LABELV $138
line 150
;149:
;150:	level.teamScores[ team ] += score;
ADDRLP4 32
ADDRFP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 level+48
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 32
INDIRP4
INDIRI4
ADDRFP4 8
INDIRI4
ADDI4
ASGNI4
line 151
;151:}
LABELV $107
endproc AddTeamScore 40 8
export OnSameTeam
proc OnSameTeam 0 0
line 158
;152:
;153:/*
;154:==============
;155:OnSameTeam
;156:==============
;157:*/
;158:qboolean OnSameTeam( gentity_t *ent1, gentity_t *ent2 ) {
line 159
;159:	if ( !ent1->client || !ent2->client ) {
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $144
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $142
LABELV $144
line 160
;160:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $141
JUMPV
LABELV $142
line 163
;161:	}
;162:
;163:	if ( g_gametype.integer < GT_TEAM ) {
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 3
GEI4 $145
line 164
;164:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $141
JUMPV
LABELV $145
line 167
;165:	}
;166:
;167:	if ( ent1->client->sess.sessionTeam == ent2->client->sess.sessionTeam ) {
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 624
ADDP4
INDIRI4
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 624
ADDP4
INDIRI4
NEI4 $148
line 168
;168:		return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $141
JUMPV
LABELV $148
line 171
;169:	}
;170:
;171:	return qfalse;
CNSTI4 0
RETI4
LABELV $141
endproc OnSameTeam 0 0
lit
align 1
LABELV ctfFlagStatusRemap
byte 1 48
byte 1 49
byte 1 42
byte 1 42
byte 1 50
align 1
LABELV oneFlagStatusRemap
byte 1 48
byte 1 49
byte 1 50
byte 1 51
byte 1 52
code
proc Team_SetFlagStatus 16 8
line 178
;172:}
;173:
;174:
;175:static char ctfFlagStatusRemap[] = { '0', '1', '*', '*', '2' };
;176:static char oneFlagStatusRemap[] = { '0', '1', '2', '3', '4' };
;177:
;178:static void Team_SetFlagStatus( team_t team, flagStatus_t status ) {
line 179
;179:	qboolean modified = qfalse;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 181
;180:
;181:	switch( team ) {
ADDRLP4 4
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 0
EQI4 $164
ADDRLP4 4
INDIRI4
CNSTI4 1
EQI4 $154
ADDRLP4 4
INDIRI4
CNSTI4 2
EQI4 $159
ADDRGP4 $152
JUMPV
LABELV $154
line 183
;182:	case TEAM_RED:	// CTF
;183:		if( teamgame.redStatus != status ) {
ADDRGP4 teamgame+8
INDIRI4
ADDRFP4 4
INDIRI4
EQI4 $152
line 184
;184:			teamgame.redStatus = status;
ADDRGP4 teamgame+8
ADDRFP4 4
INDIRI4
ASGNI4
line 185
;185:			modified = qtrue;
ADDRLP4 0
CNSTI4 1
ASGNI4
line 186
;186:		}
line 187
;187:		break;
ADDRGP4 $152
JUMPV
LABELV $159
line 190
;188:
;189:	case TEAM_BLUE:	// CTF
;190:		if( teamgame.blueStatus != status ) {
ADDRGP4 teamgame+12
INDIRI4
ADDRFP4 4
INDIRI4
EQI4 $152
line 191
;191:			teamgame.blueStatus = status;
ADDRGP4 teamgame+12
ADDRFP4 4
INDIRI4
ASGNI4
line 192
;192:			modified = qtrue;
ADDRLP4 0
CNSTI4 1
ASGNI4
line 193
;193:		}
line 194
;194:		break;
ADDRGP4 $152
JUMPV
LABELV $164
line 197
;195:
;196:	case TEAM_FREE:	// One Flag CTF
;197:		if( teamgame.flagStatus != status ) {
ADDRGP4 teamgame+16
INDIRI4
ADDRFP4 4
INDIRI4
EQI4 $152
line 198
;198:			teamgame.flagStatus = status;
ADDRGP4 teamgame+16
ADDRFP4 4
INDIRI4
ASGNI4
line 199
;199:			modified = qtrue;
ADDRLP4 0
CNSTI4 1
ASGNI4
line 200
;200:		}
line 201
;201:		break;
line 202
;202:	default: break; //qlone - avoid compiler warnings
LABELV $152
line 205
;203:	}
;204:
;205:	if( modified ) {
ADDRLP4 0
INDIRI4
CNSTI4 0
EQI4 $169
line 208
;206:		char st[4];
;207:
;208:		if( g_gametype.integer == GT_CTF ) {
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 4
NEI4 $171
line 209
;209:			st[0] = ctfFlagStatusRemap[teamgame.redStatus];
ADDRLP4 12
ADDRGP4 teamgame+8
INDIRI4
ADDRGP4 ctfFlagStatusRemap
ADDP4
INDIRI1
ASGNI1
line 210
;210:			st[1] = ctfFlagStatusRemap[teamgame.blueStatus];
ADDRLP4 12+1
ADDRGP4 teamgame+12
INDIRI4
ADDRGP4 ctfFlagStatusRemap
ADDP4
INDIRI1
ASGNI1
line 211
;211:			st[2] = 0;
ADDRLP4 12+2
CNSTI1 0
ASGNI1
line 212
;212:		}
ADDRGP4 $172
JUMPV
LABELV $171
line 213
;213:		else {		// GT_1FCTF
line 214
;214:			st[0] = oneFlagStatusRemap[teamgame.flagStatus];
ADDRLP4 12
ADDRGP4 teamgame+16
INDIRI4
ADDRGP4 oneFlagStatusRemap
ADDP4
INDIRI1
ASGNI1
line 215
;215:			st[1] = 0;
ADDRLP4 12+1
CNSTI1 0
ASGNI1
line 216
;216:		}
LABELV $172
line 218
;217:
;218:		trap_SetConfigstring( CS_FLAGSTATUS, st );
CNSTI4 23
ARGI4
ADDRLP4 12
ARGP4
ADDRGP4 trap_SetConfigstring
CALLV
pop
line 219
;219:	}
LABELV $169
line 220
;220:}
LABELV $150
endproc Team_SetFlagStatus 16 8
export Team_CheckDroppedItem
proc Team_CheckDroppedItem 0 8
line 223
;221:
;222:
;223:void Team_CheckDroppedItem( gentity_t *dropped ) {
line 224
;224:	if( dropped->item->giTag == PW_REDFLAG ) {
ADDRFP4 0
INDIRP4
CNSTI4 804
ADDP4
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 7
NEI4 $181
line 225
;225:		Team_SetFlagStatus( TEAM_RED, FLAG_DROPPED );
CNSTI4 1
ARGI4
CNSTI4 4
ARGI4
ADDRGP4 Team_SetFlagStatus
CALLV
pop
line 226
;226:	}
ADDRGP4 $182
JUMPV
LABELV $181
line 227
;227:	else if( dropped->item->giTag == PW_BLUEFLAG ) {
ADDRFP4 0
INDIRP4
CNSTI4 804
ADDP4
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 8
NEI4 $183
line 228
;228:		Team_SetFlagStatus( TEAM_BLUE, FLAG_DROPPED );
CNSTI4 2
ARGI4
CNSTI4 4
ARGI4
ADDRGP4 Team_SetFlagStatus
CALLV
pop
line 229
;229:	}
ADDRGP4 $184
JUMPV
LABELV $183
line 230
;230:	else if( dropped->item->giTag == PW_NEUTRALFLAG ) {
ADDRFP4 0
INDIRP4
CNSTI4 804
ADDP4
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 9
NEI4 $185
line 231
;231:		Team_SetFlagStatus( TEAM_FREE, FLAG_DROPPED );
CNSTI4 0
ARGI4
CNSTI4 4
ARGI4
ADDRGP4 Team_SetFlagStatus
CALLV
pop
line 232
;232:	}
LABELV $185
LABELV $184
LABELV $182
line 233
;233:}
LABELV $180
endproc Team_CheckDroppedItem 0 8
export Team_ForceGesture
proc Team_ForceGesture 12 0
line 241
;234:
;235:
;236:/*
;237:================
;238:Team_ForceGesture
;239:================
;240:*/
;241:/*static*/ void Team_ForceGesture( team_t team ) { //qlone - freezetag (removed static)
line 245
;242:	int i;
;243:	gentity_t *ent;
;244:
;245:	for ( i = 0; i < level.maxclients; i++ ) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $191
JUMPV
LABELV $188
line 246
;246:		ent = &g_entities[i];
ADDRLP4 0
ADDRLP4 4
INDIRI4
CNSTI4 824
MULI4
ADDRGP4 g_entities
ADDP4
ASGNP4
line 247
;247:		if ( !ent->inuse )
ADDRLP4 0
INDIRP4
CNSTI4 520
ADDP4
INDIRI4
CNSTI4 0
NEI4 $193
line 248
;248:			continue;
ADDRGP4 $189
JUMPV
LABELV $193
line 249
;249:		if ( !ent->client )
ADDRLP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $195
line 250
;250:			continue;
ADDRGP4 $189
JUMPV
LABELV $195
line 251
;251:		if ( ent->client->sess.sessionTeam != team )
ADDRLP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 624
ADDP4
INDIRI4
ADDRFP4 0
INDIRI4
EQI4 $197
line 252
;252:			continue;
ADDRGP4 $189
JUMPV
LABELV $197
line 254
;253:		//
;254:		ent->flags |= FL_FORCE_GESTURE;
ADDRLP4 8
ADDRLP4 0
INDIRP4
CNSTI4 536
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 32768
BORI4
ASGNI4
line 255
;255:	}
LABELV $189
line 245
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $191
ADDRLP4 4
INDIRI4
ADDRGP4 level+24
INDIRI4
LTI4 $188
line 256
;256:}
LABELV $187
endproc Team_ForceGesture 12 0
export Team_FragBonuses
proc Team_FragBonuses 184 16
line 269
;257:
;258:
;259:/*
;260:================
;261:Team_FragBonuses
;262:
;263:Calculate the bonuses for flag defense, flag carrier defense, etc.
;264:Note that bonuses are not cumulative.  You get one, they are in importance
;265:order.
;266:================
;267:*/
;268:void Team_FragBonuses(gentity_t *targ, gentity_t *inflictor, gentity_t *attacker)
;269:{
line 275
;270:	int i;
;271:	gentity_t *ent;
;272:	int flag_pw, enemy_flag_pw;
;273:	int otherteam;
;274:	int tokens;
;275:	gentity_t *flag, *carrier = NULL;
ADDRLP4 4
CNSTP4 0
ASGNP4
line 281
;276:	char *c;
;277:	vec3_t v1, v2;
;278:	int team;
;279:
;280:	// no bonus for fragging yourself or team mates
;281:	if (!targ->client || !attacker->client || targ == attacker || OnSameTeam(targ, attacker))
ADDRLP4 64
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 64
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $204
ADDRLP4 68
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 68
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $204
ADDRLP4 64
INDIRP4
CVPU4 4
ADDRLP4 68
INDIRP4
CVPU4 4
EQU4 $204
ADDRLP4 64
INDIRP4
ARGP4
ADDRLP4 68
INDIRP4
ARGP4
ADDRLP4 72
ADDRGP4 OnSameTeam
CALLI4
ASGNI4
ADDRLP4 72
INDIRI4
CNSTI4 0
EQI4 $200
LABELV $204
line 282
;282:		return;
ADDRGP4 $199
JUMPV
LABELV $200
line 284
;283:
;284:	team = targ->client->sess.sessionTeam;
ADDRLP4 52
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 624
ADDP4
INDIRI4
ASGNI4
line 285
;285:	otherteam = OtherTeam(targ->client->sess.sessionTeam);
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 624
ADDP4
INDIRI4
ARGI4
ADDRLP4 76
ADDRGP4 OtherTeam
CALLI4
ASGNI4
ADDRLP4 20
ADDRLP4 76
INDIRI4
ASGNI4
line 286
;286:	if (otherteam < 0)
ADDRLP4 20
INDIRI4
CNSTI4 0
GEI4 $205
line 287
;287:		return; // whoever died isn't on a team
ADDRGP4 $199
JUMPV
LABELV $205
line 290
;288:
;289:	// same team, if the flag at base, check to he has the enemy flag
;290:	if (team == TEAM_RED) {
ADDRLP4 52
INDIRI4
CNSTI4 1
NEI4 $207
line 291
;291:		flag_pw = PW_REDFLAG;
ADDRLP4 16
CNSTI4 7
ASGNI4
line 292
;292:		enemy_flag_pw = PW_BLUEFLAG;
ADDRLP4 60
CNSTI4 8
ASGNI4
line 293
;293:	} else {
ADDRGP4 $208
JUMPV
LABELV $207
line 294
;294:		flag_pw = PW_BLUEFLAG;
ADDRLP4 16
CNSTI4 8
ASGNI4
line 295
;295:		enemy_flag_pw = PW_REDFLAG;
ADDRLP4 60
CNSTI4 7
ASGNI4
line 296
;296:	}
LABELV $208
line 305
;297:
;298:#ifdef MISSIONPACK
;299:	if (g_gametype.integer == GT_1FCTF) {
;300:		enemy_flag_pw = PW_NEUTRALFLAG;
;301:	} 
;302:#endif
;303:
;304:	// did the attacker frag the flag carrier?
;305:	tokens = 0;
ADDRLP4 56
CNSTI4 0
ASGNI4
line 311
;306:#ifdef MISSIONPACK
;307:	if( g_gametype.integer == GT_HARVESTER ) {
;308:		tokens = targ->client->ps.generic1;
;309:	}
;310:#endif
;311:	if (targ->client->ps.powerups[enemy_flag_pw]) {
ADDRLP4 60
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 312
ADDP4
ADDP4
INDIRI4
CNSTI4 0
EQI4 $209
line 312
;312:		attacker->client->pers.teamState.lastfraggedcarrier = level.time;
ADDRFP4 8
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 596
ADDP4
ADDRGP4 level+32
INDIRI4
CVIF4 4
ASGNF4
line 313
;313:		AddScore(attacker, targ->r.currentOrigin, CTF_FRAG_CARRIER_BONUS);
ADDRFP4 8
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 488
ADDP4
ARGP4
CNSTI4 2
ARGI4
ADDRGP4 AddScore
CALLV
pop
line 314
;314:		attacker->client->pers.teamState.fragcarrier++;
ADDRLP4 80
ADDRFP4 8
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 576
ADDP4
ASGNP4
ADDRLP4 80
INDIRP4
ADDRLP4 80
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 315
;315:		PrintMsg(NULL, "%s" S_COLOR_WHITE " fragged %s's flag carrier!\n",
ADDRLP4 52
INDIRI4
ARGI4
ADDRLP4 84
ADDRGP4 TeamName
CALLP4
ASGNP4
CNSTP4 0
ARGP4
ADDRGP4 $212
ARGP4
ADDRFP4 8
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 508
ADDP4
ARGP4
ADDRLP4 84
INDIRP4
ARGP4
ADDRGP4 PrintMsg
CALLV
pop
line 320
;316:			attacker->client->pers.netname, TeamName(team));
;317:
;318:		// the target had the flag, clear the hurt carrier
;319:		// field on the other team
;320:		for (i = 0; i < level.maxclients; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $216
JUMPV
LABELV $213
line 321
;321:			ent = g_entities + i;
ADDRLP4 12
ADDRLP4 0
INDIRI4
CNSTI4 824
MULI4
ADDRGP4 g_entities
ADDP4
ASGNP4
line 322
;322:			if (ent->inuse && ent->client->sess.sessionTeam == otherteam)
ADDRLP4 12
INDIRP4
CNSTI4 520
ADDP4
INDIRI4
CNSTI4 0
EQI4 $218
ADDRLP4 12
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 624
ADDP4
INDIRI4
ADDRLP4 20
INDIRI4
NEI4 $218
line 323
;323:				ent->client->pers.teamState.lasthurtcarrier = 0;
ADDRLP4 12
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 584
ADDP4
CNSTF4 0
ASGNF4
LABELV $218
line 324
;324:		}
LABELV $214
line 320
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $216
ADDRLP4 0
INDIRI4
ADDRGP4 level+24
INDIRI4
LTI4 $213
line 325
;325:		return;
ADDRGP4 $199
JUMPV
LABELV $209
line 329
;326:	}
;327:
;328:	// did the attacker frag a head carrier? other->client->ps.generic1
;329:	if (tokens) {
ADDRLP4 56
INDIRI4
CNSTI4 0
EQI4 $220
line 330
;330:		attacker->client->pers.teamState.lastfraggedcarrier = level.time;
ADDRFP4 8
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 596
ADDP4
ADDRGP4 level+32
INDIRI4
CVIF4 4
ASGNF4
line 331
;331:		AddScore(attacker, targ->r.currentOrigin, CTF_FRAG_CARRIER_BONUS * tokens * tokens);
ADDRFP4 8
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 488
ADDP4
ARGP4
ADDRLP4 56
INDIRI4
CNSTI4 1
LSHI4
ADDRLP4 56
INDIRI4
MULI4
ARGI4
ADDRGP4 AddScore
CALLV
pop
line 332
;332:		attacker->client->pers.teamState.fragcarrier++;
ADDRLP4 84
ADDRFP4 8
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 576
ADDP4
ASGNP4
ADDRLP4 84
INDIRP4
ADDRLP4 84
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 333
;333:		PrintMsg(NULL, "%s" S_COLOR_WHITE " fragged %s's skull carrier!\n",
ADDRLP4 52
INDIRI4
ARGI4
ADDRLP4 88
ADDRGP4 TeamName
CALLP4
ASGNP4
CNSTP4 0
ARGP4
ADDRGP4 $223
ARGP4
ADDRFP4 8
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 508
ADDP4
ARGP4
ADDRLP4 88
INDIRP4
ARGP4
ADDRGP4 PrintMsg
CALLV
pop
line 338
;334:			attacker->client->pers.netname, TeamName(team));
;335:
;336:		// the target had the flag, clear the hurt carrier
;337:		// field on the other team
;338:		for (i = 0; i < level.maxclients; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $227
JUMPV
LABELV $224
line 339
;339:			ent = g_entities + i;
ADDRLP4 12
ADDRLP4 0
INDIRI4
CNSTI4 824
MULI4
ADDRGP4 g_entities
ADDP4
ASGNP4
line 340
;340:			if (ent->inuse && ent->client->sess.sessionTeam == otherteam)
ADDRLP4 12
INDIRP4
CNSTI4 520
ADDP4
INDIRI4
CNSTI4 0
EQI4 $229
ADDRLP4 12
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 624
ADDP4
INDIRI4
ADDRLP4 20
INDIRI4
NEI4 $229
line 341
;341:				ent->client->pers.teamState.lasthurtcarrier = 0;
ADDRLP4 12
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 584
ADDP4
CNSTF4 0
ASGNF4
LABELV $229
line 342
;342:		}
LABELV $225
line 338
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $227
ADDRLP4 0
INDIRI4
ADDRGP4 level+24
INDIRI4
LTI4 $224
line 343
;343:		return;
ADDRGP4 $199
JUMPV
LABELV $220
line 346
;344:	}
;345:
;346:	if (targ->client->pers.teamState.lasthurtcarrier &&
ADDRLP4 80
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 80
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 584
ADDP4
INDIRF4
CNSTF4 0
EQF4 $231
ADDRGP4 level+32
INDIRI4
CVIF4 4
ADDRLP4 80
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 584
ADDP4
INDIRF4
SUBF4
CNSTF4 1174011904
GEF4 $231
ADDRLP4 16
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 8
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 312
ADDP4
ADDP4
INDIRI4
CNSTI4 0
NEI4 $231
line 348
;347:		level.time - targ->client->pers.teamState.lasthurtcarrier < CTF_CARRIER_DANGER_PROTECT_TIMEOUT &&
;348:		!attacker->client->ps.powerups[flag_pw]) {
line 351
;349:		// attacker is on the same team as the flag carrier and
;350:		// fragged a guy who hurt our flag carrier
;351:		AddScore(attacker, targ->r.currentOrigin, CTF_CARRIER_DANGER_PROTECT_BONUS);
ADDRFP4 8
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 488
ADDP4
ARGP4
CNSTI4 2
ARGI4
ADDRGP4 AddScore
CALLV
pop
line 353
;352:
;353:		attacker->client->pers.teamState.carrierdefense++;
ADDRLP4 84
ADDRFP4 8
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 568
ADDP4
ASGNP4
ADDRLP4 84
INDIRP4
ADDRLP4 84
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 354
;354:		targ->client->pers.teamState.lasthurtcarrier = 0;
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 584
ADDP4
CNSTF4 0
ASGNF4
line 356
;355:
;356:		attacker->client->ps.persistant[PERS_DEFEND_COUNT]++;
ADDRLP4 88
ADDRFP4 8
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 292
ADDP4
ASGNP4
ADDRLP4 88
INDIRP4
ADDRLP4 88
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 357
;357:		team = attacker->client->sess.sessionTeam;
ADDRLP4 52
ADDRFP4 8
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 624
ADDP4
INDIRI4
ASGNI4
line 359
;358:		// add the sprite over the player's head
;359:		attacker->client->ps.eFlags &= ~(EF_AWARD_IMPRESSIVE | EF_AWARD_EXCELLENT | EF_AWARD_GAUNTLET | EF_AWARD_ASSIST | EF_AWARD_DEFEND | EF_AWARD_CAP );
ADDRLP4 92
ADDRFP4 8
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 104
ADDP4
ASGNP4
ADDRLP4 92
INDIRP4
ADDRLP4 92
INDIRP4
INDIRI4
CNSTI4 -231497
BANDI4
ASGNI4
line 360
;360:		attacker->client->ps.eFlags |= EF_AWARD_DEFEND;
ADDRLP4 96
ADDRFP4 8
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 104
ADDP4
ASGNP4
ADDRLP4 96
INDIRP4
ADDRLP4 96
INDIRP4
INDIRI4
CNSTI4 65536
BORI4
ASGNI4
line 361
;361:		attacker->client->rewardTime = level.time + REWARD_SPRITE_TIME;
ADDRFP4 8
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 752
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 2000
ADDI4
ASGNI4
line 363
;362:
;363:		return;
ADDRGP4 $199
JUMPV
LABELV $231
line 366
;364:	}
;365:
;366:	if (targ->client->pers.teamState.lasthurtcarrier &&
ADDRLP4 84
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 84
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 584
ADDP4
INDIRF4
CNSTF4 0
EQF4 $235
ADDRGP4 level+32
INDIRI4
CVIF4 4
ADDRLP4 84
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 584
ADDP4
INDIRF4
SUBF4
CNSTF4 1174011904
GEF4 $235
line 367
;367:		level.time - targ->client->pers.teamState.lasthurtcarrier < CTF_CARRIER_DANGER_PROTECT_TIMEOUT) {
line 369
;368:		// attacker is on the same team as the skull carrier and
;369:		AddScore(attacker, targ->r.currentOrigin, CTF_CARRIER_DANGER_PROTECT_BONUS);
ADDRFP4 8
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 488
ADDP4
ARGP4
CNSTI4 2
ARGI4
ADDRGP4 AddScore
CALLV
pop
line 371
;370:
;371:		attacker->client->pers.teamState.carrierdefense++;
ADDRLP4 88
ADDRFP4 8
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 568
ADDP4
ASGNP4
ADDRLP4 88
INDIRP4
ADDRLP4 88
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 372
;372:		targ->client->pers.teamState.lasthurtcarrier = 0;
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 584
ADDP4
CNSTF4 0
ASGNF4
line 374
;373:
;374:		attacker->client->ps.persistant[PERS_DEFEND_COUNT]++;
ADDRLP4 92
ADDRFP4 8
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 292
ADDP4
ASGNP4
ADDRLP4 92
INDIRP4
ADDRLP4 92
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 375
;375:		team = attacker->client->sess.sessionTeam;
ADDRLP4 52
ADDRFP4 8
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 624
ADDP4
INDIRI4
ASGNI4
line 377
;376:		// add the sprite over the player's head
;377:		attacker->client->ps.eFlags &= ~(EF_AWARD_IMPRESSIVE | EF_AWARD_EXCELLENT | EF_AWARD_GAUNTLET | EF_AWARD_ASSIST | EF_AWARD_DEFEND | EF_AWARD_CAP );
ADDRLP4 96
ADDRFP4 8
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 104
ADDP4
ASGNP4
ADDRLP4 96
INDIRP4
ADDRLP4 96
INDIRP4
INDIRI4
CNSTI4 -231497
BANDI4
ASGNI4
line 378
;378:		attacker->client->ps.eFlags |= EF_AWARD_DEFEND;
ADDRLP4 100
ADDRFP4 8
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 104
ADDP4
ASGNP4
ADDRLP4 100
INDIRP4
ADDRLP4 100
INDIRP4
INDIRI4
CNSTI4 65536
BORI4
ASGNI4
line 379
;379:		attacker->client->rewardTime = level.time + REWARD_SPRITE_TIME;
ADDRFP4 8
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 752
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 2000
ADDI4
ASGNI4
line 381
;380:
;381:		return;
ADDRGP4 $199
JUMPV
LABELV $235
line 408
;382:	}
;383:
;384:	// flag and flag carrier area defense bonuses
;385:
;386:	// we have to find the flag and carrier entities
;387:
;388:#ifdef MISSIONPACK	
;389:	if( g_gametype.integer == GT_OBELISK ) {
;390:		// find the team obelisk
;391:		switch (attacker->client->sess.sessionTeam) {
;392:		case TEAM_RED:
;393:			c = "team_redobelisk";
;394:			break;
;395:		case TEAM_BLUE:
;396:			c = "team_blueobelisk";
;397:			break;		
;398:		default:
;399:			return;
;400:		}
;401:		
;402:	} else if (g_gametype.integer == GT_HARVESTER ) {
;403:		// find the center obelisk
;404:		c = "team_neutralobelisk";
;405:	} else {
;406:#endif
;407:	// find the flag
;408:	switch (attacker->client->sess.sessionTeam) {
ADDRLP4 88
ADDRFP4 8
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 624
ADDP4
INDIRI4
ASGNI4
ADDRLP4 88
INDIRI4
CNSTI4 1
EQI4 $242
ADDRLP4 88
INDIRI4
CNSTI4 2
EQI4 $244
ADDRGP4 $199
JUMPV
LABELV $242
line 410
;409:	case TEAM_RED:
;410:		c = "team_CTF_redflag";
ADDRLP4 24
ADDRGP4 $243
ASGNP4
line 411
;411:		break;
ADDRGP4 $240
JUMPV
LABELV $244
line 413
;412:	case TEAM_BLUE:
;413:		c = "team_CTF_blueflag";
ADDRLP4 24
ADDRGP4 $245
ASGNP4
line 414
;414:		break;		
line 416
;415:	default:
;416:		return;
LABELV $240
line 419
;417:	}
;418:	// find attacker's team's flag carrier
;419:	for (i = 0; i < level.maxclients; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $249
JUMPV
LABELV $246
line 420
;420:		carrier = g_entities + i;
ADDRLP4 4
ADDRLP4 0
INDIRI4
CNSTI4 824
MULI4
ADDRGP4 g_entities
ADDP4
ASGNP4
line 421
;421:		if (carrier->inuse && carrier->client->ps.powerups[flag_pw])
ADDRLP4 4
INDIRP4
CNSTI4 520
ADDP4
INDIRI4
CNSTI4 0
EQI4 $251
ADDRLP4 16
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 312
ADDP4
ADDP4
INDIRI4
CNSTI4 0
EQI4 $251
line 422
;422:			break;
ADDRGP4 $248
JUMPV
LABELV $251
line 423
;423:		carrier = NULL;
ADDRLP4 4
CNSTP4 0
ASGNP4
line 424
;424:	}
LABELV $247
line 419
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $249
ADDRLP4 0
INDIRI4
ADDRGP4 level+24
INDIRI4
LTI4 $246
LABELV $248
line 428
;425:#ifdef MISSIONPACK
;426:	}
;427:#endif
;428:	flag = NULL;
ADDRLP4 8
CNSTP4 0
ASGNP4
ADDRGP4 $254
JUMPV
LABELV $253
line 429
;429:	while ((flag = G_Find (flag, FOFS(classname), c)) != NULL) {
line 430
;430:		if (!(flag->flags & FL_DROPPED_ITEM))
ADDRLP4 8
INDIRP4
CNSTI4 536
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
NEI4 $256
line 431
;431:			break;
ADDRGP4 $255
JUMPV
LABELV $256
line 432
;432:	}
LABELV $254
line 429
ADDRLP4 8
INDIRP4
ARGP4
CNSTI4 524
ARGI4
ADDRLP4 24
INDIRP4
ARGP4
ADDRLP4 96
ADDRGP4 G_Find
CALLP4
ASGNP4
ADDRLP4 8
ADDRLP4 96
INDIRP4
ASGNP4
ADDRLP4 96
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $253
LABELV $255
line 434
;433:
;434:	if (!flag)
ADDRLP4 8
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $258
line 435
;435:		return; // can't find attacker's flag
ADDRGP4 $199
JUMPV
LABELV $258
line 440
;436:
;437:	// ok we have the attackers flag and a pointer to the carrier
;438:
;439:	// check to see if we are defending the base's flag
;440:	VectorSubtract(targ->r.currentOrigin, flag->r.currentOrigin, v1);
ADDRLP4 100
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
ADDRLP4 100
INDIRP4
CNSTI4 488
ADDP4
INDIRF4
ADDRLP4 8
INDIRP4
CNSTI4 488
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 28+4
ADDRLP4 100
INDIRP4
CNSTI4 492
ADDP4
INDIRF4
ADDRLP4 8
INDIRP4
CNSTI4 492
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 28+8
ADDRFP4 0
INDIRP4
CNSTI4 496
ADDP4
INDIRF4
ADDRLP4 8
INDIRP4
CNSTI4 496
ADDP4
INDIRF4
SUBF4
ASGNF4
line 441
;441:	VectorSubtract(attacker->r.currentOrigin, flag->r.currentOrigin, v2);
ADDRLP4 108
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 40
ADDRLP4 108
INDIRP4
CNSTI4 488
ADDP4
INDIRF4
ADDRLP4 8
INDIRP4
CNSTI4 488
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 40+4
ADDRLP4 108
INDIRP4
CNSTI4 492
ADDP4
INDIRF4
ADDRLP4 8
INDIRP4
CNSTI4 492
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 40+8
ADDRFP4 8
INDIRP4
CNSTI4 496
ADDP4
INDIRF4
ADDRLP4 8
INDIRP4
CNSTI4 496
ADDP4
INDIRF4
SUBF4
ASGNF4
line 443
;442:
;443:	if ( ( ( VectorLength(v1) < CTF_TARGET_PROTECT_RADIUS &&
ADDRLP4 28
ARGP4
ADDRLP4 116
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 116
INDIRF4
CNSTF4 1148846080
GEF4 $267
ADDRLP4 8
INDIRP4
CNSTI4 488
ADDP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 488
ADDP4
ARGP4
ADDRLP4 120
ADDRGP4 trap_InPVS
CALLI4
ASGNI4
ADDRLP4 120
INDIRI4
CNSTI4 0
NEI4 $266
LABELV $267
ADDRLP4 40
ARGP4
ADDRLP4 124
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 124
INDIRF4
CNSTF4 1148846080
GEF4 $264
ADDRLP4 8
INDIRP4
CNSTI4 488
ADDP4
ARGP4
ADDRFP4 8
INDIRP4
CNSTI4 488
ADDP4
ARGP4
ADDRLP4 128
ADDRGP4 trap_InPVS
CALLI4
ASGNI4
ADDRLP4 128
INDIRI4
CNSTI4 0
EQI4 $264
LABELV $266
ADDRFP4 8
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 624
ADDP4
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 624
ADDP4
INDIRI4
EQI4 $264
line 447
;444:		trap_InPVS(flag->r.currentOrigin, targ->r.currentOrigin ) ) ||
;445:		( VectorLength(v2) < CTF_TARGET_PROTECT_RADIUS &&
;446:		trap_InPVS(flag->r.currentOrigin, attacker->r.currentOrigin ) ) ) &&
;447:		attacker->client->sess.sessionTeam != targ->client->sess.sessionTeam) {
line 450
;448:
;449:		// we defended the base flag
;450:		AddScore(attacker, targ->r.currentOrigin, CTF_FLAG_DEFENSE_BONUS);
ADDRFP4 8
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 488
ADDP4
ARGP4
CNSTI4 1
ARGI4
ADDRGP4 AddScore
CALLV
pop
line 451
;451:		attacker->client->pers.teamState.basedefense++;
ADDRLP4 132
ADDRFP4 8
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 564
ADDP4
ASGNP4
ADDRLP4 132
INDIRP4
ADDRLP4 132
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 453
;452:
;453:		attacker->client->ps.persistant[PERS_DEFEND_COUNT]++;
ADDRLP4 136
ADDRFP4 8
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 292
ADDP4
ASGNP4
ADDRLP4 136
INDIRP4
ADDRLP4 136
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 455
;454:		// add the sprite over the player's head
;455:		attacker->client->ps.eFlags &= ~(EF_AWARD_IMPRESSIVE | EF_AWARD_EXCELLENT | EF_AWARD_GAUNTLET | EF_AWARD_ASSIST | EF_AWARD_DEFEND | EF_AWARD_CAP );
ADDRLP4 140
ADDRFP4 8
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 104
ADDP4
ASGNP4
ADDRLP4 140
INDIRP4
ADDRLP4 140
INDIRP4
INDIRI4
CNSTI4 -231497
BANDI4
ASGNI4
line 456
;456:		attacker->client->ps.eFlags |= EF_AWARD_DEFEND;
ADDRLP4 144
ADDRFP4 8
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 104
ADDP4
ASGNP4
ADDRLP4 144
INDIRP4
ADDRLP4 144
INDIRP4
INDIRI4
CNSTI4 65536
BORI4
ASGNI4
line 457
;457:		attacker->client->rewardTime = level.time + REWARD_SPRITE_TIME;
ADDRFP4 8
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 752
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 2000
ADDI4
ASGNI4
line 459
;458:
;459:		return;
ADDRGP4 $199
JUMPV
LABELV $264
line 462
;460:	}
;461:
;462:	if (carrier && carrier != attacker) {
ADDRLP4 132
ADDRLP4 4
INDIRP4
CVPU4 4
ASGNU4
ADDRLP4 132
INDIRU4
CNSTU4 0
EQU4 $269
ADDRLP4 132
INDIRU4
ADDRFP4 8
INDIRP4
CVPU4 4
EQU4 $269
line 463
;463:		VectorSubtract(targ->r.currentOrigin, carrier->r.currentOrigin, v1);
ADDRLP4 136
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
ADDRLP4 136
INDIRP4
CNSTI4 488
ADDP4
INDIRF4
ADDRLP4 4
INDIRP4
CNSTI4 488
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 28+4
ADDRLP4 136
INDIRP4
CNSTI4 492
ADDP4
INDIRF4
ADDRLP4 4
INDIRP4
CNSTI4 492
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 28+8
ADDRFP4 0
INDIRP4
CNSTI4 496
ADDP4
INDIRF4
ADDRLP4 4
INDIRP4
CNSTI4 496
ADDP4
INDIRF4
SUBF4
ASGNF4
line 464
;464:		VectorSubtract(attacker->r.currentOrigin, carrier->r.currentOrigin, v1);
ADDRLP4 144
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 28
ADDRLP4 144
INDIRP4
CNSTI4 488
ADDP4
INDIRF4
ADDRLP4 4
INDIRP4
CNSTI4 488
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 28+4
ADDRLP4 144
INDIRP4
CNSTI4 492
ADDP4
INDIRF4
ADDRLP4 4
INDIRP4
CNSTI4 492
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 28+8
ADDRFP4 8
INDIRP4
CNSTI4 496
ADDP4
INDIRF4
ADDRLP4 4
INDIRP4
CNSTI4 496
ADDP4
INDIRF4
SUBF4
ASGNF4
line 466
;465:
;466:		if ( ( ( VectorLength(v1) < CTF_ATTACKER_PROTECT_RADIUS &&
ADDRLP4 28
ARGP4
ADDRLP4 152
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 152
INDIRF4
CNSTF4 1148846080
GEF4 $278
ADDRLP4 4
INDIRP4
CNSTI4 488
ADDP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 488
ADDP4
ARGP4
ADDRLP4 156
ADDRGP4 trap_InPVS
CALLI4
ASGNI4
ADDRLP4 156
INDIRI4
CNSTI4 0
NEI4 $277
LABELV $278
ADDRLP4 40
ARGP4
ADDRLP4 160
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 160
INDIRF4
CNSTF4 1148846080
GEF4 $275
ADDRLP4 4
INDIRP4
CNSTI4 488
ADDP4
ARGP4
ADDRFP4 8
INDIRP4
CNSTI4 488
ADDP4
ARGP4
ADDRLP4 164
ADDRGP4 trap_InPVS
CALLI4
ASGNI4
ADDRLP4 164
INDIRI4
CNSTI4 0
EQI4 $275
LABELV $277
ADDRFP4 8
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 624
ADDP4
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 624
ADDP4
INDIRI4
EQI4 $275
line 470
;467:			trap_InPVS(carrier->r.currentOrigin, targ->r.currentOrigin ) ) ||
;468:			( VectorLength(v2) < CTF_ATTACKER_PROTECT_RADIUS &&
;469:				trap_InPVS(carrier->r.currentOrigin, attacker->r.currentOrigin ) ) ) &&
;470:			attacker->client->sess.sessionTeam != targ->client->sess.sessionTeam) {
line 471
;471:			AddScore(attacker, targ->r.currentOrigin, CTF_CARRIER_PROTECT_BONUS);
ADDRFP4 8
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 488
ADDP4
ARGP4
CNSTI4 1
ARGI4
ADDRGP4 AddScore
CALLV
pop
line 472
;472:			attacker->client->pers.teamState.carrierdefense++;
ADDRLP4 168
ADDRFP4 8
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 568
ADDP4
ASGNP4
ADDRLP4 168
INDIRP4
ADDRLP4 168
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 474
;473:
;474:			attacker->client->ps.persistant[PERS_DEFEND_COUNT]++;
ADDRLP4 172
ADDRFP4 8
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 292
ADDP4
ASGNP4
ADDRLP4 172
INDIRP4
ADDRLP4 172
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 476
;475:			// add the sprite over the player's head
;476:			attacker->client->ps.eFlags &= ~(EF_AWARD_IMPRESSIVE | EF_AWARD_EXCELLENT | EF_AWARD_GAUNTLET | EF_AWARD_ASSIST | EF_AWARD_DEFEND | EF_AWARD_CAP );
ADDRLP4 176
ADDRFP4 8
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 104
ADDP4
ASGNP4
ADDRLP4 176
INDIRP4
ADDRLP4 176
INDIRP4
INDIRI4
CNSTI4 -231497
BANDI4
ASGNI4
line 477
;477:			attacker->client->ps.eFlags |= EF_AWARD_DEFEND;
ADDRLP4 180
ADDRFP4 8
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 104
ADDP4
ASGNP4
ADDRLP4 180
INDIRP4
ADDRLP4 180
INDIRP4
INDIRI4
CNSTI4 65536
BORI4
ASGNI4
line 478
;478:			attacker->client->rewardTime = level.time + REWARD_SPRITE_TIME;
ADDRFP4 8
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 752
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 2000
ADDI4
ASGNI4
line 480
;479:
;480:			return;
LABELV $275
line 482
;481:		}
;482:	}
LABELV $269
line 483
;483:}
LABELV $199
endproc Team_FragBonuses 184 16
export Team_CheckHurtCarrier
proc Team_CheckHurtCarrier 12 0
line 495
;484:
;485:
;486:/*
;487:================
;488:Team_CheckHurtCarrier
;489:
;490:Check to see if attacker hurt the flag carrier.  Needed when handing out bonuses for assistance to flag
;491:carrier defense.
;492:================
;493:*/
;494:void Team_CheckHurtCarrier(gentity_t *targ, gentity_t *attacker)
;495:{
line 498
;496:	int flag_pw;
;497:
;498:	if (!targ->client || !attacker->client)
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $283
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $281
LABELV $283
line 499
;499:		return;
ADDRGP4 $280
JUMPV
LABELV $281
line 501
;500:
;501:	if (targ->client->sess.sessionTeam == TEAM_RED)
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 624
ADDP4
INDIRI4
CNSTI4 1
NEI4 $284
line 502
;502:		flag_pw = PW_BLUEFLAG;
ADDRLP4 0
CNSTI4 8
ASGNI4
ADDRGP4 $285
JUMPV
LABELV $284
line 504
;503:	else
;504:		flag_pw = PW_REDFLAG;
ADDRLP4 0
CNSTI4 7
ASGNI4
LABELV $285
line 507
;505:
;506:	// flags
;507:	if (targ->client->ps.powerups[flag_pw] &&
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 312
ADDP4
ADDP4
INDIRI4
CNSTI4 0
EQI4 $286
ADDRLP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 624
ADDP4
INDIRI4
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 624
ADDP4
INDIRI4
EQI4 $286
line 509
;508:		targ->client->sess.sessionTeam != attacker->client->sess.sessionTeam)
;509:		attacker->client->pers.teamState.lasthurtcarrier = level.time;
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 584
ADDP4
ADDRGP4 level+32
INDIRI4
CVIF4 4
ASGNF4
LABELV $286
line 512
;510:
;511:	// skulls
;512:	if (targ->client->ps.generic1 &&
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 440
ADDP4
INDIRI4
CNSTI4 0
EQI4 $289
ADDRLP4 8
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 624
ADDP4
INDIRI4
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 624
ADDP4
INDIRI4
EQI4 $289
line 514
;513:		targ->client->sess.sessionTeam != attacker->client->sess.sessionTeam)
;514:		attacker->client->pers.teamState.lasthurtcarrier = level.time;
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 584
ADDP4
ADDRGP4 level+32
INDIRI4
CVIF4 4
ASGNF4
LABELV $289
line 515
;515:}
LABELV $280
endproc Team_CheckHurtCarrier 12 0
proc Team_ResetFlag 24 12
line 518
;516:
;517:
;518:static gentity_t *Team_ResetFlag( team_t team ) {
line 520
;519:	char *c;
;520:	gentity_t *ent, *rent = NULL;
ADDRLP4 8
CNSTP4 0
ASGNP4
line 522
;521:
;522:	switch (team) {
ADDRLP4 12
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 0
EQI4 $298
ADDRLP4 12
INDIRI4
CNSTI4 1
EQI4 $296
ADDRLP4 12
INDIRI4
CNSTI4 2
EQI4 $297
ADDRGP4 $293
JUMPV
LABELV $296
line 524
;523:	case TEAM_RED:
;524:		c = "team_CTF_redflag";
ADDRLP4 4
ADDRGP4 $243
ASGNP4
line 525
;525:		break;
ADDRGP4 $294
JUMPV
LABELV $297
line 527
;526:	case TEAM_BLUE:
;527:		c = "team_CTF_blueflag";
ADDRLP4 4
ADDRGP4 $245
ASGNP4
line 528
;528:		break;
ADDRGP4 $294
JUMPV
LABELV $298
line 530
;529:	case TEAM_FREE:
;530:		c = "team_CTF_neutralflag";
ADDRLP4 4
ADDRGP4 $299
ASGNP4
line 531
;531:		break;
ADDRGP4 $294
JUMPV
LABELV $293
line 533
;532:	default:
;533:		return NULL;
CNSTP4 0
RETP4
ADDRGP4 $292
JUMPV
LABELV $294
line 536
;534:	}
;535:
;536:	ent = NULL;
ADDRLP4 0
CNSTP4 0
ASGNP4
ADDRGP4 $301
JUMPV
LABELV $300
line 537
;537:	while ((ent = G_Find (ent, FOFS(classname), c)) != NULL) {
line 538
;538:		if (ent->flags & FL_DROPPED_ITEM)
ADDRLP4 0
INDIRP4
CNSTI4 536
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
EQI4 $303
line 539
;539:			G_FreeEntity(ent);
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 G_FreeEntity
CALLV
pop
ADDRGP4 $304
JUMPV
LABELV $303
line 540
;540:		else {
line 541
;541:			rent = ent;
ADDRLP4 8
ADDRLP4 0
INDIRP4
ASGNP4
line 542
;542:			RespawnItem(ent);
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 RespawnItem
CALLV
pop
line 543
;543:		}
LABELV $304
line 544
;544:	}
LABELV $301
line 537
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 524
ARGI4
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 G_Find
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $300
line 546
;545:
;546:	Team_SetFlagStatus( team, FLAG_ATBASE );
ADDRFP4 0
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 Team_SetFlagStatus
CALLV
pop
line 548
;547:
;548:	return rent;
ADDRLP4 8
INDIRP4
RETP4
LABELV $292
endproc Team_ResetFlag 24 12
export Team_ResetFlags
proc Team_ResetFlags 0 4
line 552
;549:}
;550:
;551:
;552:void Team_ResetFlags( void ) {
line 553
;553:	if( g_gametype.integer == GT_CTF ) {
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 4
NEI4 $306
line 554
;554:		Team_ResetFlag( TEAM_RED );
CNSTI4 1
ARGI4
ADDRGP4 Team_ResetFlag
CALLP4
pop
line 555
;555:		Team_ResetFlag( TEAM_BLUE );
CNSTI4 2
ARGI4
ADDRGP4 Team_ResetFlag
CALLP4
pop
line 556
;556:	}
LABELV $306
line 562
;557:#ifdef MISSIONPACK
;558:	else if( g_gametype.integer == GT_1FCTF ) {
;559:		Team_ResetFlag( TEAM_FREE );
;560:	}
;561:#endif
;562:}
LABELV $305
endproc Team_ResetFlags 0 4
proc Team_ReturnFlagSound 12 8
line 565
;563:
;564:
;565:static void Team_ReturnFlagSound( gentity_t *ent, team_t team ) {
line 568
;566:	gentity_t	*te;
;567:
;568:	if (ent == NULL) {
ADDRFP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $310
line 569
;569:		G_Printf ("Warning:  NULL passed to Team_ReturnFlagSound\n");
ADDRGP4 $312
ARGP4
ADDRGP4 G_Printf
CALLV
pop
line 570
;570:		return;
ADDRGP4 $309
JUMPV
LABELV $310
line 573
;571:	}
;572:
;573:	te = G_TempEntity( ent->s.pos.trBase, EV_GLOBAL_TEAM_SOUND );
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
ARGP4
CNSTI4 47
ARGI4
ADDRLP4 4
ADDRGP4 G_TempEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 574
;574:	if( team == TEAM_BLUE ) {
ADDRFP4 4
INDIRI4
CNSTI4 2
NEI4 $313
line 575
;575:		te->s.eventParm = GTS_RED_RETURN;
ADDRLP4 0
INDIRP4
CNSTI4 184
ADDP4
CNSTI4 2
ASGNI4
line 576
;576:	}
ADDRGP4 $314
JUMPV
LABELV $313
line 577
;577:	else {
line 578
;578:		te->s.eventParm = GTS_BLUE_RETURN;
ADDRLP4 0
INDIRP4
CNSTI4 184
ADDP4
CNSTI4 3
ASGNI4
line 579
;579:	}
LABELV $314
line 580
;580:	te->r.svFlags |= SVF_BROADCAST;
ADDRLP4 8
ADDRLP4 0
INDIRP4
CNSTI4 424
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 32
BORI4
ASGNI4
line 581
;581:}
LABELV $309
endproc Team_ReturnFlagSound 12 8
proc Team_TakeFlagSound 20 8
line 584
;582:
;583:
;584:static void Team_TakeFlagSound( gentity_t *ent, team_t team ) {
line 587
;585:	gentity_t	*te;
;586:
;587:	if (ent == NULL) {
ADDRFP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $316
line 588
;588:		G_Printf ("Warning:  NULL passed to Team_TakeFlagSound\n");
ADDRGP4 $318
ARGP4
ADDRGP4 G_Printf
CALLV
pop
line 589
;589:		return;
ADDRGP4 $315
JUMPV
LABELV $316
line 594
;590:	}
;591:
;592:	// only play sound when the flag was at the base
;593:	// or not picked up the last 10 seconds
;594:	switch(team) {
ADDRLP4 4
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 1
EQI4 $322
ADDRLP4 4
INDIRI4
CNSTI4 2
EQI4 $332
ADDRGP4 $320
JUMPV
LABELV $322
line 596
;595:		case TEAM_RED:
;596:			if( teamgame.blueStatus != FLAG_ATBASE ) {
ADDRGP4 teamgame+12
INDIRI4
CNSTI4 0
EQI4 $323
line 597
;597:				if (teamgame.blueTakenTime > level.time - 10000)
ADDRGP4 teamgame+24
INDIRI4
ADDRGP4 level+32
INDIRI4
CNSTI4 10000
SUBI4
LEI4 $326
line 598
;598:					return;
ADDRGP4 $315
JUMPV
LABELV $326
line 599
;599:			}
LABELV $323
line 600
;600:			teamgame.blueTakenTime = level.time;
ADDRGP4 teamgame+24
ADDRGP4 level+32
INDIRI4
ASGNI4
line 601
;601:			break;
ADDRGP4 $320
JUMPV
LABELV $332
line 604
;602:
;603:		case TEAM_BLUE:	// CTF
;604:			if( teamgame.redStatus != FLAG_ATBASE ) {
ADDRGP4 teamgame+8
INDIRI4
CNSTI4 0
EQI4 $333
line 605
;605:				if (teamgame.redTakenTime > level.time - 10000)
ADDRGP4 teamgame+20
INDIRI4
ADDRGP4 level+32
INDIRI4
CNSTI4 10000
SUBI4
LEI4 $336
line 606
;606:					return;
ADDRGP4 $315
JUMPV
LABELV $336
line 607
;607:			}
LABELV $333
line 608
;608:			teamgame.redTakenTime = level.time;
ADDRGP4 teamgame+20
ADDRGP4 level+32
INDIRI4
ASGNI4
line 609
;609:			break;
line 610
;610:		default: break; //qlone - avoid compiler warnings
LABELV $320
line 613
;611:	}
;612:
;613:	te = G_TempEntity( ent->s.pos.trBase, EV_GLOBAL_TEAM_SOUND );
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
ARGP4
CNSTI4 47
ARGI4
ADDRLP4 12
ADDRGP4 G_TempEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 12
INDIRP4
ASGNP4
line 614
;614:	if( team == TEAM_BLUE ) {
ADDRFP4 4
INDIRI4
CNSTI4 2
NEI4 $342
line 615
;615:		te->s.eventParm = GTS_RED_TAKEN;
ADDRLP4 0
INDIRP4
CNSTI4 184
ADDP4
CNSTI4 4
ASGNI4
line 616
;616:	}
ADDRGP4 $343
JUMPV
LABELV $342
line 617
;617:	else {
line 618
;618:		te->s.eventParm = GTS_BLUE_TAKEN;
ADDRLP4 0
INDIRP4
CNSTI4 184
ADDP4
CNSTI4 5
ASGNI4
line 619
;619:	}
LABELV $343
line 620
;620:	te->r.svFlags |= SVF_BROADCAST;
ADDRLP4 16
ADDRLP4 0
INDIRP4
CNSTI4 424
ADDP4
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
INDIRI4
CNSTI4 32
BORI4
ASGNI4
line 621
;621:}
LABELV $315
endproc Team_TakeFlagSound 20 8
proc Team_CaptureFlagSound 12 8
line 624
;622:
;623:
;624:static void Team_CaptureFlagSound( gentity_t *ent, team_t team ) {
line 627
;625:	gentity_t	*te;
;626:
;627:	if (ent == NULL) {
ADDRFP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $345
line 628
;628:		G_Printf ("Warning:  NULL passed to Team_CaptureFlagSound\n");
ADDRGP4 $347
ARGP4
ADDRGP4 G_Printf
CALLV
pop
line 629
;629:		return;
ADDRGP4 $344
JUMPV
LABELV $345
line 632
;630:	}
;631:
;632:	te = G_TempEntity( ent->s.pos.trBase, EV_GLOBAL_TEAM_SOUND );
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
ARGP4
CNSTI4 47
ARGI4
ADDRLP4 4
ADDRGP4 G_TempEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 633
;633:	if( team == TEAM_BLUE ) {
ADDRFP4 4
INDIRI4
CNSTI4 2
NEI4 $348
line 634
;634:		te->s.eventParm = GTS_BLUE_CAPTURE;
ADDRLP4 0
INDIRP4
CNSTI4 184
ADDP4
CNSTI4 1
ASGNI4
line 635
;635:	}
ADDRGP4 $349
JUMPV
LABELV $348
line 636
;636:	else {
line 637
;637:		te->s.eventParm = GTS_RED_CAPTURE;
ADDRLP4 0
INDIRP4
CNSTI4 184
ADDP4
CNSTI4 0
ASGNI4
line 638
;638:	}
LABELV $349
line 639
;639:	te->r.svFlags |= SVF_BROADCAST;
ADDRLP4 8
ADDRLP4 0
INDIRP4
CNSTI4 424
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 32
BORI4
ASGNI4
line 640
;640:}
LABELV $344
endproc Team_CaptureFlagSound 12 8
export Team_ReturnFlag
proc Team_ReturnFlag 8 12
line 643
;641:
;642:
;643:void Team_ReturnFlag( team_t team ) {
line 644
;644:	Team_ReturnFlagSound(Team_ResetFlag(team), team);
ADDRFP4 0
INDIRI4
ARGI4
ADDRLP4 0
ADDRGP4 Team_ResetFlag
CALLP4
ASGNP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRFP4 0
INDIRI4
ARGI4
ADDRGP4 Team_ReturnFlagSound
CALLV
pop
line 645
;645:	if( team == TEAM_FREE ) {
ADDRFP4 0
INDIRI4
CNSTI4 0
NEI4 $351
line 646
;646:		PrintMsg(NULL, "The flag has returned!\n" );
CNSTP4 0
ARGP4
ADDRGP4 $353
ARGP4
ADDRGP4 PrintMsg
CALLV
pop
line 647
;647:	}
ADDRGP4 $352
JUMPV
LABELV $351
line 648
;648:	else {
line 649
;649:		PrintMsg(NULL, "The %s flag has returned!\n", TeamName(team));
ADDRFP4 0
INDIRI4
ARGI4
ADDRLP4 4
ADDRGP4 TeamName
CALLP4
ASGNP4
CNSTP4 0
ARGP4
ADDRGP4 $354
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRGP4 PrintMsg
CALLV
pop
line 650
;650:	}
LABELV $352
line 651
;651:}
LABELV $350
endproc Team_ReturnFlag 8 12
export Team_FreeEntity
proc Team_FreeEntity 0 4
line 654
;652:
;653:
;654:void Team_FreeEntity( gentity_t *ent ) {
line 655
;655:	if( ent->item->giTag == PW_REDFLAG ) {
ADDRFP4 0
INDIRP4
CNSTI4 804
ADDP4
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 7
NEI4 $356
line 656
;656:		Team_ReturnFlag( TEAM_RED );
CNSTI4 1
ARGI4
ADDRGP4 Team_ReturnFlag
CALLV
pop
line 657
;657:	}
ADDRGP4 $357
JUMPV
LABELV $356
line 658
;658:	else if( ent->item->giTag == PW_BLUEFLAG ) {
ADDRFP4 0
INDIRP4
CNSTI4 804
ADDP4
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 8
NEI4 $358
line 659
;659:		Team_ReturnFlag( TEAM_BLUE );
CNSTI4 2
ARGI4
ADDRGP4 Team_ReturnFlag
CALLV
pop
line 660
;660:	}
ADDRGP4 $359
JUMPV
LABELV $358
line 661
;661:	else if( ent->item->giTag == PW_NEUTRALFLAG ) {
ADDRFP4 0
INDIRP4
CNSTI4 804
ADDP4
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 9
NEI4 $360
line 662
;662:		Team_ReturnFlag( TEAM_FREE );
CNSTI4 0
ARGI4
ADDRGP4 Team_ReturnFlag
CALLV
pop
line 663
;663:	}
LABELV $360
LABELV $359
LABELV $357
line 664
;664:}
LABELV $355
endproc Team_FreeEntity 0 4
export Team_DroppedFlagThink
proc Team_DroppedFlagThink 8 8
line 676
;665:
;666:
;667:/*
;668:==============
;669:Team_DroppedFlagThink
;670:
;671:Automatically set in Launch_Item if the item is one of the flags
;672:
;673:Flags are unique in that if they are dropped, the base flag must be respawned when they time out
;674:==============
;675:*/
;676:void Team_DroppedFlagThink(gentity_t *ent) {
line 677
;677:	int		team = TEAM_FREE;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 679
;678:
;679:	if( ent->item->giTag == PW_REDFLAG ) {
ADDRFP4 0
INDIRP4
CNSTI4 804
ADDP4
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 7
NEI4 $363
line 680
;680:		team = TEAM_RED;
ADDRLP4 0
CNSTI4 1
ASGNI4
line 681
;681:	}
ADDRGP4 $364
JUMPV
LABELV $363
line 682
;682:	else if( ent->item->giTag == PW_BLUEFLAG ) {
ADDRFP4 0
INDIRP4
CNSTI4 804
ADDP4
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 8
NEI4 $365
line 683
;683:		team = TEAM_BLUE;
ADDRLP4 0
CNSTI4 2
ASGNI4
line 684
;684:	}
ADDRGP4 $366
JUMPV
LABELV $365
line 685
;685:	else if( ent->item->giTag == PW_NEUTRALFLAG ) {
ADDRFP4 0
INDIRP4
CNSTI4 804
ADDP4
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 9
NEI4 $367
line 686
;686:		team = TEAM_FREE;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 687
;687:	}
LABELV $367
LABELV $366
LABELV $364
line 689
;688:
;689:	Team_ReturnFlagSound( Team_ResetFlag( team ), team );
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 4
ADDRGP4 Team_ResetFlag
CALLP4
ASGNP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 Team_ReturnFlagSound
CALLV
pop
line 691
;690:	// Reset Flag will delete this entity
;691:}
LABELV $362
endproc Team_DroppedFlagThink 8 8
proc Team_TouchOurFlag 60 16
line 699
;692:
;693:
;694:/*
;695:==============
;696:Team_DroppedFlagThink
;697:==============
;698:*/
;699:static int Team_TouchOurFlag( gentity_t *ent, gentity_t *other, team_t team ) {
line 702
;700:	int			i;
;701:	gentity_t	*player;
;702:	gclient_t	*cl = other->client;
ADDRLP4 8
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
ASGNP4
line 711
;703:	int			enemy_flag;
;704:
;705:#ifdef MISSIONPACK
;706:	if( g_gametype.integer == GT_1FCTF ) {
;707:		enemy_flag = PW_NEUTRALFLAG;
;708:	}
;709:	else {
;710:#endif
;711:	if (cl->sess.sessionTeam == TEAM_RED) {
ADDRLP4 8
INDIRP4
CNSTI4 624
ADDP4
INDIRI4
CNSTI4 1
NEI4 $370
line 712
;712:		enemy_flag = PW_BLUEFLAG;
ADDRLP4 12
CNSTI4 8
ASGNI4
line 713
;713:	} else {
ADDRGP4 $371
JUMPV
LABELV $370
line 714
;714:		enemy_flag = PW_REDFLAG;
ADDRLP4 12
CNSTI4 7
ASGNI4
line 715
;715:	}
LABELV $371
line 717
;716:
;717:	if ( ent->flags & FL_DROPPED_ITEM ) {
ADDRFP4 0
INDIRP4
CNSTI4 536
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
EQI4 $372
line 719
;718:		// hey, its not home.  return it by teleporting it back
;719:		PrintMsg( NULL, "%s" S_COLOR_WHITE " returned the %s flag!\n", 
ADDRFP4 8
INDIRI4
ARGI4
ADDRLP4 16
ADDRGP4 TeamName
CALLP4
ASGNP4
CNSTP4 0
ARGP4
ADDRGP4 $374
ARGP4
ADDRLP4 8
INDIRP4
CNSTI4 508
ADDP4
ARGP4
ADDRLP4 16
INDIRP4
ARGP4
ADDRGP4 PrintMsg
CALLV
pop
line 721
;720:			cl->pers.netname, TeamName(team));
;721:		AddScore(other, ent->r.currentOrigin, CTF_RECOVERY_BONUS);
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 488
ADDP4
ARGP4
CNSTI4 1
ARGI4
ADDRGP4 AddScore
CALLV
pop
line 722
;722:		other->client->pers.teamState.flagrecovery++;
ADDRLP4 20
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 572
ADDP4
ASGNP4
ADDRLP4 20
INDIRP4
ADDRLP4 20
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 723
;723:		other->client->pers.teamState.lastreturnedflag = level.time;
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 588
ADDP4
ADDRGP4 level+32
INDIRI4
CVIF4 4
ASGNF4
line 725
;724:		//ResetFlag will remove this entity!  We must return zero
;725:		Team_ReturnFlagSound(Team_ResetFlag(team), team);
ADDRFP4 8
INDIRI4
ARGI4
ADDRLP4 24
ADDRGP4 Team_ResetFlag
CALLP4
ASGNP4
ADDRLP4 24
INDIRP4
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
ADDRGP4 Team_ReturnFlagSound
CALLV
pop
line 726
;726:		return 0;
CNSTI4 0
RETI4
ADDRGP4 $369
JUMPV
LABELV $372
line 734
;727:	}
;728:#ifdef MISSIONPACK
;729:	}
;730:#endif
;731:
;732:	// the flag is at home base.  if the player has the enemy
;733:	// flag, he's just won!
;734:	if (!cl->ps.powerups[enemy_flag])
ADDRLP4 12
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 8
INDIRP4
CNSTI4 312
ADDP4
ADDP4
INDIRI4
CNSTI4 0
NEI4 $376
line 735
;735:		return 0; // We don't have the flag
CNSTI4 0
RETI4
ADDRGP4 $369
JUMPV
LABELV $376
line 742
;736:#ifdef MISSIONPACK
;737:	if( g_gametype.integer == GT_1FCTF ) {
;738:		PrintMsg( NULL, "%s" S_COLOR_WHITE " captured the flag!\n", cl->pers.netname );
;739:	}
;740:	else {
;741:#endif
;742:	PrintMsg( NULL, "%s" S_COLOR_WHITE " captured the %s flag!\n", cl->pers.netname, TeamName(OtherTeam(team)));
ADDRFP4 8
INDIRI4
ARGI4
ADDRLP4 16
ADDRGP4 OtherTeam
CALLI4
ASGNI4
ADDRLP4 16
INDIRI4
ARGI4
ADDRLP4 20
ADDRGP4 TeamName
CALLP4
ASGNP4
CNSTP4 0
ARGP4
ADDRGP4 $378
ARGP4
ADDRLP4 8
INDIRP4
CNSTI4 508
ADDP4
ARGP4
ADDRLP4 20
INDIRP4
ARGP4
ADDRGP4 PrintMsg
CALLV
pop
line 748
;743:#ifdef MISSIONPACK
;744:	}
;745:#endif
;746:
;747://qlone - freezetag
;748:	if ( g_freezeTag.integer && g_gametype.integer == GT_CTF ) team_wins( team );
ADDRGP4 g_freezeTag+12
INDIRI4
CNSTI4 0
EQI4 $379
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 4
NEI4 $379
ADDRFP4 8
INDIRI4
ARGI4
ADDRGP4 team_wins
CALLV
pop
LABELV $379
line 751
;749://qlone - freezetag
;750:
;751:	cl->ps.powerups[enemy_flag] = 0;
ADDRLP4 12
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 8
INDIRP4
CNSTI4 312
ADDP4
ADDP4
CNSTI4 0
ASGNI4
line 753
;752:
;753:	teamgame.last_flag_capture = level.time;
ADDRGP4 teamgame
ADDRGP4 level+32
INDIRI4
CVIF4 4
ASGNF4
line 754
;754:	teamgame.last_capture_team = team;
ADDRGP4 teamgame+4
ADDRFP4 8
INDIRI4
ASGNI4
line 757
;755:
;756:	// Increase the team's score
;757:	AddTeamScore(ent->s.pos.trBase, other->client->sess.sessionTeam, 1);
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
ARGP4
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 624
ADDP4
INDIRI4
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 AddTeamScore
CALLV
pop
line 758
;758:	Team_ForceGesture(other->client->sess.sessionTeam);
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 624
ADDP4
INDIRI4
ARGI4
ADDRGP4 Team_ForceGesture
CALLV
pop
line 760
;759:
;760:	other->client->pers.teamState.captures++;
ADDRLP4 24
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 560
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 762
;761:	// add the sprite over the player's head
;762:	other->client->ps.eFlags &= ~(EF_AWARD_IMPRESSIVE | EF_AWARD_EXCELLENT | EF_AWARD_GAUNTLET | EF_AWARD_ASSIST | EF_AWARD_DEFEND | EF_AWARD_CAP );
ADDRLP4 28
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 104
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRI4
CNSTI4 -231497
BANDI4
ASGNI4
line 763
;763:	other->client->ps.eFlags |= EF_AWARD_CAP;
ADDRLP4 32
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 104
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 32
INDIRP4
INDIRI4
CNSTI4 2048
BORI4
ASGNI4
line 764
;764:	other->client->rewardTime = level.time + REWARD_SPRITE_TIME;
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 752
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 2000
ADDI4
ASGNI4
line 765
;765:	other->client->ps.persistant[PERS_CAPTURES]++;
ADDRLP4 36
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 304
ADDP4
ASGNP4
ADDRLP4 36
INDIRP4
ADDRLP4 36
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 768
;766:
;767:	// other gets another 10 frag bonus
;768:	AddScore(other, ent->r.currentOrigin, CTF_CAPTURE_BONUS);
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 488
ADDP4
ARGP4
CNSTI4 5
ARGI4
ADDRGP4 AddScore
CALLV
pop
line 770
;769:
;770:	Team_CaptureFlagSound( ent, team );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
ADDRGP4 Team_CaptureFlagSound
CALLV
pop
line 773
;771:
;772:	// Ok, let's do the player loop, hand out the bonuses
;773:	for (i = 0; i < level.maxclients; i++) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $389
JUMPV
LABELV $386
line 774
;774:		player = &g_entities[i];
ADDRLP4 0
ADDRLP4 4
INDIRI4
CNSTI4 824
MULI4
ADDRGP4 g_entities
ADDP4
ASGNP4
line 775
;775:		if (!player->inuse || player == other)
ADDRLP4 0
INDIRP4
CNSTI4 520
ADDP4
INDIRI4
CNSTI4 0
EQI4 $393
ADDRLP4 0
INDIRP4
CVPU4 4
ADDRFP4 4
INDIRP4
CVPU4 4
NEU4 $391
LABELV $393
line 776
;776:			continue;
ADDRGP4 $387
JUMPV
LABELV $391
line 778
;777:
;778:		if (player->client->sess.sessionTeam !=
ADDRLP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 624
ADDP4
INDIRI4
ADDRLP4 8
INDIRP4
CNSTI4 624
ADDP4
INDIRI4
EQI4 $394
line 779
;779:			cl->sess.sessionTeam) {
line 780
;780:			player->client->pers.teamState.lasthurtcarrier = -5;
ADDRLP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 584
ADDP4
CNSTF4 3231711232
ASGNF4
line 781
;781:		} else {
ADDRGP4 $395
JUMPV
LABELV $394
line 786
;782:#ifdef MISSIONPACK
;783:				AddScore(player, ent->r.currentOrigin, CTF_TEAM_BONUS);
;784:#endif
;785:			// award extra points for capture assists
;786:			if (player->client->pers.teamState.lastreturnedflag + 
ADDRLP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 588
ADDP4
INDIRF4
CNSTF4 1176256512
ADDF4
ADDRGP4 level+32
INDIRI4
CVIF4 4
LEF4 $396
line 787
;787:				CTF_RETURN_FLAG_ASSIST_TIMEOUT > level.time) {
line 788
;788:				AddScore (player, ent->r.currentOrigin, CTF_RETURN_FLAG_ASSIST_BONUS);
ADDRLP4 0
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 488
ADDP4
ARGP4
CNSTI4 1
ARGI4
ADDRGP4 AddScore
CALLV
pop
line 789
;789:				other->client->pers.teamState.assists++;
ADDRLP4 44
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 580
ADDP4
ASGNP4
ADDRLP4 44
INDIRP4
ADDRLP4 44
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 791
;790:
;791:				player->client->ps.persistant[PERS_ASSIST_COUNT]++;
ADDRLP4 48
ADDRLP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 296
ADDP4
ASGNP4
ADDRLP4 48
INDIRP4
ADDRLP4 48
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 793
;792:				// add the sprite over the player's head
;793:				player->client->ps.eFlags &= ~(EF_AWARD_IMPRESSIVE | EF_AWARD_EXCELLENT | EF_AWARD_GAUNTLET | EF_AWARD_ASSIST | EF_AWARD_DEFEND | EF_AWARD_CAP );
ADDRLP4 52
ADDRLP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 104
ADDP4
ASGNP4
ADDRLP4 52
INDIRP4
ADDRLP4 52
INDIRP4
INDIRI4
CNSTI4 -231497
BANDI4
ASGNI4
line 794
;794:				player->client->ps.eFlags |= EF_AWARD_ASSIST;
ADDRLP4 56
ADDRLP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 104
ADDP4
ASGNP4
ADDRLP4 56
INDIRP4
ADDRLP4 56
INDIRP4
INDIRI4
CNSTI4 131072
BORI4
ASGNI4
line 795
;795:				player->client->rewardTime = level.time + REWARD_SPRITE_TIME;
ADDRLP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 752
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 2000
ADDI4
ASGNI4
line 797
;796:
;797:			} 
LABELV $396
line 798
;798:			if (player->client->pers.teamState.lastfraggedcarrier + 
ADDRLP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 596
ADDP4
INDIRF4
CNSTF4 1176256512
ADDF4
ADDRGP4 level+32
INDIRI4
CVIF4 4
LEF4 $400
line 799
;799:				CTF_FRAG_CARRIER_ASSIST_TIMEOUT > level.time) {
line 800
;800:				AddScore(player, ent->r.currentOrigin, CTF_FRAG_CARRIER_ASSIST_BONUS);
ADDRLP4 0
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 488
ADDP4
ARGP4
CNSTI4 2
ARGI4
ADDRGP4 AddScore
CALLV
pop
line 801
;801:				other->client->pers.teamState.assists++;
ADDRLP4 44
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 580
ADDP4
ASGNP4
ADDRLP4 44
INDIRP4
ADDRLP4 44
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 802
;802:				player->client->ps.persistant[PERS_ASSIST_COUNT]++;
ADDRLP4 48
ADDRLP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 296
ADDP4
ASGNP4
ADDRLP4 48
INDIRP4
ADDRLP4 48
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 804
;803:				// add the sprite over the player's head
;804:				player->client->ps.eFlags &= ~(EF_AWARD_IMPRESSIVE | EF_AWARD_EXCELLENT | EF_AWARD_GAUNTLET | EF_AWARD_ASSIST | EF_AWARD_DEFEND | EF_AWARD_CAP );
ADDRLP4 52
ADDRLP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 104
ADDP4
ASGNP4
ADDRLP4 52
INDIRP4
ADDRLP4 52
INDIRP4
INDIRI4
CNSTI4 -231497
BANDI4
ASGNI4
line 805
;805:				player->client->ps.eFlags |= EF_AWARD_ASSIST;
ADDRLP4 56
ADDRLP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 104
ADDP4
ASGNP4
ADDRLP4 56
INDIRP4
ADDRLP4 56
INDIRP4
INDIRI4
CNSTI4 131072
BORI4
ASGNI4
line 806
;806:				player->client->rewardTime = level.time + REWARD_SPRITE_TIME;
ADDRLP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 752
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 2000
ADDI4
ASGNI4
line 807
;807:			}
LABELV $400
line 808
;808:		}
LABELV $395
line 809
;809:	}
LABELV $387
line 773
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $389
ADDRLP4 4
INDIRI4
ADDRGP4 level+24
INDIRI4
LTI4 $386
line 810
;810:	Team_ResetFlags();
ADDRGP4 Team_ResetFlags
CALLV
pop
line 812
;811:
;812:	CalculateRanks();
ADDRGP4 CalculateRanks
CALLV
pop
line 814
;813:
;814:	return 0; // Do not respawn this automatically
CNSTI4 0
RETI4
LABELV $369
endproc Team_TouchOurFlag 60 16
proc Team_TouchEnemyFlag 8 16
line 818
;815:}
;816:
;817:
;818:static int Team_TouchEnemyFlag( gentity_t *ent, gentity_t *other, team_t team ) {
line 819
;819:	gclient_t *cl = other->client;
ADDRLP4 0
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
ASGNP4
line 836
;820:
;821:#ifdef MISSIONPACK
;822:	if( g_gametype.integer == GT_1FCTF ) {
;823:		PrintMsg (NULL, "%s" S_COLOR_WHITE " got the flag!\n", other->client->pers.netname );
;824:
;825:		cl->ps.powerups[PW_NEUTRALFLAG] = INT_MAX; // flags never expire
;826:
;827:		if( team == TEAM_RED ) {
;828:			Team_SetFlagStatus( TEAM_FREE, FLAG_TAKEN_RED );
;829:		}
;830:		else {
;831:			Team_SetFlagStatus( TEAM_FREE, FLAG_TAKEN_BLUE );
;832:		}
;833:	}
;834:	else{
;835:#endif
;836:		PrintMsg (NULL, "%s" S_COLOR_WHITE " got the %s flag!\n",
ADDRFP4 8
INDIRI4
ARGI4
ADDRLP4 4
ADDRGP4 TeamName
CALLP4
ASGNP4
CNSTP4 0
ARGP4
ADDRGP4 $405
ARGP4
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 508
ADDP4
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRGP4 PrintMsg
CALLV
pop
line 839
;837:			other->client->pers.netname, TeamName(team));
;838:
;839:		if (team == TEAM_RED)
ADDRFP4 8
INDIRI4
CNSTI4 1
NEI4 $406
line 840
;840:			cl->ps.powerups[PW_REDFLAG] = INT_MAX; // flags never expire
ADDRLP4 0
INDIRP4
CNSTI4 340
ADDP4
CNSTI4 2147483647
ASGNI4
ADDRGP4 $407
JUMPV
LABELV $406
line 842
;841:		else
;842:			cl->ps.powerups[PW_BLUEFLAG] = INT_MAX; // flags never expire
ADDRLP4 0
INDIRP4
CNSTI4 344
ADDP4
CNSTI4 2147483647
ASGNI4
LABELV $407
line 844
;843:
;844:		Team_SetFlagStatus( team, FLAG_TAKEN );
ADDRFP4 8
INDIRI4
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 Team_SetFlagStatus
CALLV
pop
line 850
;845:#ifdef MISSIONPACK
;846:	}
;847:
;848:	AddScore(other, ent->r.currentOrigin, CTF_FLAG_BONUS);
;849:#endif
;850:	cl->pers.teamState.flagsince = level.time;
ADDRLP4 0
INDIRP4
CNSTI4 592
ADDP4
ADDRGP4 level+32
INDIRI4
CVIF4 4
ASGNF4
line 851
;851:	Team_TakeFlagSound( ent, team );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
ADDRGP4 Team_TakeFlagSound
CALLV
pop
line 853
;852:
;853:	return -1; // Do not respawn this automatically, but do delete it if it was FL_DROPPED
CNSTI4 -1
RETI4
LABELV $404
endproc Team_TouchEnemyFlag 8 16
export Pickup_Team
proc Pickup_Team 20 12
line 857
;854:}
;855:
;856:
;857:int Pickup_Team( gentity_t *ent, gentity_t *other ) {
line 859
;858:	int team;
;859:	gclient_t *cl = other->client;
ADDRLP4 4
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
ASGNP4
line 878
;860:
;861:#ifdef MISSIONPACK
;862:	if( g_gametype.integer == GT_OBELISK ) {
;863:		// there are no team items that can be picked up in obelisk
;864:		G_FreeEntity( ent );
;865:		return 0;
;866:	}
;867:
;868:	if( g_gametype.integer == GT_HARVESTER ) {
;869:		// the only team items that can be picked up in harvester are the cubes
;870:		if( ent->spawnflags != cl->sess.sessionTeam ) {
;871:			cl->ps.generic1 += 1;
;872:		}
;873:		G_FreeEntity( ent );
;874:		return 0;
;875:	}
;876:#endif
;877:	// figure out what team this flag is
;878:	if( strcmp(ent->classname, "team_CTF_redflag") == 0 ) {
ADDRFP4 0
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
ARGP4
ADDRGP4 $243
ARGP4
ADDRLP4 8
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 0
NEI4 $410
line 879
;879:		team = TEAM_RED;
ADDRLP4 0
CNSTI4 1
ASGNI4
line 880
;880:	}
ADDRGP4 $411
JUMPV
LABELV $410
line 881
;881:	else if( strcmp(ent->classname, "team_CTF_blueflag") == 0 ) {
ADDRFP4 0
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
ARGP4
ADDRGP4 $245
ARGP4
ADDRLP4 12
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 0
NEI4 $412
line 882
;882:		team = TEAM_BLUE;
ADDRLP4 0
CNSTI4 2
ASGNI4
line 883
;883:	}
ADDRGP4 $413
JUMPV
LABELV $412
line 889
;884:#ifdef MISSIONPACK
;885:	else if( strcmp(ent->classname, "team_CTF_neutralflag") == 0  ) {
;886:		team = TEAM_FREE;
;887:	}
;888:#endif
;889:	else {
line 890
;890:		PrintMsg ( other, "Don't know what team the flag is on.\n");
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 $414
ARGP4
ADDRGP4 PrintMsg
CALLV
pop
line 891
;891:		return 0;
CNSTI4 0
RETI4
ADDRGP4 $409
JUMPV
LABELV $413
LABELV $411
line 905
;892:	}
;893:#ifdef MISSIONPACK
;894:	if( g_gametype.integer == GT_1FCTF ) {
;895:		if( team == TEAM_FREE ) {
;896:			return Team_TouchEnemyFlag( ent, other, cl->sess.sessionTeam );
;897:		}
;898:		if( team != cl->sess.sessionTeam) {
;899:			return Team_TouchOurFlag( ent, other, cl->sess.sessionTeam );
;900:		}
;901:		return 0;
;902:	}
;903:#endif
;904:	// GT_CTF
;905:	if( team == cl->sess.sessionTeam) {
ADDRLP4 0
INDIRI4
ADDRLP4 4
INDIRP4
CNSTI4 624
ADDP4
INDIRI4
NEI4 $415
line 906
;906:		return Team_TouchOurFlag( ent, other, team );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 16
ADDRGP4 Team_TouchOurFlag
CALLI4
ASGNI4
ADDRLP4 16
INDIRI4
RETI4
ADDRGP4 $409
JUMPV
LABELV $415
line 908
;907:	}
;908:	return Team_TouchEnemyFlag( ent, other, team );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 16
ADDRGP4 Team_TouchEnemyFlag
CALLI4
ASGNI4
ADDRLP4 16
INDIRI4
RETI4
LABELV $409
endproc Pickup_Team 20 12
export Team_GetLocation
proc Team_GetLocation 48 8
line 920
;909:}
;910:
;911:
;912:/*
;913:===========
;914:Team_GetLocation
;915:
;916:Report a location for the player. Uses placed nearby target_location entities
;917:============
;918:*/
;919:gentity_t *Team_GetLocation(gentity_t *ent)
;920:{
line 925
;921:	gentity_t		*eloc, *best;
;922:	float			bestlen, len;
;923:	vec3_t			origin;
;924:
;925:	best = NULL;
ADDRLP4 24
CNSTP4 0
ASGNP4
line 926
;926:	bestlen = 3*8192.0*8192.0;
ADDRLP4 20
CNSTF4 1296039936
ASGNF4
line 929
;927:
;928://qlone - freezetag
;929:	if ( g_freezeTag.integer && ent->freezeState && is_body( ent->target_ent ) )
ADDRGP4 g_freezeTag+12
INDIRI4
CNSTI4 0
EQI4 $418
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
CNSTI4 808
ADDP4
INDIRI4
CNSTI4 0
EQI4 $418
ADDRLP4 28
INDIRP4
CNSTI4 668
ADDP4
INDIRP4
ARGP4
ADDRLP4 32
ADDRGP4 is_body
CALLI4
ASGNI4
ADDRLP4 32
INDIRI4
CNSTI4 0
EQI4 $418
line 930
;930:		VectorCopy( ent->target_ent->r.currentOrigin, origin );
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 668
ADDP4
INDIRP4
CNSTI4 488
ADDP4
INDIRB
ASGNB 12
ADDRGP4 $419
JUMPV
LABELV $418
line 933
;931:	else
;932://qlone - freezetag
;933:	VectorCopy( ent->r.currentOrigin, origin );
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 488
ADDP4
INDIRB
ASGNB 12
LABELV $419
line 935
;934:
;935:	for (eloc = level.locationHead; eloc; eloc = eloc->nextTrain) {
ADDRLP4 0
ADDRGP4 level+7648
INDIRP4
ASGNP4
ADDRGP4 $424
JUMPV
LABELV $421
line 936
;936:		len = ( origin[0] - eloc->r.currentOrigin[0] ) * ( origin[0] - eloc->r.currentOrigin[0] )
ADDRLP4 36
ADDRLP4 4
INDIRF4
ASGNF4
ADDRLP4 16
ADDRLP4 36
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 488
ADDP4
INDIRF4
SUBF4
ADDRLP4 36
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 488
ADDP4
INDIRF4
SUBF4
MULF4
ADDRLP4 4+4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 492
ADDP4
INDIRF4
SUBF4
ADDRLP4 4+4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 492
ADDP4
INDIRF4
SUBF4
MULF4
ADDF4
ADDRLP4 4+8
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 496
ADDP4
INDIRF4
SUBF4
ADDRLP4 4+8
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 496
ADDP4
INDIRF4
SUBF4
MULF4
ADDF4
ASGNF4
line 940
;937:			+ ( origin[1] - eloc->r.currentOrigin[1] ) * ( origin[1] - eloc->r.currentOrigin[1] )
;938:			+ ( origin[2] - eloc->r.currentOrigin[2] ) * ( origin[2] - eloc->r.currentOrigin[2] );
;939:
;940:		if ( len > bestlen ) {
ADDRLP4 16
INDIRF4
ADDRLP4 20
INDIRF4
LEF4 $430
line 941
;941:			continue;
ADDRGP4 $422
JUMPV
LABELV $430
line 944
;942:		}
;943:
;944:		if ( !trap_InPVS( origin, eloc->r.currentOrigin ) ) {
ADDRLP4 4
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 488
ADDP4
ARGP4
ADDRLP4 44
ADDRGP4 trap_InPVS
CALLI4
ASGNI4
ADDRLP4 44
INDIRI4
CNSTI4 0
NEI4 $432
line 945
;945:			continue;
ADDRGP4 $422
JUMPV
LABELV $432
line 948
;946:		}
;947:
;948:		bestlen = len;
ADDRLP4 20
ADDRLP4 16
INDIRF4
ASGNF4
line 949
;949:		best = eloc;
ADDRLP4 24
ADDRLP4 0
INDIRP4
ASGNP4
line 950
;950:	}
LABELV $422
line 935
ADDRLP4 0
ADDRLP4 0
INDIRP4
CNSTI4 604
ADDP4
INDIRP4
ASGNP4
LABELV $424
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $421
line 952
;951:
;952:	return best;
ADDRLP4 24
INDIRP4
RETP4
LABELV $417
endproc Team_GetLocation 48 8
export Team_GetLocationMsg
proc Team_GetLocationMsg 12 24
line 964
;953:}
;954:
;955:
;956:/*
;957:===========
;958:Team_GetLocation
;959:
;960:Report a location for the player. Uses placed nearby target_location entities
;961:============
;962:*/
;963:qboolean Team_GetLocationMsg(gentity_t *ent, char *loc, int loclen)
;964:{
line 967
;965:	gentity_t *best;
;966:
;967:	best = Team_GetLocation( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 4
ADDRGP4 Team_GetLocation
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 969
;968:	
;969:	if (!best)
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $435
line 970
;970:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $434
JUMPV
LABELV $435
line 972
;971:
;972:	if (best->count) {
ADDRLP4 0
INDIRP4
CNSTI4 760
ADDP4
INDIRI4
CNSTI4 0
EQI4 $437
line 973
;973:		if (best->count < 0)
ADDRLP4 0
INDIRP4
CNSTI4 760
ADDP4
INDIRI4
CNSTI4 0
GEI4 $439
line 974
;974:			best->count = 0;
ADDRLP4 0
INDIRP4
CNSTI4 760
ADDP4
CNSTI4 0
ASGNI4
LABELV $439
line 975
;975:		if (best->count > 7)
ADDRLP4 0
INDIRP4
CNSTI4 760
ADDP4
INDIRI4
CNSTI4 7
LEI4 $441
line 976
;976:			best->count = 7;
ADDRLP4 0
INDIRP4
CNSTI4 760
ADDP4
CNSTI4 7
ASGNI4
LABELV $441
line 977
;977:		Com_sprintf(loc, loclen, "%c%c%s" S_COLOR_WHITE, Q_COLOR_ESCAPE, best->count + '0', best->message );
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
ADDRGP4 $443
ARGP4
CNSTI4 94
ARGI4
ADDRLP4 0
INDIRP4
CNSTI4 760
ADDP4
INDIRI4
CNSTI4 48
ADDI4
ARGI4
ADDRLP4 0
INDIRP4
CNSTI4 636
ADDP4
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLI4
pop
line 978
;978:	} else
ADDRGP4 $438
JUMPV
LABELV $437
line 979
;979:		Com_sprintf(loc, loclen, "%s", best->message);
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
ADDRGP4 $444
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 636
ADDP4
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLI4
pop
LABELV $438
line 981
;980:
;981:	return qtrue;
CNSTI4 1
RETI4
LABELV $434
endproc Team_GetLocationMsg 12 24
export SelectRandomTeamSpawnPoint
proc SelectRandomTeamSpawnPoint 168 4
line 995
;982:}
;983:
;984:
;985:/*---------------------------------------------------------------------------*/
;986:
;987:/*
;988:================
;989:SelectRandomTeamSpawnPoint
;990:
;991:go to a random point that doesn't telefrag
;992:================
;993:*/
;994:#define	MAX_TEAM_SPAWN_POINTS	32
;995:gentity_t *SelectRandomTeamSpawnPoint( gentity_t *ent, int teamstate, team_t team ) {
line 1005
;996:	gentity_t	*spot;
;997:	int			selection;
;998:	gentity_t	*spots[ MAX_TEAM_SPAWN_POINTS ];
;999:	int			numSpots;
;1000:	int			checkMask;
;1001:	int			n;
;1002:	qboolean	checkState;
;1003:	qboolean	checkTelefrag;
;1004:
;1005:	if ( team != TEAM_RED && team != TEAM_BLUE )
ADDRLP4 156
ADDRFP4 8
INDIRI4
ASGNI4
ADDRLP4 156
INDIRI4
CNSTI4 1
EQI4 $446
ADDRLP4 156
INDIRI4
CNSTI4 2
EQI4 $446
line 1006
;1006:		return NULL;
CNSTP4 0
RETP4
ADDRGP4 $445
JUMPV
LABELV $446
line 1008
;1007:
;1008:	checkMask = 3;
ADDRLP4 148
CNSTI4 3
ASGNI4
LABELV $448
line 1012
;1009:
;1010:__rescan:
;1011:
;1012:	checkTelefrag = checkMask & 1;
ADDRLP4 144
ADDRLP4 148
INDIRI4
CNSTI4 1
BANDI4
ASGNI4
line 1013
;1013:	checkState = checkMask & 2;
ADDRLP4 140
ADDRLP4 148
INDIRI4
CNSTI4 2
BANDI4
ASGNI4
line 1014
;1014:	numSpots = 0;
ADDRLP4 8
CNSTI4 0
ASGNI4
line 1016
;1015:
;1016:	for ( n = 0 ; n < level.numSpawnSpots ; n++ ) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $452
JUMPV
LABELV $449
line 1017
;1017:		spot = level.spawnSpots[ n ];
ADDRLP4 0
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 level+7688
ADDP4
INDIRP4
ASGNP4
line 1018
;1018:		if ( spot->fteam != team )
ADDRLP4 0
INDIRP4
CNSTI4 816
ADDP4
INDIRI4
ADDRFP4 8
INDIRI4
EQI4 $455
line 1019
;1019:			continue;
ADDRGP4 $450
JUMPV
LABELV $455
line 1020
;1020:		if ( checkTelefrag && SpotWouldTelefrag( spot ) )
ADDRLP4 144
INDIRI4
CNSTI4 0
EQI4 $457
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 160
ADDRGP4 SpotWouldTelefrag
CALLI4
ASGNI4
ADDRLP4 160
INDIRI4
CNSTI4 0
EQI4 $457
line 1021
;1021:			continue;
ADDRGP4 $450
JUMPV
LABELV $457
line 1022
;1022:		if ( checkState ) {
ADDRLP4 140
INDIRI4
CNSTI4 0
EQI4 $459
line 1023
;1023:			if ( teamstate == TEAM_BEGIN ) {
ADDRFP4 4
INDIRI4
CNSTI4 0
NEI4 $461
line 1024
;1024:				if ( spot->count != 0 )
ADDRLP4 0
INDIRP4
CNSTI4 760
ADDP4
INDIRI4
CNSTI4 0
EQI4 $462
line 1025
;1025:					continue;
ADDRGP4 $450
JUMPV
line 1026
;1026:			} else {
LABELV $461
line 1027
;1027:				if ( spot->count == 0 )
ADDRLP4 0
INDIRP4
CNSTI4 760
ADDP4
INDIRI4
CNSTI4 0
NEI4 $465
line 1028
;1028:					continue;
ADDRGP4 $450
JUMPV
LABELV $465
line 1029
;1029:			}
LABELV $462
line 1030
;1030:		}
LABELV $459
line 1031
;1031:		spots[ numSpots++ ] = spot;
ADDRLP4 164
ADDRLP4 8
INDIRI4
ASGNI4
ADDRLP4 8
ADDRLP4 164
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 164
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 12
ADDP4
ADDRLP4 0
INDIRP4
ASGNP4
line 1032
;1032:		if ( numSpots >= MAX_TEAM_SPAWN_POINTS )
ADDRLP4 8
INDIRI4
CNSTI4 32
LTI4 $467
line 1033
;1033:			break;
ADDRGP4 $451
JUMPV
LABELV $467
line 1034
;1034:	}
LABELV $450
line 1016
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $452
ADDRLP4 4
INDIRI4
ADDRGP4 level+11784
INDIRI4
LTI4 $449
LABELV $451
line 1036
;1035:
;1036:	if ( !numSpots ) {
ADDRLP4 8
INDIRI4
CNSTI4 0
NEI4 $469
line 1037
;1037:		if ( checkMask <= 0 ) {
ADDRLP4 148
INDIRI4
CNSTI4 0
GTI4 $471
line 1038
;1038:			return NULL;
CNSTP4 0
RETP4
ADDRGP4 $445
JUMPV
LABELV $471
line 1040
;1039:		}
;1040:		checkMask--;
ADDRLP4 148
ADDRLP4 148
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 1041
;1041:		goto __rescan; // next attempt with different flags
ADDRGP4 $448
JUMPV
LABELV $469
line 1044
;1042:	}
;1043:
;1044:	selection = rand() % numSpots;
ADDRLP4 160
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 152
ADDRLP4 160
INDIRI4
ADDRLP4 8
INDIRI4
MODI4
ASGNI4
line 1045
;1045:	return spots[ selection ];
ADDRLP4 152
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 12
ADDP4
INDIRP4
RETP4
LABELV $445
endproc SelectRandomTeamSpawnPoint 168 4
export SelectCTFSpawnPoint
proc SelectCTFSpawnPoint 12 16
line 1054
;1046:}
;1047:
;1048:
;1049:/*
;1050:===========
;1051:SelectCTFSpawnPoint
;1052:============
;1053:*/
;1054:gentity_t *SelectCTFSpawnPoint( gentity_t *ent, team_t team, int teamstate, vec3_t origin, vec3_t angles ) {
line 1057
;1055:	gentity_t	*spot;
;1056:
;1057:	spot = SelectRandomTeamSpawnPoint( ent, teamstate, team );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
ADDRFP4 4
INDIRI4
ARGI4
ADDRLP4 4
ADDRGP4 SelectRandomTeamSpawnPoint
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 1059
;1058:
;1059:	if ( !spot ) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $474
line 1060
;1060:		return SelectSpawnPoint( ent, vec3_origin, origin, angles );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 vec3_origin
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRLP4 8
ADDRGP4 SelectSpawnPoint
CALLP4
ASGNP4
ADDRLP4 8
INDIRP4
RETP4
ADDRGP4 $473
JUMPV
LABELV $474
line 1063
;1061:	}
;1062:
;1063:	VectorCopy( spot->s.origin, origin );
ADDRFP4 12
INDIRP4
ADDRLP4 0
INDIRP4
CNSTI4 92
ADDP4
INDIRB
ASGNB 12
line 1064
;1064:	VectorCopy( spot->s.angles, angles );
ADDRFP4 16
INDIRP4
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRB
ASGNB 12
line 1065
;1065:	origin[2] += 9.0f;
ADDRLP4 8
ADDRFP4 12
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRF4
CNSTF4 1091567616
ADDF4
ASGNF4
line 1067
;1066:
;1067:	return spot;
ADDRLP4 0
INDIRP4
RETP4
LABELV $473
endproc SelectCTFSpawnPoint 12 16
proc SortClients 0 0
line 1072
;1068:}
;1069:
;1070:/*---------------------------------------------------------------------------*/
;1071:
;1072:static int QDECL SortClients( const void *a, const void *b ) {
line 1073
;1073:	return *(int *)a - *(int *)b;
ADDRFP4 0
INDIRP4
INDIRI4
ADDRFP4 4
INDIRP4
INDIRI4
SUBI4
RETI4
LABELV $476
endproc SortClients 0 0
export TeamplayInfoMessage
proc TeamplayInfoMessage 1316 32
line 1086
;1074:}
;1075:
;1076:
;1077:/*
;1078:==================
;1079:TeamplayLocationsMessage
;1080:
;1081:Format:
;1082:	clientNum location health armor weapon powerups
;1083:
;1084:==================
;1085:*/
;1086:void TeamplayInfoMessage( gentity_t *ent ) {
line 1096
;1087:	char		entry[ 128 ]; // to fit 6 decimal numbers with spaces
;1088:	char		string[ MAX_STRING_CHARS - 9 ]; // -strlen("tinfo nn ")
;1089:	int			stringlength;
;1090:	int			i, j;
;1091:	gentity_t	*player;
;1092:	int			cnt;
;1093:	int			h, a;
;1094:	int			clients[TEAM_MAXOVERLAY];
;1095:
;1096:	if ( !ent->client->pers.teamInfo )
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 608
ADDP4
INDIRI4
CNSTI4 0
NEI4 $478
line 1097
;1097:		return;
ADDRGP4 $477
JUMPV
LABELV $478
line 1102
;1098:
;1099:	// figure out what client should be on the display
;1100:	// we are limited to 8, but we want to use the top eight players
;1101:	// but in client order (so they don't keep changing position on the overlay)
;1102:	for (i = 0, cnt = 0; i < level.maxclients && cnt < TEAM_MAXOVERLAY; i++) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRLP4 8
CNSTI4 0
ASGNI4
ADDRGP4 $483
JUMPV
LABELV $480
line 1103
;1103:		player = g_entities + level.sortedClients[i];
ADDRLP4 0
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 level+88
ADDP4
INDIRI4
CNSTI4 824
MULI4
ADDRGP4 g_entities
ADDP4
ASGNP4
line 1104
;1104:		if (player->inuse && player->client->sess.sessionTeam ==
ADDRLP4 0
INDIRP4
CNSTI4 520
ADDP4
INDIRI4
CNSTI4 0
EQI4 $486
ADDRLP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 624
ADDP4
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 624
ADDP4
INDIRI4
NEI4 $486
line 1105
;1105:			ent->client->sess.sessionTeam ) {
line 1106
;1106:			clients[cnt++] = level.sortedClients[i];
ADDRLP4 1304
ADDRLP4 8
INDIRI4
ASGNI4
ADDRLP4 8
ADDRLP4 1304
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 1304
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 1172
ADDP4
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 level+88
ADDP4
INDIRI4
ASGNI4
line 1107
;1107:		}
LABELV $486
line 1108
;1108:	}
LABELV $481
line 1102
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $483
ADDRLP4 4
INDIRI4
ADDRGP4 level+24
INDIRI4
GEI4 $489
ADDRLP4 8
INDIRI4
CNSTI4 32
LTI4 $480
LABELV $489
line 1111
;1109:
;1110:	// We have the top eight players, sort them by clientNum
;1111:	qsort( clients, cnt, sizeof( clients[0] ), SortClients );
ADDRLP4 1172
ARGP4
ADDRLP4 8
INDIRI4
ARGI4
CNSTI4 4
ARGI4
ADDRGP4 SortClients
ARGP4
ADDRGP4 qsort
CALLV
pop
line 1114
;1112:
;1113:	// send the latest information on all clients
;1114:	string[0] = '\0';
ADDRLP4 28
CNSTI1 0
ASGNI1
line 1115
;1115:	stringlength = 0;
ADDRLP4 20
CNSTI4 0
ASGNI4
line 1117
;1116:
;1117:	for (i = 0, cnt = 0; i < level.maxclients && cnt < TEAM_MAXOVERLAY; i++) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRLP4 8
CNSTI4 0
ASGNI4
ADDRGP4 $493
JUMPV
LABELV $490
line 1118
;1118:		player = g_entities + i;
ADDRLP4 0
ADDRLP4 4
INDIRI4
CNSTI4 824
MULI4
ADDRGP4 g_entities
ADDP4
ASGNP4
line 1119
;1119:		if ( player->inuse && player->client->sess.sessionTeam ==
ADDRLP4 0
INDIRP4
CNSTI4 520
ADDP4
INDIRI4
CNSTI4 0
EQI4 $495
ADDRLP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 624
ADDP4
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 624
ADDP4
INDIRI4
NEI4 $495
line 1120
;1120:			ent->client->sess.sessionTeam ) {
line 1122
;1121:
;1122:			h = player->client->ps.stats[STAT_HEALTH];
ADDRLP4 12
ADDRLP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
ASGNI4
line 1123
;1123:			a = player->client->ps.stats[STAT_ARMOR];
ADDRLP4 16
ADDRLP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 196
ADDP4
INDIRI4
ASGNI4
line 1124
;1124:			if (h < 0) h = 0;
ADDRLP4 12
INDIRI4
CNSTI4 0
GEI4 $497
ADDRLP4 12
CNSTI4 0
ASGNI4
LABELV $497
line 1125
;1125:			if (a < 0) a = 0;
ADDRLP4 16
INDIRI4
CNSTI4 0
GEI4 $499
ADDRLP4 16
CNSTI4 0
ASGNI4
LABELV $499
line 1127
;1126://qlone - freezetag
;1127:			if ( g_freezeTag.integer && player->freezeState )
ADDRGP4 g_freezeTag+12
INDIRI4
CNSTI4 0
EQI4 $501
ADDRLP4 0
INDIRP4
CNSTI4 808
ADDP4
INDIRI4
CNSTI4 0
EQI4 $501
line 1128
;1128:				h = a = 0;
ADDRLP4 1304
CNSTI4 0
ASGNI4
ADDRLP4 16
ADDRLP4 1304
INDIRI4
ASGNI4
ADDRLP4 12
ADDRLP4 1304
INDIRI4
ASGNI4
LABELV $501
line 1131
;1129://qlone - freezetag
;1130:
;1131:			j = BG_sprintf( entry, " %i %i %i %i %i %i",
ADDRLP4 1043
ARGP4
ADDRGP4 $504
ARGP4
ADDRLP4 4
INDIRI4
ARGI4
ADDRLP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 556
ADDP4
INDIRI4
ARGI4
ADDRLP4 12
INDIRI4
ARGI4
ADDRLP4 16
INDIRI4
ARGI4
ADDRLP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
ARGI4
ADDRLP4 0
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
ARGI4
ADDRLP4 1312
ADDRGP4 BG_sprintf
CALLI4
ASGNI4
ADDRLP4 24
ADDRLP4 1312
INDIRI4
ASGNI4
line 1135
;1132://				level.sortedClients[i], player->client->pers.teamState.location, h, a, 
;1133:				i, player->client->pers.teamState.location, h, a, 
;1134:				player->client->ps.weapon, player->s.powerups);
;1135:			if ( stringlength + j >= sizeof( string ) )
ADDRLP4 20
INDIRI4
ADDRLP4 24
INDIRI4
ADDI4
CVIU4 4
CNSTU4 1015
LTU4 $505
line 1136
;1136:				break;
ADDRGP4 $492
JUMPV
LABELV $505
line 1137
;1137:			strcpy( string + stringlength, entry );
ADDRLP4 20
INDIRI4
ADDRLP4 28
ADDP4
ARGP4
ADDRLP4 1043
ARGP4
ADDRGP4 strcpy
CALLP4
pop
line 1138
;1138:			stringlength += j;
ADDRLP4 20
ADDRLP4 20
INDIRI4
ADDRLP4 24
INDIRI4
ADDI4
ASGNI4
line 1139
;1139:			cnt++;
ADDRLP4 8
ADDRLP4 8
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1140
;1140:		}
LABELV $495
line 1141
;1141:	}
LABELV $491
line 1117
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $493
ADDRLP4 4
INDIRI4
ADDRGP4 level+24
INDIRI4
GEI4 $507
ADDRLP4 8
INDIRI4
CNSTI4 32
LTI4 $490
LABELV $507
LABELV $492
line 1143
;1142:
;1143:	trap_SendServerCommand( ent-g_entities, va( "tinfo %i %s", cnt, string ) );
ADDRGP4 $508
ARGP4
ADDRLP4 8
INDIRI4
ARGI4
ADDRLP4 28
ARGP4
ADDRLP4 1300
ADDRGP4 va
CALLP4
ASGNP4
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRGP4 g_entities
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 824
DIVI4
ARGI4
ADDRLP4 1300
INDIRP4
ARGP4
ADDRGP4 trap_SendServerCommand
CALLV
pop
line 1144
;1144:}
LABELV $477
endproc TeamplayInfoMessage 1316 32
export CheckTeamStatus
proc CheckTeamStatus 20 4
line 1147
;1145:
;1146:
;1147:void CheckTeamStatus( void ) {
line 1151
;1148:	int i;
;1149:	gentity_t *loc, *ent;
;1150:
;1151:	if (level.time - level.lastTeamLocationTime > TEAM_LOCATION_UPDATE_TIME) {
ADDRGP4 level+32
INDIRI4
ADDRGP4 level+64
INDIRI4
SUBI4
CNSTI4 1000
LEI4 $510
line 1153
;1152:
;1153:		level.lastTeamLocationTime = level.time;
ADDRGP4 level+64
ADDRGP4 level+32
INDIRI4
ASGNI4
line 1155
;1154:
;1155:		for (i = 0; i < level.maxclients; i++) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $519
JUMPV
LABELV $516
line 1156
;1156:			ent = g_entities + i;
ADDRLP4 0
ADDRLP4 4
INDIRI4
CNSTI4 824
MULI4
ADDRGP4 g_entities
ADDP4
ASGNP4
line 1158
;1157:
;1158:			if ( ent->client->pers.connected != CON_CONNECTED ) {
ADDRLP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 468
ADDP4
INDIRI4
CNSTI4 2
EQI4 $521
line 1159
;1159:				continue;
ADDRGP4 $517
JUMPV
LABELV $521
line 1162
;1160:			}
;1161:
;1162:			if (ent->inuse && (ent->client->sess.sessionTeam == TEAM_RED ||	ent->client->sess.sessionTeam == TEAM_BLUE)) {
ADDRLP4 0
INDIRP4
CNSTI4 520
ADDP4
INDIRI4
CNSTI4 0
EQI4 $523
ADDRLP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 624
ADDP4
INDIRI4
CNSTI4 1
EQI4 $525
ADDRLP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 624
ADDP4
INDIRI4
CNSTI4 2
NEI4 $523
LABELV $525
line 1163
;1163:				loc = Team_GetLocation( ent );
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 16
ADDRGP4 Team_GetLocation
CALLP4
ASGNP4
ADDRLP4 8
ADDRLP4 16
INDIRP4
ASGNP4
line 1164
;1164:				if (loc)
ADDRLP4 8
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $526
line 1165
;1165:					ent->client->pers.teamState.location = loc->health;
ADDRLP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 556
ADDP4
ADDRLP4 8
INDIRP4
CNSTI4 732
ADDP4
INDIRI4
ASGNI4
ADDRGP4 $527
JUMPV
LABELV $526
line 1167
;1166:				else
;1167:					ent->client->pers.teamState.location = 0;
ADDRLP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 556
ADDP4
CNSTI4 0
ASGNI4
LABELV $527
line 1168
;1168:			}
LABELV $523
line 1169
;1169:		}
LABELV $517
line 1155
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $519
ADDRLP4 4
INDIRI4
ADDRGP4 level+24
INDIRI4
LTI4 $516
line 1171
;1170:
;1171:		for (i = 0; i < level.maxclients; i++) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $531
JUMPV
LABELV $528
line 1172
;1172:			ent = g_entities + i;
ADDRLP4 0
ADDRLP4 4
INDIRI4
CNSTI4 824
MULI4
ADDRGP4 g_entities
ADDP4
ASGNP4
line 1174
;1173:
;1174:			if ( ent->client->pers.connected != CON_CONNECTED ) {
ADDRLP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 468
ADDP4
INDIRI4
CNSTI4 2
EQI4 $533
line 1175
;1175:				continue;
ADDRGP4 $529
JUMPV
LABELV $533
line 1178
;1176:			}
;1177:
;1178:			if (ent->inuse && (ent->client->sess.sessionTeam == TEAM_RED ||	ent->client->sess.sessionTeam == TEAM_BLUE)) {
ADDRLP4 0
INDIRP4
CNSTI4 520
ADDP4
INDIRI4
CNSTI4 0
EQI4 $535
ADDRLP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 624
ADDP4
INDIRI4
CNSTI4 1
EQI4 $537
ADDRLP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 624
ADDP4
INDIRI4
CNSTI4 2
NEI4 $535
LABELV $537
line 1179
;1179:				TeamplayInfoMessage( ent );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 TeamplayInfoMessage
CALLV
pop
line 1180
;1180:			}
LABELV $535
line 1181
;1181:		}
LABELV $529
line 1171
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $531
ADDRLP4 4
INDIRI4
ADDRGP4 level+24
INDIRI4
LTI4 $528
line 1182
;1182:	}
LABELV $510
line 1183
;1183:}
LABELV $509
endproc CheckTeamStatus 20 4
export SP_team_CTF_redplayer
proc SP_team_CTF_redplayer 0 0
line 1190
;1184:
;1185:/*-----------------------------------------------------------------*/
;1186:
;1187:/*QUAKED team_CTF_redplayer (1 0 0) (-16 -16 -16) (16 16 32)
;1188:Only in CTF games.  Red players spawn here at game start.
;1189:*/
;1190:void SP_team_CTF_redplayer( gentity_t *ent ) {
line 1192
;1191://qlone - freezetag
;1192:	if ( g_freezeTag.integer && g_gametype.integer == GT_TEAM )
ADDRGP4 g_freezeTag+12
INDIRI4
CNSTI4 0
EQI4 $539
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 3
NEI4 $539
line 1193
;1193:		ent->classname = "info_player_deathmatch";
ADDRFP4 0
INDIRP4
CNSTI4 524
ADDP4
ADDRGP4 $543
ASGNP4
LABELV $539
line 1195
;1194://qlone - freezetag
;1195:}
LABELV $538
endproc SP_team_CTF_redplayer 0 0
export SP_team_CTF_blueplayer
proc SP_team_CTF_blueplayer 0 0
line 1201
;1196:
;1197:
;1198:/*QUAKED team_CTF_blueplayer (0 0 1) (-16 -16 -16) (16 16 32)
;1199:Only in CTF games.  Blue players spawn here at game start.
;1200:*/
;1201:void SP_team_CTF_blueplayer( gentity_t *ent ) {
line 1203
;1202://qlone - freezetag
;1203:	if ( g_freezeTag.integer && g_gametype.integer == GT_TEAM )
ADDRGP4 g_freezeTag+12
INDIRI4
CNSTI4 0
EQI4 $545
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 3
NEI4 $545
line 1204
;1204:		ent->classname = "info_player_deathmatch";
ADDRFP4 0
INDIRP4
CNSTI4 524
ADDP4
ADDRGP4 $543
ASGNP4
LABELV $545
line 1206
;1205://qlone - freezetag
;1206:}
LABELV $544
endproc SP_team_CTF_blueplayer 0 0
export SP_team_CTF_redspawn
proc SP_team_CTF_redspawn 0 0
line 1213
;1207:
;1208:
;1209:/*QUAKED team_CTF_redspawn (1 0 0) (-16 -16 -24) (16 16 32)
;1210:potential spawning position for red team in CTF games.
;1211:Targets will be fired when someone spawns in on them.
;1212:*/
;1213:void SP_team_CTF_redspawn(gentity_t *ent) {
line 1214
;1214:}
LABELV $549
endproc SP_team_CTF_redspawn 0 0
export SP_team_CTF_bluespawn
proc SP_team_CTF_bluespawn 0 0
line 1220
;1215:
;1216:/*QUAKED team_CTF_bluespawn (0 0 1) (-16 -16 -24) (16 16 32)
;1217:potential spawning position for blue team in CTF games.
;1218:Targets will be fired when someone spawns in on them.
;1219:*/
;1220:void SP_team_CTF_bluespawn(gentity_t *ent) {
line 1221
;1221:}
LABELV $550
endproc SP_team_CTF_bluespawn 0 0
bss
export neutralObelisk
align 4
LABELV neutralObelisk
skip 4
export teamgame
align 4
LABELV teamgame
skip 36
import svf_self_portal2
import trap_SnapVector
import trap_GeneticParentsAndChildSelection
import trap_BotResetWeaponState
import trap_BotFreeWeaponState
import trap_BotAllocWeaponState
import trap_BotLoadWeaponWeights
import trap_BotGetWeaponInfo
import trap_BotChooseBestFightWeapon
import trap_BotAddAvoidSpot
import trap_BotInitMoveState
import trap_BotFreeMoveState
import trap_BotAllocMoveState
import trap_BotPredictVisiblePosition
import trap_BotMovementViewTarget
import trap_BotReachabilityArea
import trap_BotResetLastAvoidReach
import trap_BotResetAvoidReach
import trap_BotMoveInDirection
import trap_BotMoveToGoal
import trap_BotResetMoveState
import trap_BotFreeGoalState
import trap_BotAllocGoalState
import trap_BotMutateGoalFuzzyLogic
import trap_BotSaveGoalFuzzyLogic
import trap_BotInterbreedGoalFuzzyLogic
import trap_BotFreeItemWeights
import trap_BotLoadItemWeights
import trap_BotUpdateEntityItems
import trap_BotInitLevelItems
import trap_BotSetAvoidGoalTime
import trap_BotAvoidGoalTime
import trap_BotGetLevelItemGoal
import trap_BotGetMapLocationGoal
import trap_BotGetNextCampSpotGoal
import trap_BotItemGoalInVisButNotVisible
import trap_BotTouchingGoal
import trap_BotChooseNBGItem
import trap_BotChooseLTGItem
import trap_BotGetSecondGoal
import trap_BotGetTopGoal
import trap_BotGoalName
import trap_BotDumpGoalStack
import trap_BotDumpAvoidGoals
import trap_BotEmptyGoalStack
import trap_BotPopGoal
import trap_BotPushGoal
import trap_BotResetAvoidGoals
import trap_BotRemoveFromAvoidGoals
import trap_BotResetGoalState
import trap_BotSetChatName
import trap_BotSetChatGender
import trap_BotLoadChatFile
import trap_BotReplaceSynonyms
import trap_UnifyWhiteSpaces
import trap_BotMatchVariable
import trap_BotFindMatch
import trap_StringContains
import trap_BotGetChatMessage
import trap_BotEnterChat
import trap_BotChatLength
import trap_BotReplyChat
import trap_BotNumInitialChats
import trap_BotInitialChat
import trap_BotNumConsoleMessages
import trap_BotNextConsoleMessage
import trap_BotRemoveConsoleMessage
import trap_BotQueueConsoleMessage
import trap_BotFreeChatState
import trap_BotAllocChatState
import trap_Characteristic_String
import trap_Characteristic_BInteger
import trap_Characteristic_Integer
import trap_Characteristic_BFloat
import trap_Characteristic_Float
import trap_BotFreeCharacter
import trap_BotLoadCharacter
import trap_EA_ResetInput
import trap_EA_GetInput
import trap_EA_EndRegular
import trap_EA_View
import trap_EA_Move
import trap_EA_DelayedJump
import trap_EA_Jump
import trap_EA_SelectWeapon
import trap_EA_MoveRight
import trap_EA_MoveLeft
import trap_EA_MoveBack
import trap_EA_MoveForward
import trap_EA_MoveDown
import trap_EA_MoveUp
import trap_EA_Crouch
import trap_EA_Respawn
import trap_EA_Use
import trap_EA_Attack
import trap_EA_Talk
import trap_EA_Gesture
import trap_EA_Action
import trap_EA_Command
import trap_EA_SayTeam
import trap_EA_Say
import trap_AAS_PredictClientMovement
import trap_AAS_Swimming
import trap_AAS_AlternativeRouteGoals
import trap_AAS_PredictRoute
import trap_AAS_EnableRoutingArea
import trap_AAS_AreaTravelTimeToGoalArea
import trap_AAS_AreaReachability
import trap_AAS_IntForBSPEpairKey
import trap_AAS_FloatForBSPEpairKey
import trap_AAS_VectorForBSPEpairKey
import trap_AAS_ValueForBSPEpairKey
import trap_AAS_NextBSPEntity
import trap_AAS_PointContents
import trap_AAS_TraceAreas
import trap_AAS_PointReachabilityAreaIndex
import trap_AAS_PointAreaNum
import trap_AAS_Time
import trap_AAS_PresenceTypeBoundingBox
import trap_AAS_Initialized
import trap_AAS_EntityInfo
import trap_AAS_AreaInfo
import trap_AAS_BBoxAreas
import trap_BotUserCommand
import trap_BotGetServerCommand
import trap_BotGetSnapshotEntity
import trap_BotLibTest
import trap_BotLibUpdateEntity
import trap_BotLibLoadMap
import trap_BotLibStartFrame
import trap_BotLibDefine
import trap_BotLibVarGet
import trap_BotLibVarSet
import trap_BotLibShutdown
import trap_BotLibSetup
import trap_DebugPolygonDelete
import trap_DebugPolygonCreate
import trap_GetEntityToken
import trap_GetUsercmd
import trap_BotFreeClient
import trap_BotAllocateClient
import trap_EntityContact
import trap_EntitiesInBox
import trap_UnlinkEntity
import trap_LinkEntity
import trap_AreasConnected
import trap_AdjustAreaPortalState
import trap_InPVSIgnorePortals
import trap_InPVS
import trap_PointContents
import trap_TraceCapsule
import trap_Trace
import trap_SetBrushModel
import trap_GetServerinfo
import trap_SetUserinfo
import trap_GetUserinfo
import trap_GetConfigstring
import trap_SetConfigstring
import trap_SendServerCommand
import trap_DropClient
import trap_LocateGameData
import trap_Cvar_VariableStringBuffer
import trap_Cvar_VariableValue
import trap_Cvar_VariableIntegerValue
import trap_Cvar_Set
import trap_Cvar_Update
import trap_Cvar_Register
import trap_SendConsoleCommand
import trap_FS_Seek
import trap_FS_GetFileList
import trap_FS_FCloseFile
import trap_FS_Write
import trap_FS_Read
import trap_FS_FOpenFile
import trap_Args
import trap_Argv
import trap_Argc
import trap_RealTime
import trap_Milliseconds
import trap_Error
import trap_Print
import g_removeweapon
import g_removepowerup
import g_removeitem
import g_removeammo
import g_wpflags
import g_tossWeapon
import g_startHealth
import g_startArmor
import g_startAmmoCG
import g_startAmmoPL
import g_startAmmoNG
import g_startAmmoBFG
import g_startAmmoPG
import g_startAmmoRG
import g_startAmmoLG
import g_startAmmoRL
import g_startAmmoGL
import g_startAmmoSG
import g_startAmmoMG
import g_specLock
import g_noSelfDamage
import g_grapple
import g_freezeTag
import g_doReady
import g_proxMineTimeout
import g_singlePlayer
import g_enableBreath
import g_enableDust
import g_predictPVS
import g_unlagged
import g_rotation
import pmove_msec
import pmove_fixed
import g_smoothClients
import g_blueteam
import g_redteam
import g_cubeTimeout
import g_obeliskRespawnDelay
import g_obeliskRegenAmount
import g_obeliskRegenPeriod
import g_obeliskHealth
import g_filterBan
import g_banIPs
import g_teamForceBalance
import g_autoJoin
import g_allowVote
import g_blood
import g_warmup
import g_motd
import g_synchronousClients
import g_weaponTeamRespawn
import g_weaponRespawn
import g_debugDamage
import g_debugAlloc
import g_debugMove
import g_inactivity
import g_forcerespawn
import g_quadfactor
import g_knockback
import g_speed
import g_gravity
import g_needpass
import g_password
import g_friendlyFire
import g_capturelimit
import g_timelimit
import g_fraglimit
import g_dmflags
import g_restarted
import g_maxGameClients
import g_maxclients
import g_cheats
import g_dedicated
import sv_fps
import g_mapname
import g_gametype
import g_entities
import level
import Hook_Fire
import G_SetInfiniteAmmo
import G_RemoveWeapon
import G_RemovePowerup
import G_RemoveItem
import G_RemoveAmmo
import G_SpawnWeapon
import G_RegisterWeapon
import G_ItemReplaced
import FT_ResetFlags
import Cmd_Ready_f
import Cmd_Drop_f
import locationSpawn
import CheckDelay
import team_wins
import readyCheck
import player_freeze
import is_body_freeze
import is_body
import DamageBody
import Body_free
import Persistant_spectator
import respawnSpectator
import Set_Client
import Set_spectator
import is_spectator
import G_MapExist
import G_LoadMap
import ParseMapRotation
import BotTestAAS
import BotAIStartFrame
import BotAIShutdownClient
import BotAISetupClient
import BotAILoadMap
import BotAIShutdown
import BotAISetup
import BotInterbreedEndMatch
import Svcmd_BotList_f
import Svcmd_AddBot_f
import G_BotConnect
import G_RemoveQueuedBotBegin
import G_CheckBotSpawn
import G_GetBotInfoByName
import G_GetBotInfoByNumber
import G_InitBots
import G_PredictPlayerMove
import G_UnTimeShiftClient
import G_UndoTimeShiftFor
import G_DoTimeShiftFor
import G_UnTimeShiftAllClients
import G_TimeShiftAllClients
import G_StoreHistory
import G_ResetHistory
import Svcmd_AbortPodium_f
import SpawnModelsOnVictoryPads
import UpdateTournamentInfo
import G_ClearClientSessionData
import G_WriteClientSessionData
import G_ReadClientSessionData
import G_InitSessionData
import G_WriteSessionData
import G_InitWorldSession
import Svcmd_GameMem_f
import G_InitMemory
import G_Alloc
import CheckObeliskAttack
import G_RunClient
import ClientEndFrame
import ClientThink
import ClientCommand
import ClientBegin
import ClientDisconnect
import ClientUserinfoChanged
import ClientConnect
import G_BroadcastServerCommand
import G_Error
import G_Printf
import G_LogPrintf
import G_RunThink
import CheckTeamLeader
import SetLeader
import FindIntermissionPoint
import MoveClientToIntermission
import DeathmatchScoreboardMessage
import FireWeapon
import G_FilterPacket
import G_ProcessIPBans
import ConsoleCommand
import SpotWouldTelefrag
import CalculateRanks
import AddScore
import player_die
import ClientSpawn
import InitBodyQue
import BeginIntermission
import respawn
import CopyToBodyQue
import SelectSpawnPoint
import SetClientViewAngle
import PickTeam
import TeamLeader
import TeamConnectedCount
import TeamCount
import Weapon_HookThink
import Weapon_HookFree
import CheckGauntletAttack
import SnapVectorTowards
import CalcMuzzlePoint
import LogAccuracyHit
import TeleportPlayer
import trigger_teleporter_touch
import Touch_DoorTrigger
import G_RunMover
import fire_grapple
import fire_bfg
import fire_rocket
import fire_grenade
import fire_plasma
import fire_blaster
import G_RunMissile
import TossClientCubes
import TossClientItems
import body_die
import G_InvulnerabilityEffect
import G_RadiusDamage
import G_Damage
import CanDamage
import BuildShaderStateConfig
import AddRemap
import G_SetOrigin
import G_AddEvent
import G_AddPredictableEvent
import vectoyaw
import vtos
import tv
import G_TouchSolids
import G_TouchTriggers
import G_EntitiesFree
import G_FreeEntity
import G_Sound
import G_TempEntity
import G_Spawn
import G_InitGentity
import G_SetMovedir
import G_UseTargets
import G_PickTarget
import G_Find
import G_KillBox
import G_TeamCommand
import G_SoundIndex
import G_ModelIndex
import SaveRegisteredItems
import RegisterItem
import ClearRegisteredItems
import Touch_Item
import ArmorIndex
import Think_Weapon
import FinishSpawningItem
import G_SpawnItem
import SetRespawn
import LaunchItem
import Drop_Item
import PrecacheItem
import UseHoldableItem
import SpawnTime
import RespawnItem
import G_RunItem
import G_CheckTeamItems
import Registered
import G_RevertVote
import Cmd_FollowCycle_f
import SetTeam
import BroadcastTeamChange
import StopFollowing
import Cmd_Score_f
import G_NewString
import G_SpawnEntitiesFromString
import G_SpawnVector
import G_SpawnInt
import G_SpawnFloat
import G_SpawnString
import BigEndian
import replace1
import Q_stradd
import Q_strcpy
import BG_StripColor
import BG_CleanName
import DecodedString
import EncodedString
import strtok
import Q_stristr
import BG_sprintf
import BG_PlayerTouchesItem
import BG_PlayerStateToEntityStateExtraPolate
import BG_PlayerStateToEntityState
import BG_TouchJumpPad
import BG_AddPredictableEventToPlayerstate
import BG_EvaluateTrajectoryDelta
import BG_EvaluateTrajectory
import BG_CanItemBeGrabbed
import BG_FindItemForHoldable
import BG_FindItemForPowerup
import BG_FindItemForWeapon
import BG_FindItem
import bg_numItems
import bg_itemlist
import Pmove
import PM_UpdateViewAngles
import Com_Printf
import Com_Error
import Info_NextPair
import Info_ValidateKeyValue
import Info_Validate
import Info_SetValueForKey_Big
import Info_SetValueForKey
import Info_ValueForKey
import va
import Q_CleanStr
import Q_PrintStrlen
import Q_strcat
import Q_strncpyz
import Q_strrchr
import Q_strupr
import Q_strlwr
import Q_stricmpn
import Q_strncmp
import Q_stricmp
import Q_isalpha
import Q_isupper
import Q_islower
import Q_isprint
import locase
import Com_sprintf
import Parse3DMatrix
import Parse2DMatrix
import Parse1DMatrix
import SkipRestOfLine
import SkipBracedSection
import COM_MatchToken
import Com_Split
import COM_ParseSep
import Com_InitSeparators
import SkipTillSeparators
import COM_ParseWarning
import COM_ParseError
import COM_Compress
import COM_ParseExt
import COM_Parse
import COM_GetCurrentParseLine
import COM_BeginParseSession
import COM_DefaultExtension
import COM_StripExtension
import COM_SkipPath
import Com_Clamp
import PerpendicularVector
import AngleVectors
import MatrixMultiply
import MakeNormalVectors
import RotateAroundDirection
import RotatePointAroundVector
import ProjectPointOnPlane
import PlaneFromPoints
import AngleDelta
import AngleNormalize180
import AngleNormalize360
import AnglesSubtract
import AngleSubtract
import LerpAngle
import AngleMod
import BoxOnPlaneSide
import SetPlaneSignbits
import AxisCopy
import AxisClear
import AnglesToAxis
import vectoangles
import Q_crandom
import Q_random
import Q_rand
import Q_acos
import Q_log2
import VectorRotate
import Vector4Scale
import VectorNormalize2
import VectorNormalize
import CrossProduct
import VectorInverse
import VectorNormalizeFast
import DistanceSquared
import Distance
import VectorLengthSquared
import VectorLength
import VectorCompare
import AddPointToBounds
import ClearBounds
import RadiusFromBounds
import NormalizeColor
import ColorBytes4
import ColorBytes3
import _VectorMA
import _VectorScale
import _VectorCopy
import _VectorAdd
import _VectorSubtract
import _DotProduct
import ByteToDir
import DirToByte
import ClampShort
import ClampChar
import Q_rsqrt
import Q_fabs
import axisDefault
import vec3_origin
import g_color_table
import colorDkGrey
import colorMdGrey
import colorLtGrey
import colorWhite
import colorCyan
import colorMagenta
import colorYellow
import colorBlue
import colorGreen
import colorRed
import colorBlack
import bytedirs
import Hunk_Alloc
import acos
import fabs
import abs
import tan
import atan2
import cos
import sin
import sqrt
import floor
import ceil
import memcpy
import memset
import memmove
import Q_sscanf
import ED_vsprintf
import atoi
import atof
import toupper
import tolower
import strncpy
import strstr
import strchr
import strcmp
import strcpy
import strcat
import strlen
import rand
import srand
import qsort
lit
align 1
LABELV $543
byte 1 105
byte 1 110
byte 1 102
byte 1 111
byte 1 95
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 95
byte 1 100
byte 1 101
byte 1 97
byte 1 116
byte 1 104
byte 1 109
byte 1 97
byte 1 116
byte 1 99
byte 1 104
byte 1 0
align 1
LABELV $508
byte 1 116
byte 1 105
byte 1 110
byte 1 102
byte 1 111
byte 1 32
byte 1 37
byte 1 105
byte 1 32
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $504
byte 1 32
byte 1 37
byte 1 105
byte 1 32
byte 1 37
byte 1 105
byte 1 32
byte 1 37
byte 1 105
byte 1 32
byte 1 37
byte 1 105
byte 1 32
byte 1 37
byte 1 105
byte 1 32
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $444
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $443
byte 1 37
byte 1 99
byte 1 37
byte 1 99
byte 1 37
byte 1 115
byte 1 94
byte 1 55
byte 1 0
align 1
LABELV $414
byte 1 68
byte 1 111
byte 1 110
byte 1 39
byte 1 116
byte 1 32
byte 1 107
byte 1 110
byte 1 111
byte 1 119
byte 1 32
byte 1 119
byte 1 104
byte 1 97
byte 1 116
byte 1 32
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 32
byte 1 116
byte 1 104
byte 1 101
byte 1 32
byte 1 102
byte 1 108
byte 1 97
byte 1 103
byte 1 32
byte 1 105
byte 1 115
byte 1 32
byte 1 111
byte 1 110
byte 1 46
byte 1 10
byte 1 0
align 1
LABELV $405
byte 1 37
byte 1 115
byte 1 94
byte 1 55
byte 1 32
byte 1 103
byte 1 111
byte 1 116
byte 1 32
byte 1 116
byte 1 104
byte 1 101
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 102
byte 1 108
byte 1 97
byte 1 103
byte 1 33
byte 1 10
byte 1 0
align 1
LABELV $378
byte 1 37
byte 1 115
byte 1 94
byte 1 55
byte 1 32
byte 1 99
byte 1 97
byte 1 112
byte 1 116
byte 1 117
byte 1 114
byte 1 101
byte 1 100
byte 1 32
byte 1 116
byte 1 104
byte 1 101
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 102
byte 1 108
byte 1 97
byte 1 103
byte 1 33
byte 1 10
byte 1 0
align 1
LABELV $374
byte 1 37
byte 1 115
byte 1 94
byte 1 55
byte 1 32
byte 1 114
byte 1 101
byte 1 116
byte 1 117
byte 1 114
byte 1 110
byte 1 101
byte 1 100
byte 1 32
byte 1 116
byte 1 104
byte 1 101
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 102
byte 1 108
byte 1 97
byte 1 103
byte 1 33
byte 1 10
byte 1 0
align 1
LABELV $354
byte 1 84
byte 1 104
byte 1 101
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 102
byte 1 108
byte 1 97
byte 1 103
byte 1 32
byte 1 104
byte 1 97
byte 1 115
byte 1 32
byte 1 114
byte 1 101
byte 1 116
byte 1 117
byte 1 114
byte 1 110
byte 1 101
byte 1 100
byte 1 33
byte 1 10
byte 1 0
align 1
LABELV $353
byte 1 84
byte 1 104
byte 1 101
byte 1 32
byte 1 102
byte 1 108
byte 1 97
byte 1 103
byte 1 32
byte 1 104
byte 1 97
byte 1 115
byte 1 32
byte 1 114
byte 1 101
byte 1 116
byte 1 117
byte 1 114
byte 1 110
byte 1 101
byte 1 100
byte 1 33
byte 1 10
byte 1 0
align 1
LABELV $347
byte 1 87
byte 1 97
byte 1 114
byte 1 110
byte 1 105
byte 1 110
byte 1 103
byte 1 58
byte 1 32
byte 1 32
byte 1 78
byte 1 85
byte 1 76
byte 1 76
byte 1 32
byte 1 112
byte 1 97
byte 1 115
byte 1 115
byte 1 101
byte 1 100
byte 1 32
byte 1 116
byte 1 111
byte 1 32
byte 1 84
byte 1 101
byte 1 97
byte 1 109
byte 1 95
byte 1 67
byte 1 97
byte 1 112
byte 1 116
byte 1 117
byte 1 114
byte 1 101
byte 1 70
byte 1 108
byte 1 97
byte 1 103
byte 1 83
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 10
byte 1 0
align 1
LABELV $318
byte 1 87
byte 1 97
byte 1 114
byte 1 110
byte 1 105
byte 1 110
byte 1 103
byte 1 58
byte 1 32
byte 1 32
byte 1 78
byte 1 85
byte 1 76
byte 1 76
byte 1 32
byte 1 112
byte 1 97
byte 1 115
byte 1 115
byte 1 101
byte 1 100
byte 1 32
byte 1 116
byte 1 111
byte 1 32
byte 1 84
byte 1 101
byte 1 97
byte 1 109
byte 1 95
byte 1 84
byte 1 97
byte 1 107
byte 1 101
byte 1 70
byte 1 108
byte 1 97
byte 1 103
byte 1 83
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 10
byte 1 0
align 1
LABELV $312
byte 1 87
byte 1 97
byte 1 114
byte 1 110
byte 1 105
byte 1 110
byte 1 103
byte 1 58
byte 1 32
byte 1 32
byte 1 78
byte 1 85
byte 1 76
byte 1 76
byte 1 32
byte 1 112
byte 1 97
byte 1 115
byte 1 115
byte 1 101
byte 1 100
byte 1 32
byte 1 116
byte 1 111
byte 1 32
byte 1 84
byte 1 101
byte 1 97
byte 1 109
byte 1 95
byte 1 82
byte 1 101
byte 1 116
byte 1 117
byte 1 114
byte 1 110
byte 1 70
byte 1 108
byte 1 97
byte 1 103
byte 1 83
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 10
byte 1 0
align 1
LABELV $299
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 95
byte 1 67
byte 1 84
byte 1 70
byte 1 95
byte 1 110
byte 1 101
byte 1 117
byte 1 116
byte 1 114
byte 1 97
byte 1 108
byte 1 102
byte 1 108
byte 1 97
byte 1 103
byte 1 0
align 1
LABELV $245
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 95
byte 1 67
byte 1 84
byte 1 70
byte 1 95
byte 1 98
byte 1 108
byte 1 117
byte 1 101
byte 1 102
byte 1 108
byte 1 97
byte 1 103
byte 1 0
align 1
LABELV $243
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 95
byte 1 67
byte 1 84
byte 1 70
byte 1 95
byte 1 114
byte 1 101
byte 1 100
byte 1 102
byte 1 108
byte 1 97
byte 1 103
byte 1 0
align 1
LABELV $223
byte 1 37
byte 1 115
byte 1 94
byte 1 55
byte 1 32
byte 1 102
byte 1 114
byte 1 97
byte 1 103
byte 1 103
byte 1 101
byte 1 100
byte 1 32
byte 1 37
byte 1 115
byte 1 39
byte 1 115
byte 1 32
byte 1 115
byte 1 107
byte 1 117
byte 1 108
byte 1 108
byte 1 32
byte 1 99
byte 1 97
byte 1 114
byte 1 114
byte 1 105
byte 1 101
byte 1 114
byte 1 33
byte 1 10
byte 1 0
align 1
LABELV $212
byte 1 37
byte 1 115
byte 1 94
byte 1 55
byte 1 32
byte 1 102
byte 1 114
byte 1 97
byte 1 103
byte 1 103
byte 1 101
byte 1 100
byte 1 32
byte 1 37
byte 1 115
byte 1 39
byte 1 115
byte 1 32
byte 1 102
byte 1 108
byte 1 97
byte 1 103
byte 1 32
byte 1 99
byte 1 97
byte 1 114
byte 1 114
byte 1 105
byte 1 101
byte 1 114
byte 1 33
byte 1 10
byte 1 0
align 1
LABELV $104
byte 1 112
byte 1 114
byte 1 105
byte 1 110
byte 1 116
byte 1 32
byte 1 34
byte 1 37
byte 1 115
byte 1 34
byte 1 0
align 1
LABELV $99
byte 1 80
byte 1 114
byte 1 105
byte 1 110
byte 1 116
byte 1 77
byte 1 115
byte 1 103
byte 1 32
byte 1 111
byte 1 118
byte 1 101
byte 1 114
byte 1 114
byte 1 117
byte 1 110
byte 1 0
align 1
LABELV $94
byte 1 94
byte 1 55
byte 1 0
align 1
LABELV $93
byte 1 94
byte 1 51
byte 1 0
align 1
LABELV $90
byte 1 94
byte 1 52
byte 1 0
align 1
LABELV $87
byte 1 94
byte 1 49
byte 1 0
align 1
LABELV $76
byte 1 70
byte 1 82
byte 1 69
byte 1 69
byte 1 0
align 1
LABELV $75
byte 1 83
byte 1 80
byte 1 69
byte 1 67
byte 1 84
byte 1 65
byte 1 84
byte 1 79
byte 1 82
byte 1 0
align 1
LABELV $72
byte 1 66
byte 1 76
byte 1 85
byte 1 69
byte 1 0
align 1
LABELV $69
byte 1 82
byte 1 69
byte 1 68
byte 1 0
