export CG_InitLocalEntities
code
proc CG_InitLocalEntities 12 12
file "../../../../code/cgame/cg_localents.c"
line 21
;1:// Copyright (C) 1999-2000 Id Software, Inc.
;2://
;3:
;4:// cg_localents.c -- every frame, generate renderer commands for locally
;5:// processed entities, like smoke puffs, gibs, shells, etc.
;6:
;7:#include "cg_local.h"
;8:
;9:#define	MAX_LOCAL_ENTITIES	2048
;10:localEntity_t	cg_localEntities[MAX_LOCAL_ENTITIES];
;11:localEntity_t	cg_activeLocalEntities;		// double linked list
;12:localEntity_t	*cg_freeLocalEntities;		// single linked list
;13:
;14:/*
;15:===================
;16:CG_InitLocalEntities
;17:
;18:This is called at startup and for tournement restarts
;19:===================
;20:*/
;21:void	CG_InitLocalEntities( void ) {
line 24
;22:	int		i;
;23:
;24:	memset( cg_localEntities, 0, sizeof( cg_localEntities ) );
ADDRGP4 cg_localEntities
ARGP4
CNSTI4 0
ARGI4
CNSTI4 598016
ARGI4
ADDRGP4 memset
CALLP4
pop
line 25
;25:	cg_activeLocalEntities.next = &cg_activeLocalEntities;
ADDRGP4 cg_activeLocalEntities+4
ADDRGP4 cg_activeLocalEntities
ASGNP4
line 26
;26:	cg_activeLocalEntities.prev = &cg_activeLocalEntities;
ADDRLP4 4
ADDRGP4 cg_activeLocalEntities
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 4
INDIRP4
ASGNP4
line 27
;27:	cg_freeLocalEntities = cg_localEntities;
ADDRGP4 cg_freeLocalEntities
ADDRGP4 cg_localEntities
ASGNP4
line 28
;28:	for ( i = 0 ; i < MAX_LOCAL_ENTITIES - 1 ; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $74
line 29
;29:		cg_localEntities[i].next = &cg_localEntities[i+1];
ADDRLP4 0
INDIRI4
CNSTI4 292
MULI4
ADDRGP4 cg_localEntities+4
ADDP4
ADDRLP4 0
INDIRI4
CNSTI4 292
MULI4
ADDRGP4 cg_localEntities+292
ADDP4
ASGNP4
line 30
;30:	}
LABELV $75
line 28
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 2047
LTI4 $74
line 31
;31:}
LABELV $72
endproc CG_InitLocalEntities 12 12
export CG_FreeLocalEntity
proc CG_FreeLocalEntity 8 4
line 39
;32:
;33:
;34:/*
;35:==================
;36:CG_FreeLocalEntity
;37:==================
;38:*/
;39:void CG_FreeLocalEntity( localEntity_t *le ) {
line 40
;40:	if ( !le->prev ) {
ADDRFP4 0
INDIRP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $81
line 41
;41:		CG_Error( "CG_FreeLocalEntity: not active" );
ADDRGP4 $83
ARGP4
ADDRGP4 CG_Error
CALLV
pop
line 42
;42:	}
LABELV $81
line 45
;43:
;44:	// remove from the doubly linked active list
;45:	le->prev->next = le->next;
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
ASGNP4
line 46
;46:	le->next->prev = le->prev;
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
ADDRLP4 4
INDIRP4
INDIRP4
ASGNP4
line 49
;47:
;48:	// the free list is only singly linked
;49:	le->next = cg_freeLocalEntities;
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg_freeLocalEntities
INDIRP4
ASGNP4
line 50
;50:	cg_freeLocalEntities = le;
ADDRGP4 cg_freeLocalEntities
ADDRFP4 0
INDIRP4
ASGNP4
line 51
;51:}
LABELV $80
endproc CG_FreeLocalEntity 8 4
export CG_AllocLocalEntity
proc CG_AllocLocalEntity 8 12
line 60
;52:
;53:/*
;54:===================
;55:CG_AllocLocalEntity
;56:
;57:Will always succeed, even if it requires freeing an old active entity
;58:===================
;59:*/
;60:localEntity_t	*CG_AllocLocalEntity( void ) {
line 63
;61:	localEntity_t	*le;
;62:
;63:	if ( !cg_freeLocalEntities ) {
ADDRGP4 cg_freeLocalEntities
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $85
line 66
;64:		// no free entities, so free the one at the end of the chain
;65:		// remove the oldest active entity
;66:		CG_FreeLocalEntity( cg_activeLocalEntities.prev );
ADDRGP4 cg_activeLocalEntities
INDIRP4
ARGP4
ADDRGP4 CG_FreeLocalEntity
CALLV
pop
line 67
;67:	}
LABELV $85
line 69
;68:
;69:	le = cg_freeLocalEntities;
ADDRLP4 0
ADDRGP4 cg_freeLocalEntities
INDIRP4
ASGNP4
line 70
;70:	cg_freeLocalEntities = cg_freeLocalEntities->next;
ADDRLP4 4
ADDRGP4 cg_freeLocalEntities
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 4
INDIRP4
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
ASGNP4
line 72
;71:
;72:	memset( le, 0, sizeof( *le ) );
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 292
ARGI4
ADDRGP4 memset
CALLP4
pop
line 75
;73:
;74:	// link into the active list
;75:	le->next = cg_activeLocalEntities.next;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg_activeLocalEntities+4
INDIRP4
ASGNP4
line 76
;76:	le->prev = &cg_activeLocalEntities;
ADDRLP4 0
INDIRP4
ADDRGP4 cg_activeLocalEntities
ASGNP4
line 77
;77:	cg_activeLocalEntities.next->prev = le;
ADDRGP4 cg_activeLocalEntities+4
INDIRP4
ADDRLP4 0
INDIRP4
ASGNP4
line 78
;78:	cg_activeLocalEntities.next = le;
ADDRGP4 cg_activeLocalEntities+4
ADDRLP4 0
INDIRP4
ASGNP4
line 79
;79:	return le;
ADDRLP4 0
INDIRP4
RETP4
LABELV $84
endproc CG_AllocLocalEntity 8 12
export CG_BloodTrail
proc CG_BloodTrail 40 48
line 101
;80:}
;81:
;82:
;83:/*
;84:====================================================================================
;85:
;86:FRAGMENT PROCESSING
;87:
;88:A fragment localentity interacts with the environment in some way (hitting walls),
;89:or generates more localentities along a trail.
;90:
;91:====================================================================================
;92:*/
;93:
;94:/*
;95:================
;96:CG_BloodTrail
;97:
;98:Leave expanding blood puffs behind gibs
;99:================
;100:*/
;101:void CG_BloodTrail( localEntity_t *le ) {
line 108
;102:	int		t;
;103:	int		t2;
;104:	int		step;
;105:	vec3_t	newOrigin;
;106:	localEntity_t	*blood;
;107:
;108:	step = 150;
ADDRLP4 20
CNSTI4 150
ASGNI4
line 109
;109:	t = step * ( (cg.time - cg.frametime + step ) / step );
ADDRLP4 0
ADDRLP4 20
INDIRI4
ADDRGP4 cg+107604
INDIRI4
ADDRGP4 cg+107600
INDIRI4
SUBI4
ADDRLP4 20
INDIRI4
ADDI4
ADDRLP4 20
INDIRI4
DIVI4
MULI4
ASGNI4
line 110
;110:	t2 = step * ( cg.time / step );
ADDRLP4 24
ADDRLP4 20
INDIRI4
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 20
INDIRI4
DIVI4
MULI4
ASGNI4
line 112
;111:
;112:	for ( ; t <= t2; t += step ) {
ADDRGP4 $97
JUMPV
LABELV $94
line 113
;113:		BG_EvaluateTrajectory( &le->pos, t, newOrigin );
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 8
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 115
;114:
;115:		blood = CG_SmokePuff( newOrigin, vec3_origin, 
ADDRLP4 8
ARGP4
ADDRGP4 vec3_origin
ARGP4
CNSTF4 1101004800
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1157234688
ARGF4
ADDRLP4 0
INDIRI4
ARGI4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 cgs+148692+296
INDIRI4
ARGI4
ADDRLP4 36
ADDRGP4 CG_SmokePuff
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 36
INDIRP4
ASGNP4
line 124
;116:					  20,		// radius
;117:					  1, 1, 1, 1,	// color
;118:					  2000,		// trailTime
;119:					  t,		// startTime
;120:					  0,		// fadeInTime
;121:					  0,		// flags
;122:					  cgs.media.bloodTrailShader );
;123:		// use the optimized version
;124:		blood->leType = LE_FALL_SCALE_FADE;
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 5
ASGNI4
line 126
;125:		// drop a total of 40 units over its lifetime
;126:		blood->pos.trDelta[2] = 40;
ADDRLP4 4
INDIRP4
CNSTI4 64
ADDP4
CNSTF4 1109393408
ASGNF4
line 127
;127:	}
LABELV $95
line 112
ADDRLP4 0
ADDRLP4 0
INDIRI4
ADDRLP4 20
INDIRI4
ADDI4
ASGNI4
LABELV $97
ADDRLP4 0
INDIRI4
ADDRLP4 24
INDIRI4
LEI4 $94
line 128
;128:}
LABELV $90
endproc CG_BloodTrail 40 48
export CG_FragmentBounceMark
proc CG_FragmentBounceMark 24 44
line 136
;129:
;130:
;131:/*
;132:================
;133:CG_FragmentBounceMark
;134:================
;135:*/
;136:void CG_FragmentBounceMark( localEntity_t *le, trace_t *trace ) {
line 139
;137:	int			radius;
;138:
;139:	if ( le->leMarkType == LEMT_BLOOD ) {
ADDRFP4 0
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
CNSTI4 2
NEI4 $101
line 141
;140:
;141:		radius = 16 + (rand()&31);
ADDRLP4 4
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 4
INDIRI4
CNSTI4 31
BANDI4
CNSTI4 16
ADDI4
ASGNI4
line 143
;142://freeze
;143:		if ( le->refEntity.customShader == cgs.media.freezeShader )
ADDRFP4 0
INDIRP4
CNSTI4 264
ADDP4
INDIRI4
ADDRGP4 cgs+148692+392
INDIRI4
NEI4 $103
line 144
;144:			CG_ImpactMark( cgs.media.freezeMarkShader, trace->endpos, trace->plane.normal, random() * 360, 1, 1, 1, 1, qtrue, radius, qfalse );
ADDRLP4 8
ADDRGP4 rand
CALLI4
ASGNI4
ADDRGP4 cgs+148692+396
INDIRI4
ARGI4
ADDRLP4 12
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRLP4 12
INDIRP4
CNSTI4 24
ADDP4
ARGP4
ADDRLP4 8
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1010041192
MULF4
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1065353216
ARGF4
CNSTI4 1
ARGI4
ADDRLP4 0
INDIRI4
CVIF4 4
ARGF4
CNSTI4 0
ARGI4
ADDRGP4 CG_ImpactMark
CALLV
pop
ADDRGP4 $102
JUMPV
LABELV $103
line 147
;145:		else
;146://freeze
;147:		CG_ImpactMark( cgs.media.bloodMarkShader, trace->endpos, trace->plane.normal, random()*360,
ADDRLP4 16
ADDRGP4 rand
CALLI4
ASGNI4
ADDRGP4 cgs+148692+372
INDIRI4
ARGI4
ADDRLP4 20
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRLP4 20
INDIRP4
CNSTI4 24
ADDP4
ARGP4
ADDRLP4 16
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1010041192
MULF4
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1065353216
ARGF4
CNSTI4 1
ARGI4
ADDRLP4 0
INDIRI4
CVIF4 4
ARGF4
CNSTI4 0
ARGI4
ADDRGP4 CG_ImpactMark
CALLV
pop
line 149
;148:			1,1,1,1, qtrue, radius, qfalse );
;149:	} else if ( le->leMarkType == LEMT_BURN ) {
ADDRGP4 $102
JUMPV
LABELV $101
ADDRFP4 0
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
CNSTI4 1
NEI4 $111
line 151
;150:
;151:		radius = 8 + (rand()&15);
ADDRLP4 4
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 4
INDIRI4
CNSTI4 15
BANDI4
CNSTI4 8
ADDI4
ASGNI4
line 152
;152:		CG_ImpactMark( cgs.media.burnMarkShader, trace->endpos, trace->plane.normal, random()*360,
ADDRLP4 8
ADDRGP4 rand
CALLI4
ASGNI4
ADDRGP4 cgs+148692+380
INDIRI4
ARGI4
ADDRLP4 12
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRLP4 12
INDIRP4
CNSTI4 24
ADDP4
ARGP4
ADDRLP4 8
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1010041192
MULF4
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1065353216
ARGF4
CNSTI4 1
ARGI4
ADDRLP4 0
INDIRI4
CVIF4 4
ARGF4
CNSTI4 0
ARGI4
ADDRGP4 CG_ImpactMark
CALLV
pop
line 154
;153:			1,1,1,1, qtrue, radius, qfalse );
;154:	}
LABELV $111
LABELV $102
line 159
;155:
;156:
;157:	// don't allow a fragment to make multiple marks, or they
;158:	// pile up while settling
;159:	le->leMarkType = LEMT_NONE;
ADDRFP4 0
INDIRP4
CNSTI4 144
ADDP4
CNSTI4 0
ASGNI4
line 160
;160:}
LABELV $100
endproc CG_FragmentBounceMark 24 44
export CG_FragmentBounceSound
proc CG_FragmentBounceSound 16 16
line 167
;161:
;162:/*
;163:================
;164:CG_FragmentBounceSound
;165:================
;166:*/
;167:void CG_FragmentBounceSound( localEntity_t *le, trace_t *trace ) {
line 168
;168:	if ( le->leBounceSoundType == LEBS_BLOOD ) {
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 1
NEI4 $116
line 170
;169:		// half the gibs will make splat sounds
;170:		if ( rand() & 1 ) {
ADDRLP4 0
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
EQI4 $117
line 171
;171:			int r = rand()&3;
ADDRLP4 12
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 12
INDIRI4
CNSTI4 3
BANDI4
ASGNI4
line 174
;172:			sfxHandle_t	s;
;173:
;174:			if ( r == 0 ) {
ADDRLP4 4
INDIRI4
CNSTI4 0
NEI4 $120
line 175
;175:				s = cgs.media.gibBounce1Sound;
ADDRLP4 8
ADDRGP4 cgs+148692+696
INDIRI4
ASGNI4
line 176
;176:			} else if ( r == 1 ) {
ADDRGP4 $121
JUMPV
LABELV $120
ADDRLP4 4
INDIRI4
CNSTI4 1
NEI4 $124
line 177
;177:				s = cgs.media.gibBounce2Sound;
ADDRLP4 8
ADDRGP4 cgs+148692+700
INDIRI4
ASGNI4
line 178
;178:			} else {
ADDRGP4 $125
JUMPV
LABELV $124
line 179
;179:				s = cgs.media.gibBounce3Sound;
ADDRLP4 8
ADDRGP4 cgs+148692+704
INDIRI4
ASGNI4
line 180
;180:			}
LABELV $125
LABELV $121
line 181
;181:			trap_S_StartSound( trace->endpos, ENTITYNUM_WORLD, CHAN_AUTO, s );
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
ARGP4
CNSTI4 1022
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 8
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound
CALLV
pop
line 182
;182:		}
line 183
;183:	} else if ( le->leBounceSoundType == LEBS_BRASS ) {
ADDRGP4 $117
JUMPV
LABELV $116
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 2
NEI4 $130
line 185
;184:
;185:	}
LABELV $130
LABELV $117
line 189
;186:
;187:	// don't allow a fragment to make multiple bounce sounds,
;188:	// or it gets too noisy as they settle
;189:	le->leBounceSoundType = LEBS_NONE;
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
CNSTI4 0
ASGNI4
line 190
;190:}
LABELV $115
endproc CG_FragmentBounceSound 16 16
export CG_ReflectVelocity
proc CG_ReflectVelocity 44 12
line 198
;191:
;192:
;193:/*
;194:================
;195:CG_ReflectVelocity
;196:================
;197:*/
;198:void CG_ReflectVelocity( localEntity_t *le, trace_t *trace ) {
line 204
;199:	vec3_t	velocity;
;200:	float	dot;
;201:	int		hitTime;
;202:
;203:	// reflect the velocity on the trace plane
;204:	hitTime = cg.time - cg.frametime + cg.frametime * trace->fraction;
ADDRLP4 16
ADDRGP4 cg+107604
INDIRI4
ADDRGP4 cg+107600
INDIRI4
SUBI4
CVIF4 4
ADDRGP4 cg+107600
INDIRI4
CVIF4 4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDF4
CVFI4 4
ASGNI4
line 205
;205:	BG_EvaluateTrajectoryDelta( &le->pos, hitTime, velocity );
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
ARGP4
ADDRLP4 16
INDIRI4
ARGI4
ADDRLP4 0
ARGP4
ADDRGP4 BG_EvaluateTrajectoryDelta
CALLV
pop
line 206
;206:	dot = DotProduct( velocity, trace->plane.normal );
ADDRLP4 20
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 12
ADDRLP4 0
INDIRF4
ADDRLP4 20
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
MULF4
ADDRLP4 0+4
INDIRF4
ADDRLP4 20
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 0+8
INDIRF4
ADDRLP4 20
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 207
;207:	VectorMA( velocity, -2*dot, trace->plane.normal, le->pos.trDelta );
ADDRFP4 0
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 0
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 12
INDIRF4
CNSTF4 3221225472
MULF4
MULF4
ADDF4
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 0+4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 12
INDIRF4
CNSTF4 3221225472
MULF4
MULF4
ADDF4
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 64
ADDP4
ADDRLP4 0+8
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDRLP4 12
INDIRF4
CNSTF4 3221225472
MULF4
MULF4
ADDF4
ASGNF4
line 209
;208:
;209:	VectorScale( le->pos.trDelta, le->bounceFactor, le->pos.trDelta );
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 24
INDIRP4
CNSTI4 56
ADDP4
INDIRF4
ADDRLP4 24
INDIRP4
CNSTI4 104
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 28
INDIRP4
CNSTI4 60
ADDP4
INDIRF4
ADDRLP4 28
INDIRP4
CNSTI4 104
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
CNSTI4 64
ADDP4
ADDRLP4 32
INDIRP4
CNSTI4 64
ADDP4
INDIRF4
ADDRLP4 32
INDIRP4
CNSTI4 104
ADDP4
INDIRF4
MULF4
ASGNF4
line 211
;210:
;211:	VectorCopy( trace->endpos, le->pos.trBase );
ADDRFP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
INDIRB
ASGNB 12
line 212
;212:	le->pos.trTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 216
;213:
;214:
;215:	// check for stop, making sure that even on low FPS systems it doesn't bobble
;216:	if ( trace->allsolid || 
ADDRLP4 36
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 36
INDIRP4
INDIRI4
CNSTI4 0
NEI4 $145
ADDRLP4 36
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
CNSTF4 0
LEF4 $141
ADDRLP4 40
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 40
INDIRP4
CNSTI4 64
ADDP4
INDIRF4
CNSTF4 1109393408
LTF4 $145
ADDRLP4 40
INDIRP4
CNSTI4 64
ADDP4
INDIRF4
ADDRGP4 cg+107600
INDIRI4
NEGI4
CVIF4 4
ADDRLP4 40
INDIRP4
CNSTI4 64
ADDP4
INDIRF4
MULF4
GEF4 $141
LABELV $145
line 218
;217:		( trace->plane.normal[2] > 0 && 
;218:		( le->pos.trDelta[2] < 40 || le->pos.trDelta[2] < -cg.frametime * le->pos.trDelta[2] ) ) ) {
line 219
;219:		le->pos.trType = TR_STATIONARY;
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 0
ASGNI4
line 220
;220:	} else {
LABELV $141
line 222
;221:
;222:	}
LABELV $142
line 223
;223:}
LABELV $132
endproc CG_ReflectVelocity 44 12
proc CG_AddFragment 88 28
line 230
;224:
;225:/*
;226:================
;227:CG_AddFragment
;228:================
;229:*/
;230:static void CG_AddFragment( localEntity_t *le ) {
line 234
;231:	vec3_t	newOrigin;
;232:	trace_t	trace;
;233:
;234:	if ( le->pos.trType == TR_STATIONARY ) {
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
CNSTI4 0
NEI4 $147
line 239
;235:		// sink into the ground if near the removal time
;236:		int		t;
;237:		float	oldZ;
;238:		
;239:		t = le->endTime - cg.time;
ADDRLP4 68
ADDRFP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
ASGNI4
line 240
;240:		if ( t < SINK_TIME ) {
ADDRLP4 68
INDIRI4
CNSTI4 1000
GEI4 $150
line 244
;241:			// we must use an explicit lighting origin, otherwise the
;242:			// lighting would be lost as soon as the origin went
;243:			// into the ground
;244:			VectorCopy( le->refEntity.origin, le->refEntity.lightingOrigin );
ADDRLP4 76
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 76
INDIRP4
CNSTI4 164
ADDP4
ADDRLP4 76
INDIRP4
CNSTI4 220
ADDP4
INDIRB
ASGNB 12
line 245
;245:			le->refEntity.renderfx |= RF_LIGHTING_ORIGIN;
ADDRLP4 80
ADDRFP4 0
INDIRP4
CNSTI4 156
ADDP4
ASGNP4
ADDRLP4 80
INDIRP4
ADDRLP4 80
INDIRP4
INDIRI4
CNSTI4 128
BORI4
ASGNI4
line 246
;246:			oldZ = le->refEntity.origin[2];
ADDRLP4 72
ADDRFP4 0
INDIRP4
CNSTI4 228
ADDP4
INDIRF4
ASGNF4
line 247
;247:			le->refEntity.origin[2] -= 16 * ( 1.0 - (float)t / SINK_TIME );
ADDRLP4 84
ADDRFP4 0
INDIRP4
CNSTI4 228
ADDP4
ASGNP4
ADDRLP4 84
INDIRP4
ADDRLP4 84
INDIRP4
INDIRF4
CNSTF4 1065353216
ADDRLP4 68
INDIRI4
CVIF4 4
CNSTF4 981668463
MULF4
SUBF4
CNSTF4 1098907648
MULF4
SUBF4
ASGNF4
line 249
;248://freeze
;249:			CG_AddGib( le );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_AddGib
CALLV
pop
line 251
;250://freeze
;251:			trap_R_AddRefEntityToScene( &le->refEntity );
ADDRFP4 0
INDIRP4
CNSTI4 152
ADDP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 252
;252:			le->refEntity.origin[2] = oldZ;
ADDRFP4 0
INDIRP4
CNSTI4 228
ADDP4
ADDRLP4 72
INDIRF4
ASGNF4
line 253
;253:		} else {
ADDRGP4 $146
JUMPV
LABELV $150
line 255
;254://freeze
;255:			CG_AddGib( le );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_AddGib
CALLV
pop
line 257
;256://freeze
;257:			trap_R_AddRefEntityToScene( &le->refEntity );
ADDRFP4 0
INDIRP4
CNSTI4 152
ADDP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 258
;258:		}
line 260
;259:
;260:		return;
ADDRGP4 $146
JUMPV
LABELV $147
line 264
;261:	}
;262:
;263:	// calculate new position
;264:	BG_EvaluateTrajectory( &le->pos, cg.time, newOrigin );
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
ARGP4
ADDRGP4 cg+107604
INDIRI4
ARGI4
ADDRLP4 56
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 267
;265:
;266:	// trace a line from previous position to new position
;267:	CG_Trace( &trace, le->refEntity.origin, NULL, NULL, newOrigin, -1, CONTENTS_SOLID );
ADDRLP4 0
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 220
ADDP4
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
ADDRLP4 56
ARGP4
CNSTI4 -1
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 CG_Trace
CALLV
pop
line 268
;268:	if ( trace.fraction == 1.0 ) {
ADDRLP4 0+8
INDIRF4
CNSTF4 1065353216
NEF4 $153
line 270
;269:		// still in free fall
;270:		VectorCopy( newOrigin, le->refEntity.origin );
ADDRFP4 0
INDIRP4
CNSTI4 220
ADDP4
ADDRLP4 56
INDIRB
ASGNB 12
line 272
;271:
;272:		if ( le->leFlags & LEF_TUMBLE ) {
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 2
BANDI4
CNSTI4 0
EQI4 $156
line 275
;273:			vec3_t angles;
;274:
;275:			BG_EvaluateTrajectory( &le->angles, cg.time, angles );
ADDRFP4 0
INDIRP4
CNSTI4 68
ADDP4
ARGP4
ADDRGP4 cg+107604
INDIRI4
ARGI4
ADDRLP4 68
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 276
;276:			AnglesToAxis( angles, le->refEntity.axis );
ADDRLP4 68
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 180
ADDP4
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 277
;277:		}
LABELV $156
line 280
;278:
;279://freeze
;280:		CG_AddGib( le );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_AddGib
CALLV
pop
line 282
;281://freeze
;282:		trap_R_AddRefEntityToScene( &le->refEntity );
ADDRFP4 0
INDIRP4
CNSTI4 152
ADDP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 285
;283:
;284:		// add a blood trail
;285:		if ( le->leBounceSoundType == LEBS_BLOOD ) {
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 1
NEI4 $146
line 286
;286:			CG_BloodTrail( le );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_BloodTrail
CALLV
pop
line 287
;287:		}
line 289
;288:
;289:		return;
ADDRGP4 $146
JUMPV
LABELV $153
line 295
;290:	}
;291:
;292:	// if it is in a nodrop zone, remove it
;293:	// this keeps gibs from waiting at the bottom of pits of death
;294:	// and floating levels
;295:	if ( CG_PointContents( trace.endpos, 0 ) & CONTENTS_NODROP ) {
ADDRLP4 0+12
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 68
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 68
INDIRI4
CVIU4 4
CNSTU4 2147483648
BANDU4
CNSTU4 0
EQU4 $161
line 296
;296:		CG_FreeLocalEntity( le );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_FreeLocalEntity
CALLV
pop
line 297
;297:		return;
ADDRGP4 $146
JUMPV
LABELV $161
line 301
;298:	}
;299:
;300:	// leave a mark
;301:	CG_FragmentBounceMark( le, &trace );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 CG_FragmentBounceMark
CALLV
pop
line 304
;302:
;303:	// do a bouncy sound
;304:	CG_FragmentBounceSound( le, &trace );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 CG_FragmentBounceSound
CALLV
pop
line 307
;305:
;306:	// reflect the velocity on the trace plane
;307:	CG_ReflectVelocity( le, &trace );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 CG_ReflectVelocity
CALLV
pop
line 310
;308:
;309://freeze
;310:	CG_AddGib( le );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_AddGib
CALLV
pop
line 312
;311://freeze
;312:	trap_R_AddRefEntityToScene( &le->refEntity );
ADDRFP4 0
INDIRP4
CNSTI4 152
ADDP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 313
;313:}
LABELV $146
endproc CG_AddFragment 88 28
proc CG_AddFadeRGB 60 24
line 329
;314:
;315:/*
;316:=====================================================================
;317:
;318:TRIVIAL LOCAL ENTITIES
;319:
;320:These only do simple scaling or modulation before passing to the renderer
;321:=====================================================================
;322:*/
;323:
;324:/*
;325:====================
;326:CG_AddFadeRGB
;327:====================
;328:*/
;329:static void CG_AddFadeRGB( localEntity_t *le ) {
line 333
;330:	refEntity_t *re;
;331:	float c;
;332:
;333:	re = &le->refEntity;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 335
;334:
;335:	c = ( le->endTime - cg.time ) * le->lifeRate;
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 8
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
CVIF4 4
ADDRLP4 8
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
MULF4
ASGNF4
line 337
;336:
;337:	if ( re->reType == RT_RAIL_CORE && cg_railTrailRadius.integer && linearLight ) {
ADDRLP4 0
INDIRP4
INDIRI4
CNSTI4 4
NEI4 $166
ADDRGP4 cg_railTrailRadius+12
INDIRI4
CNSTI4 0
EQI4 $166
ADDRGP4 linearLight
INDIRI4
CNSTI4 0
EQI4 $166
line 338
;338:		trap_R_AddLinearLightToScene( re->origin, re->oldorigin, cg_railTrailRadius.value, le->color[0]*c, le->color[1]*c, le->color[2]*c );
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
ARGP4
ADDRGP4 cg_railTrailRadius+8
INDIRF4
ARGF4
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
CNSTI4 108
ADDP4
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ARGF4
ADDRLP4 16
INDIRP4
CNSTI4 112
ADDP4
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ARGF4
ADDRLP4 16
INDIRP4
CNSTI4 116
ADDP4
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ARGF4
ADDRGP4 trap_R_AddLinearLightToScene
INDIRP4
CALLV
pop
line 339
;339:	}
LABELV $166
line 341
;340:
;341:	c *= 0xff;
ADDRLP4 4
ADDRLP4 4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
line 343
;342:
;343:	re->shaderRGBA[0] = le->color[0] * c;
ADDRLP4 16
ADDRFP4 0
INDIRP4
CNSTI4 108
ADDP4
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ASGNF4
ADDRLP4 20
CNSTF4 1325400064
ASGNF4
ADDRLP4 16
INDIRF4
ADDRLP4 20
INDIRF4
LTF4 $171
ADDRLP4 12
ADDRLP4 16
INDIRF4
ADDRLP4 20
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $172
JUMPV
LABELV $171
ADDRLP4 12
ADDRLP4 16
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $172
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 12
INDIRU4
CVUU1 4
ASGNU1
line 344
;344:	re->shaderRGBA[1] = le->color[1] * c;
ADDRLP4 28
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ASGNF4
ADDRLP4 32
CNSTF4 1325400064
ASGNF4
ADDRLP4 28
INDIRF4
ADDRLP4 32
INDIRF4
LTF4 $174
ADDRLP4 24
ADDRLP4 28
INDIRF4
ADDRLP4 32
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $175
JUMPV
LABELV $174
ADDRLP4 24
ADDRLP4 28
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $175
ADDRLP4 0
INDIRP4
CNSTI4 117
ADDP4
ADDRLP4 24
INDIRU4
CVUU1 4
ASGNU1
line 345
;345:	re->shaderRGBA[2] = le->color[2] * c;
ADDRLP4 40
ADDRFP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ASGNF4
ADDRLP4 44
CNSTF4 1325400064
ASGNF4
ADDRLP4 40
INDIRF4
ADDRLP4 44
INDIRF4
LTF4 $177
ADDRLP4 36
ADDRLP4 40
INDIRF4
ADDRLP4 44
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $178
JUMPV
LABELV $177
ADDRLP4 36
ADDRLP4 40
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $178
ADDRLP4 0
INDIRP4
CNSTI4 118
ADDP4
ADDRLP4 36
INDIRU4
CVUU1 4
ASGNU1
line 346
;346:	re->shaderRGBA[3] = le->color[3] * c;
ADDRLP4 52
ADDRFP4 0
INDIRP4
CNSTI4 120
ADDP4
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ASGNF4
ADDRLP4 56
CNSTF4 1325400064
ASGNF4
ADDRLP4 52
INDIRF4
ADDRLP4 56
INDIRF4
LTF4 $180
ADDRLP4 48
ADDRLP4 52
INDIRF4
ADDRLP4 56
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $181
JUMPV
LABELV $180
ADDRLP4 48
ADDRLP4 52
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $181
ADDRLP4 0
INDIRP4
CNSTI4 119
ADDP4
ADDRLP4 48
INDIRU4
CVUU1 4
ASGNU1
line 348
;347:
;348:	if ( intShaderTime )
ADDRGP4 intShaderTime
INDIRI4
CNSTI4 0
EQI4 $182
line 349
;349:		trap_R_AddRefEntityToScene2( re );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene2
INDIRP4
CALLV
pop
ADDRGP4 $183
JUMPV
LABELV $182
line 351
;350:	else
;351:		trap_R_AddRefEntityToScene( re );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
LABELV $183
line 352
;352:}
LABELV $164
endproc CG_AddFadeRGB 60 24
proc CG_AddMoveScaleFade 48 12
line 360
;353:
;354:
;355:/*
;356:==================
;357:CG_AddMoveScaleFade
;358:==================
;359:*/
;360:static void CG_AddMoveScaleFade( localEntity_t *le ) {
line 366
;361:	refEntity_t	*re;
;362:	float		c;
;363:	vec3_t		delta;
;364:	float		len;
;365:
;366:	re = &le->refEntity;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 368
;367:
;368:	if ( le->fadeInTime > le->startTime && cg.time < le->fadeInTime ) {
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
CNSTI4 24
ADDP4
INDIRI4
ADDRLP4 24
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
LEI4 $185
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 24
INDIRP4
CNSTI4 24
ADDP4
INDIRI4
GEI4 $185
line 370
;369:		// fade / grow time
;370:		c = 1.0 - (float) ( le->fadeInTime - cg.time ) / ( le->fadeInTime - le->startTime );
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
CNSTF4 1065353216
ADDRLP4 28
INDIRP4
CNSTI4 24
ADDP4
INDIRI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
CVIF4 4
ADDRLP4 28
INDIRP4
CNSTI4 24
ADDP4
INDIRI4
ADDRLP4 28
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
CVIF4 4
DIVF4
SUBF4
ASGNF4
line 371
;371:	}
ADDRGP4 $186
JUMPV
LABELV $185
line 372
;372:	else {
line 374
;373:		// fade / grow time
;374:		c = ( le->endTime - cg.time ) * le->lifeRate;
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
ADDRLP4 28
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
CVIF4 4
ADDRLP4 28
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
MULF4
ASGNF4
line 375
;375:	}
LABELV $186
line 377
;376:
;377:	re->shaderRGBA[3] = 0xff * c * le->color[3];
ADDRLP4 32
ADDRLP4 16
INDIRF4
CNSTF4 1132396544
MULF4
ADDRFP4 0
INDIRP4
CNSTI4 120
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 36
CNSTF4 1325400064
ASGNF4
ADDRLP4 32
INDIRF4
ADDRLP4 36
INDIRF4
LTF4 $191
ADDRLP4 28
ADDRLP4 32
INDIRF4
ADDRLP4 36
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $192
JUMPV
LABELV $191
ADDRLP4 28
ADDRLP4 32
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $192
ADDRLP4 0
INDIRP4
CNSTI4 119
ADDP4
ADDRLP4 28
INDIRU4
CVUU1 4
ASGNU1
line 379
;378:
;379:	if ( !( le->leFlags & LEF_PUFF_DONT_SCALE ) ) {
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
NEI4 $193
line 380
;380:		re->radius = le->radius * ( 1.0 - c ) + 8;
ADDRLP4 0
INDIRP4
CNSTI4 132
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 124
ADDP4
INDIRF4
CNSTF4 1065353216
ADDRLP4 16
INDIRF4
SUBF4
MULF4
CNSTF4 1090519040
ADDF4
ASGNF4
line 381
;381:	}
LABELV $193
line 383
;382:
;383:	BG_EvaluateTrajectory( &le->pos, cg.time, re->origin );
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
ARGP4
ADDRGP4 cg+107604
INDIRI4
ARGI4
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 387
;384:
;385:	// if the view would be "inside" the sprite, kill the sprite
;386:	// so it doesn't add too much overdraw
;387:	VectorSubtract( re->origin, cg.refdef.vieworg, delta );
ADDRLP4 4
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
INDIRF4
ADDRGP4 cg+109056+24
INDIRF4
SUBF4
ASGNF4
ADDRLP4 4+4
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
ADDRGP4 cg+109056+24+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 4+8
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
ADDRGP4 cg+109056+24+8
INDIRF4
SUBF4
ASGNF4
line 388
;388:	len = VectorLength( delta );
ADDRLP4 4
ARGP4
ADDRLP4 44
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 20
ADDRLP4 44
INDIRF4
ASGNF4
line 389
;389:	if ( len < le->radius ) {
ADDRLP4 20
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 124
ADDP4
INDIRF4
GEF4 $206
line 390
;390:		CG_FreeLocalEntity( le );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_FreeLocalEntity
CALLV
pop
line 391
;391:		return;
ADDRGP4 $184
JUMPV
LABELV $206
line 394
;392:	}
;393:
;394:	if ( intShaderTime )
ADDRGP4 intShaderTime
INDIRI4
CNSTI4 0
EQI4 $208
line 395
;395:		trap_R_AddRefEntityToScene2( re );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene2
INDIRP4
CALLV
pop
ADDRGP4 $209
JUMPV
LABELV $208
line 397
;396:	else
;397:		trap_R_AddRefEntityToScene( re );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
LABELV $209
line 398
;398:}
LABELV $184
endproc CG_AddMoveScaleFade 48 12
proc CG_EmitPolyVerts 176 12
line 407
;399:
;400:
;401:/*
;402:===================
;403:CG_EmitPolyVerts
;404:===================
;405:*/
;406:static void CG_EmitPolyVerts( const refEntity_t *re )
;407:{
line 414
;408:	polyVert_t	verts[4];
;409:	float		sinR, cosR;
;410:	float		angle;
;411:	vec3_t		left, up;
;412:	int			i;
;413:
;414:	if ( re->rotation )
ADDRFP4 0
INDIRP4
CNSTI4 136
ADDP4
INDIRF4
CNSTF4 0
EQF4 $211
line 415
;415:	{
line 416
;416:		angle = M_PI * re->rotation / 180.0;
ADDRLP4 132
ADDRFP4 0
INDIRP4
CNSTI4 136
ADDP4
INDIRF4
CNSTF4 1016003125
MULF4
ASGNF4
line 417
;417:		sinR = sin( angle );
ADDRLP4 132
INDIRF4
ARGF4
ADDRLP4 136
ADDRGP4 sin
CALLF4
ASGNF4
ADDRLP4 124
ADDRLP4 136
INDIRF4
ASGNF4
line 418
;418:		cosR = cos( angle );
ADDRLP4 132
INDIRF4
ARGF4
ADDRLP4 140
ADDRGP4 cos
CALLF4
ASGNF4
ADDRLP4 128
ADDRLP4 140
INDIRF4
ASGNF4
line 420
;419:
;420:		VectorScale( cg.refdef.viewaxis[1], cosR * re->radius, left );
ADDRLP4 148
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 100
ADDRGP4 cg+109056+36+12
INDIRF4
ADDRLP4 128
INDIRF4
ADDRLP4 148
INDIRP4
CNSTI4 132
ADDP4
INDIRF4
MULF4
MULF4
ASGNF4
ADDRLP4 100+4
ADDRGP4 cg+109056+36+12+4
INDIRF4
ADDRLP4 128
INDIRF4
ADDRLP4 148
INDIRP4
CNSTI4 132
ADDP4
INDIRF4
MULF4
MULF4
ASGNF4
ADDRLP4 100+8
ADDRGP4 cg+109056+36+12+8
INDIRF4
ADDRLP4 128
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 132
ADDP4
INDIRF4
MULF4
MULF4
ASGNF4
line 421
;421:		VectorMA( left, -sinR * re->radius, cg.refdef.viewaxis[2], left );
ADDRLP4 152
ADDRLP4 124
INDIRF4
NEGF4
ASGNF4
ADDRLP4 156
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 100
ADDRLP4 100
INDIRF4
ADDRGP4 cg+109056+36+24
INDIRF4
ADDRLP4 152
INDIRF4
ADDRLP4 156
INDIRP4
CNSTI4 132
ADDP4
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 100+4
ADDRLP4 100+4
INDIRF4
ADDRGP4 cg+109056+36+24+4
INDIRF4
ADDRLP4 152
INDIRF4
ADDRLP4 156
INDIRP4
CNSTI4 132
ADDP4
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 100+8
ADDRLP4 100+8
INDIRF4
ADDRGP4 cg+109056+36+24+8
INDIRF4
ADDRLP4 124
INDIRF4
NEGF4
ADDRFP4 0
INDIRP4
CNSTI4 132
ADDP4
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
line 423
;422:
;423:		VectorScale( cg.refdef.viewaxis[2], cosR * re->radius, up );
ADDRLP4 164
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 112
ADDRGP4 cg+109056+36+24
INDIRF4
ADDRLP4 128
INDIRF4
ADDRLP4 164
INDIRP4
CNSTI4 132
ADDP4
INDIRF4
MULF4
MULF4
ASGNF4
ADDRLP4 112+4
ADDRGP4 cg+109056+36+24+4
INDIRF4
ADDRLP4 128
INDIRF4
ADDRLP4 164
INDIRP4
CNSTI4 132
ADDP4
INDIRF4
MULF4
MULF4
ASGNF4
ADDRLP4 112+8
ADDRGP4 cg+109056+36+24+8
INDIRF4
ADDRLP4 128
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 132
ADDP4
INDIRF4
MULF4
MULF4
ASGNF4
line 424
;424:		VectorMA( up, sinR * re->radius, cg.refdef.viewaxis[1], up );
ADDRLP4 172
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 112
ADDRLP4 112
INDIRF4
ADDRGP4 cg+109056+36+12
INDIRF4
ADDRLP4 124
INDIRF4
ADDRLP4 172
INDIRP4
CNSTI4 132
ADDP4
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 112+4
ADDRLP4 112+4
INDIRF4
ADDRGP4 cg+109056+36+12+4
INDIRF4
ADDRLP4 124
INDIRF4
ADDRLP4 172
INDIRP4
CNSTI4 132
ADDP4
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 112+8
ADDRLP4 112+8
INDIRF4
ADDRGP4 cg+109056+36+12+8
INDIRF4
ADDRLP4 124
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 132
ADDP4
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
line 425
;425:	}
ADDRGP4 $212
JUMPV
LABELV $211
line 427
;426:	else
;427:	{
line 428
;428:		VectorScale( cg.refdef.viewaxis[1], re->radius, left );
ADDRLP4 136
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 100
ADDRGP4 cg+109056+36+12
INDIRF4
ADDRLP4 136
INDIRP4
CNSTI4 132
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 100+4
ADDRGP4 cg+109056+36+12+4
INDIRF4
ADDRLP4 136
INDIRP4
CNSTI4 132
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 100+8
ADDRGP4 cg+109056+36+12+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 132
ADDP4
INDIRF4
MULF4
ASGNF4
line 429
;429:		VectorScale( cg.refdef.viewaxis[2], re->radius, up );
ADDRLP4 140
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 112
ADDRGP4 cg+109056+36+24
INDIRF4
ADDRLP4 140
INDIRP4
CNSTI4 132
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 112+4
ADDRGP4 cg+109056+36+24+4
INDIRF4
ADDRLP4 140
INDIRP4
CNSTI4 132
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 112+8
ADDRGP4 cg+109056+36+24+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 132
ADDP4
INDIRF4
MULF4
ASGNF4
line 430
;430:	}
LABELV $212
line 432
;431:
;432:	verts[0].xyz[0] = re->origin[0] + left[0] + up[0];
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 68
ADDP4
INDIRF4
ADDRLP4 100
INDIRF4
ADDF4
ADDRLP4 112
INDIRF4
ADDF4
ASGNF4
line 433
;433:	verts[0].xyz[1] = re->origin[1] + left[1] + up[1];
ADDRLP4 0+4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
ADDRLP4 100+4
INDIRF4
ADDF4
ADDRLP4 112+4
INDIRF4
ADDF4
ASGNF4
line 434
;434:	verts[0].xyz[2] = re->origin[2] + left[2] + up[2];
ADDRLP4 0+8
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
ADDRLP4 100+8
INDIRF4
ADDF4
ADDRLP4 112+8
INDIRF4
ADDF4
ASGNF4
line 435
;435:	verts[0].st[0] = 0.0;
ADDRLP4 0+12
CNSTF4 0
ASGNF4
line 436
;436:	verts[0].st[1] = 0.0;
ADDRLP4 0+12+4
CNSTF4 0
ASGNF4
line 438
;437:
;438:	verts[1].xyz[0] = re->origin[0] - left[0] + up[0];
ADDRLP4 0+24
ADDRFP4 0
INDIRP4
CNSTI4 68
ADDP4
INDIRF4
ADDRLP4 100
INDIRF4
SUBF4
ADDRLP4 112
INDIRF4
ADDF4
ASGNF4
line 439
;439:	verts[1].xyz[1] = re->origin[1] - left[1] + up[1];
ADDRLP4 0+24+4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
ADDRLP4 100+4
INDIRF4
SUBF4
ADDRLP4 112+4
INDIRF4
ADDF4
ASGNF4
line 440
;440:	verts[1].xyz[2] = re->origin[2] - left[2] + up[2];
ADDRLP4 0+24+8
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
ADDRLP4 100+8
INDIRF4
SUBF4
ADDRLP4 112+8
INDIRF4
ADDF4
ASGNF4
line 441
;441:	verts[1].st[0] = 1.0;
ADDRLP4 0+24+12
CNSTF4 1065353216
ASGNF4
line 442
;442:	verts[1].st[1] = 0.0;
ADDRLP4 0+24+12+4
CNSTF4 0
ASGNF4
line 444
;443:
;444:	verts[2].xyz[0] = re->origin[0] - left[0] - up[0];
ADDRLP4 0+48
ADDRFP4 0
INDIRP4
CNSTI4 68
ADDP4
INDIRF4
ADDRLP4 100
INDIRF4
SUBF4
ADDRLP4 112
INDIRF4
SUBF4
ASGNF4
line 445
;445:	verts[2].xyz[1] = re->origin[1] - left[1] - up[1];
ADDRLP4 0+48+4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
ADDRLP4 100+4
INDIRF4
SUBF4
ADDRLP4 112+4
INDIRF4
SUBF4
ASGNF4
line 446
;446:	verts[2].xyz[2] = re->origin[2] - left[2] - up[2];
ADDRLP4 0+48+8
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
ADDRLP4 100+8
INDIRF4
SUBF4
ADDRLP4 112+8
INDIRF4
SUBF4
ASGNF4
line 447
;447:	verts[2].st[0] = 1.0;
ADDRLP4 0+48+12
CNSTF4 1065353216
ASGNF4
line 448
;448:	verts[2].st[1] = 1.0;
ADDRLP4 0+48+12+4
CNSTF4 1065353216
ASGNF4
line 450
;449:
;450:	verts[3].xyz[0] = re->origin[0] + left[0] - up[0];
ADDRLP4 0+72
ADDRFP4 0
INDIRP4
CNSTI4 68
ADDP4
INDIRF4
ADDRLP4 100
INDIRF4
ADDF4
ADDRLP4 112
INDIRF4
SUBF4
ASGNF4
line 451
;451:	verts[3].xyz[1] = re->origin[1] + left[1] - up[1];
ADDRLP4 0+72+4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
ADDRLP4 100+4
INDIRF4
ADDF4
ADDRLP4 112+4
INDIRF4
SUBF4
ASGNF4
line 452
;452:	verts[3].xyz[2] = re->origin[2] + left[2] - up[2];
ADDRLP4 0+72+8
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
ADDRLP4 100+8
INDIRF4
ADDF4
ADDRLP4 112+8
INDIRF4
SUBF4
ASGNF4
line 453
;453:	verts[3].st[0] = 0.0;
ADDRLP4 0+72+12
CNSTF4 0
ASGNF4
line 454
;454:	verts[3].st[1] = 1.0;
ADDRLP4 0+72+12+4
CNSTF4 1065353216
ASGNF4
line 456
;455:
;456:	for ( i = 0; i < 4; i++ )
ADDRLP4 96
CNSTI4 0
ASGNI4
LABELV $346
line 457
;457:	{
line 458
;458:		verts[i].modulate[0] = re->shaderRGBA[0];
ADDRLP4 96
INDIRI4
CNSTI4 24
MULI4
ADDRLP4 0+20
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRU1
ASGNU1
line 459
;459:		verts[i].modulate[1] = re->shaderRGBA[1];
ADDRLP4 96
INDIRI4
CNSTI4 24
MULI4
ADDRLP4 0+20+1
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 117
ADDP4
INDIRU1
ASGNU1
line 460
;460:		verts[i].modulate[2] = re->shaderRGBA[2];
ADDRLP4 96
INDIRI4
CNSTI4 24
MULI4
ADDRLP4 0+20+2
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 118
ADDP4
INDIRU1
ASGNU1
line 461
;461:		verts[i].modulate[3] = re->shaderRGBA[3];
ADDRLP4 96
INDIRI4
CNSTI4 24
MULI4
ADDRLP4 0+20+3
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 119
ADDP4
INDIRU1
ASGNU1
line 462
;462:	}
LABELV $347
line 456
ADDRLP4 96
ADDRLP4 96
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 96
INDIRI4
CNSTI4 4
LTI4 $346
line 464
;463:
;464:	trap_R_AddPolyToScene( re->customShader, 4, verts );
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
INDIRI4
ARGI4
CNSTI4 4
ARGI4
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddPolyToScene
CALLV
pop
line 465
;465:}
LABELV $210
endproc CG_EmitPolyVerts 176 12
proc CG_AddScaleFade 52 4
line 477
;466:
;467:
;468:/*
;469:===================
;470:CG_AddScaleFade
;471:
;472:For rocket smokes that hang in place, fade out, and are
;473:removed if the view passes through them.
;474:There are often many of these, so it needs to be simple.
;475:===================
;476:*/
;477:static void CG_AddScaleFade( localEntity_t *le ) {
line 483
;478:	refEntity_t	*re;
;479:	float		c;
;480:	vec3_t		delta;
;481:	float		len;
;482:
;483:	re = &le->refEntity;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 486
;484:
;485:	// fade / grow time
;486:	c = ( le->endTime - cg.time ) * le->lifeRate;
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
ADDRLP4 24
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
CVIF4 4
ADDRLP4 24
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
MULF4
ASGNF4
line 488
;487:
;488:	re->shaderRGBA[3] = 0xff * c * le->color[3];
ADDRLP4 32
ADDRLP4 16
INDIRF4
CNSTF4 1132396544
MULF4
ADDRFP4 0
INDIRP4
CNSTI4 120
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 36
CNSTF4 1325400064
ASGNF4
ADDRLP4 32
INDIRF4
ADDRLP4 36
INDIRF4
LTF4 $360
ADDRLP4 28
ADDRLP4 32
INDIRF4
ADDRLP4 36
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $361
JUMPV
LABELV $360
ADDRLP4 28
ADDRLP4 32
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $361
ADDRLP4 0
INDIRP4
CNSTI4 119
ADDP4
ADDRLP4 28
INDIRU4
CVUU1 4
ASGNU1
line 489
;489:	re->radius = le->radius * ( 1.0 - c ) + 8;
ADDRLP4 0
INDIRP4
CNSTI4 132
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 124
ADDP4
INDIRF4
CNSTF4 1065353216
ADDRLP4 16
INDIRF4
SUBF4
MULF4
CNSTF4 1090519040
ADDF4
ASGNF4
line 493
;490:
;491:	// if the view would be "inside" the sprite, kill the sprite
;492:	// so it doesn't add too much overdraw
;493:	VectorSubtract( re->origin, cg.refdef.vieworg, delta );
ADDRLP4 4
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
INDIRF4
ADDRGP4 cg+109056+24
INDIRF4
SUBF4
ASGNF4
ADDRLP4 4+4
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
ADDRGP4 cg+109056+24+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 4+8
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
ADDRGP4 cg+109056+24+8
INDIRF4
SUBF4
ASGNF4
line 494
;494:	len = VectorLengthSquared( delta );
ADDRLP4 4
ARGP4
ADDRLP4 44
ADDRGP4 VectorLengthSquared
CALLF4
ASGNF4
ADDRLP4 20
ADDRLP4 44
INDIRF4
ASGNF4
line 495
;495:	if ( len < le->radius * le->radius ) {
ADDRLP4 48
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
INDIRF4
ADDRLP4 48
INDIRP4
CNSTI4 124
ADDP4
INDIRF4
ADDRLP4 48
INDIRP4
CNSTI4 124
ADDP4
INDIRF4
MULF4
GEF4 $372
line 496
;496:		CG_FreeLocalEntity( le );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_FreeLocalEntity
CALLV
pop
line 497
;497:		return;
ADDRGP4 $357
JUMPV
LABELV $372
line 500
;498:	}
;499:#if 1
;500:	CG_EmitPolyVerts( re );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_EmitPolyVerts
CALLV
pop
line 504
;501:#else
;502:	trap_R_AddRefEntityToScene( re );
;503:#endif
;504:}
LABELV $357
endproc CG_AddScaleFade 52 4
proc CG_AddFallScaleFade 56 4
line 517
;505:
;506:
;507:/*
;508:=================
;509:CG_AddFallScaleFade
;510:
;511:This is just an optimized CG_AddMoveScaleFade
;512:For blood mists that drift down, fade out, and are
;513:removed if the view passes through them.
;514:There are often 100+ of these, so it needs to be simple.
;515:=================
;516:*/
;517:static void CG_AddFallScaleFade( localEntity_t *le ) {
line 523
;518:	refEntity_t	*re;
;519:	float		c;
;520:	vec3_t		delta;
;521:	float		len;
;522:
;523:	re = &le->refEntity;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 526
;524:
;525:	// fade time
;526:	c = ( le->endTime - cg.time ) * le->lifeRate;
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 24
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
CVIF4 4
ADDRLP4 24
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
MULF4
ASGNF4
line 528
;527:
;528:	re->shaderRGBA[3] = 0xff * c * le->color[3];
ADDRLP4 32
ADDRLP4 4
INDIRF4
CNSTF4 1132396544
MULF4
ADDRFP4 0
INDIRP4
CNSTI4 120
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 36
CNSTF4 1325400064
ASGNF4
ADDRLP4 32
INDIRF4
ADDRLP4 36
INDIRF4
LTF4 $377
ADDRLP4 28
ADDRLP4 32
INDIRF4
ADDRLP4 36
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $378
JUMPV
LABELV $377
ADDRLP4 28
ADDRLP4 32
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $378
ADDRLP4 0
INDIRP4
CNSTI4 119
ADDP4
ADDRLP4 28
INDIRU4
CVUU1 4
ASGNU1
line 530
;529:
;530:	re->origin[2] = le->pos.trBase[2] - ( 1.0 - c ) * le->pos.trDelta[2];
ADDRLP4 40
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
ADDRLP4 40
INDIRP4
CNSTI4 52
ADDP4
INDIRF4
CNSTF4 1065353216
ADDRLP4 4
INDIRF4
SUBF4
ADDRLP4 40
INDIRP4
CNSTI4 64
ADDP4
INDIRF4
MULF4
SUBF4
ASGNF4
line 532
;531:
;532:	re->radius = le->radius * ( 1.0 - c ) + 16;
ADDRLP4 0
INDIRP4
CNSTI4 132
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 124
ADDP4
INDIRF4
CNSTF4 1065353216
ADDRLP4 4
INDIRF4
SUBF4
MULF4
CNSTF4 1098907648
ADDF4
ASGNF4
line 536
;533:
;534:	// if the view would be "inside" the sprite, kill the sprite
;535:	// so it doesn't add too much overdraw
;536:	VectorSubtract( re->origin, cg.refdef.vieworg, delta );
ADDRLP4 8
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
INDIRF4
ADDRGP4 cg+109056+24
INDIRF4
SUBF4
ASGNF4
ADDRLP4 8+4
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
ADDRGP4 cg+109056+24+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 8+8
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
ADDRGP4 cg+109056+24+8
INDIRF4
SUBF4
ASGNF4
line 537
;537:	len = VectorLengthSquared( delta );
ADDRLP4 8
ARGP4
ADDRLP4 48
ADDRGP4 VectorLengthSquared
CALLF4
ASGNF4
ADDRLP4 20
ADDRLP4 48
INDIRF4
ASGNF4
line 538
;538:	if ( len < le->radius * le->radius ) {
ADDRLP4 52
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
INDIRF4
ADDRLP4 52
INDIRP4
CNSTI4 124
ADDP4
INDIRF4
ADDRLP4 52
INDIRP4
CNSTI4 124
ADDP4
INDIRF4
MULF4
GEF4 $389
line 539
;539:		CG_FreeLocalEntity( le );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_FreeLocalEntity
CALLV
pop
line 540
;540:		return;
ADDRGP4 $374
JUMPV
LABELV $389
line 543
;541:	}
;542:#if 1
;543:	CG_EmitPolyVerts( re );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_EmitPolyVerts
CALLV
pop
line 547
;544:#else
;545:	trap_R_AddRefEntityToScene( re );
;546:#endif
;547:}
LABELV $374
endproc CG_AddFallScaleFade 56 4
proc CG_AddExplosion 16 20
line 555
;548:
;549:
;550:/*
;551:================
;552:CG_AddExplosion
;553:================
;554:*/
;555:static void CG_AddExplosion( localEntity_t *ex ) {
line 558
;556:	refEntity_t	*ent;
;557:
;558:	ent = &ex->refEntity;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 561
;559:
;560:	// add the entity
;561:	if ( intShaderTime )
ADDRGP4 intShaderTime
INDIRI4
CNSTI4 0
EQI4 $392
line 562
;562:		trap_R_AddRefEntityToScene2( ent );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene2
INDIRP4
CALLV
pop
ADDRGP4 $393
JUMPV
LABELV $392
line 564
;563:	else
;564:		trap_R_AddRefEntityToScene( ent );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
LABELV $393
line 567
;565:
;566:	// add the dlight
;567:	if ( ex->light ) {
ADDRFP4 0
INDIRP4
CNSTI4 128
ADDP4
INDIRF4
CNSTF4 0
EQF4 $394
line 570
;568:		float		light;
;569:
;570:		light = (float)( cg.time - ex->startTime ) / ( ex->endTime - ex->startTime );
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 8
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
CVIF4 4
ADDRLP4 8
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 8
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 571
;571:		if ( light < 0.5 ) {
ADDRLP4 4
INDIRF4
CNSTF4 1056964608
GEF4 $397
line 572
;572:			light = 1.0;
ADDRLP4 4
CNSTF4 1065353216
ASGNF4
line 573
;573:		} else {
ADDRGP4 $398
JUMPV
LABELV $397
line 574
;574:			light = 1.0 - ( light - 0.5 ) * 2;
ADDRLP4 4
CNSTF4 1065353216
ADDRLP4 4
INDIRF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
SUBF4
ASGNF4
line 575
;575:		}
LABELV $398
line 576
;576:		light = ex->light * light;
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 128
ADDP4
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ASGNF4
line 577
;577:		trap_R_AddLightToScene(ent->origin, light, ex->lightColor[0], ex->lightColor[1], ex->lightColor[2] );
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
ARGP4
ADDRLP4 4
INDIRF4
ARGF4
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
CNSTI4 132
ADDP4
INDIRF4
ARGF4
ADDRLP4 12
INDIRP4
CNSTI4 136
ADDP4
INDIRF4
ARGF4
ADDRLP4 12
INDIRP4
CNSTI4 140
ADDP4
INDIRF4
ARGF4
ADDRGP4 trap_R_AddLightToScene
CALLV
pop
line 578
;578:	}
LABELV $394
line 579
;579:}
LABELV $391
endproc CG_AddExplosion 16 20
proc CG_AddSpriteExplosion 172 20
line 587
;580:
;581:
;582:/*
;583:================
;584:CG_AddSpriteExplosion
;585:================
;586:*/
;587:static void CG_AddSpriteExplosion( localEntity_t *le ) {
line 591
;588:	refEntity_t	re;
;589:	float c;
;590:
;591:	re = le->refEntity;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 152
ADDP4
INDIRB
ASGNB 140
line 593
;592:
;593:	c = ( le->endTime - cg.time ) / ( float ) ( le->endTime - le->startTime );
ADDRLP4 144
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 140
ADDRLP4 144
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
CVIF4 4
ADDRLP4 144
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 144
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 594
;594:	if ( c > 1 ) {
ADDRLP4 140
INDIRF4
CNSTF4 1065353216
LEF4 $401
line 595
;595:		c = 1.0;	// can happen during connection problems
ADDRLP4 140
CNSTF4 1065353216
ASGNF4
line 596
;596:	}
LABELV $401
line 598
;597:
;598:	re.shaderRGBA[0] = 0xff;
ADDRLP4 0+116
CNSTU1 255
ASGNU1
line 599
;599:	re.shaderRGBA[1] = 0xff;
ADDRLP4 0+116+1
CNSTU1 255
ASGNU1
line 600
;600:	re.shaderRGBA[2] = 0xff;
ADDRLP4 0+116+2
CNSTU1 255
ASGNU1
line 601
;601:	re.shaderRGBA[3] = 0xff * c * 0.33;
ADDRLP4 152
ADDRLP4 140
INDIRF4
CNSTF4 1118325965
MULF4
ASGNF4
ADDRLP4 156
CNSTF4 1325400064
ASGNF4
ADDRLP4 152
INDIRF4
ADDRLP4 156
INDIRF4
LTF4 $411
ADDRLP4 148
ADDRLP4 152
INDIRF4
ADDRLP4 156
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $412
JUMPV
LABELV $411
ADDRLP4 148
ADDRLP4 152
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $412
ADDRLP4 0+116+3
ADDRLP4 148
INDIRU4
CVUU1 4
ASGNU1
line 603
;602:
;603:	re.reType = RT_SPRITE;
ADDRLP4 0
CNSTI4 2
ASGNI4
line 604
;604:	re.radius = 42 * ( 1.0 - c ) + 30;
ADDRLP4 0+132
CNSTF4 1065353216
ADDRLP4 140
INDIRF4
SUBF4
CNSTF4 1109917696
MULF4
CNSTF4 1106247680
ADDF4
ASGNF4
line 606
;605:
;606:	if ( intShaderTime )
ADDRGP4 intShaderTime
INDIRI4
CNSTI4 0
EQI4 $414
line 607
;607:		trap_R_AddRefEntityToScene2( &re );
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene2
INDIRP4
CALLV
pop
ADDRGP4 $415
JUMPV
LABELV $414
line 609
;608:	else
;609:		trap_R_AddRefEntityToScene( &re );
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
LABELV $415
line 612
;610:
;611:	// add the dlight
;612:	if ( le->light ) {
ADDRFP4 0
INDIRP4
CNSTI4 128
ADDP4
INDIRF4
CNSTF4 0
EQF4 $416
line 615
;613:		float		light;
;614:
;615:		light = (float)( cg.time - le->startTime ) / ( le->endTime - le->startTime );
ADDRLP4 164
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 160
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 164
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
CVIF4 4
ADDRLP4 164
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 164
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 616
;616:		if ( light < 0.5 ) {
ADDRLP4 160
INDIRF4
CNSTF4 1056964608
GEF4 $419
line 617
;617:			light = 1.0;
ADDRLP4 160
CNSTF4 1065353216
ASGNF4
line 618
;618:		} else {
ADDRGP4 $420
JUMPV
LABELV $419
line 619
;619:			light = 1.0 - ( light - 0.5 ) * 2;
ADDRLP4 160
CNSTF4 1065353216
ADDRLP4 160
INDIRF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
SUBF4
ASGNF4
line 620
;620:		}
LABELV $420
line 621
;621:		light = le->light * light;
ADDRLP4 160
ADDRFP4 0
INDIRP4
CNSTI4 128
ADDP4
INDIRF4
ADDRLP4 160
INDIRF4
MULF4
ASGNF4
line 622
;622:		trap_R_AddLightToScene(re.origin, light, le->lightColor[0], le->lightColor[1], le->lightColor[2] );
ADDRLP4 0+68
ARGP4
ADDRLP4 160
INDIRF4
ARGF4
ADDRLP4 168
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 168
INDIRP4
CNSTI4 132
ADDP4
INDIRF4
ARGF4
ADDRLP4 168
INDIRP4
CNSTI4 136
ADDP4
INDIRF4
ARGF4
ADDRLP4 168
INDIRP4
CNSTI4 140
ADDP4
INDIRF4
ARGF4
ADDRGP4 trap_R_AddLightToScene
CALLV
pop
line 623
;623:	}
LABELV $416
line 624
;624:}
LABELV $399
endproc CG_AddSpriteExplosion 172 20
proc CG_AddRefEntity 0 4
line 795
;625:
;626:
;627:#ifdef MISSIONPACK
;628:/*
;629:====================
;630:CG_AddKamikaze
;631:====================
;632:*/
;633:void CG_AddKamikaze( localEntity_t *le ) {
;634:	refEntity_t	*re;
;635:	refEntity_t shockwave;
;636:	float		c;
;637:	vec3_t		test, axis[3];
;638:	int			t;
;639:
;640:	re = &le->refEntity;
;641:
;642:	t = cg.time - le->startTime;
;643:	VectorClear( test );
;644:	AnglesToAxis( test, axis );
;645:
;646:	if (t > KAMI_SHOCKWAVE_STARTTIME && t < KAMI_SHOCKWAVE_ENDTIME) {
;647:
;648:		if (!(le->leFlags & LEF_SOUND1)) {
;649://			trap_S_StartSound (re->origin, ENTITYNUM_WORLD, CHAN_AUTO, cgs.media.kamikazeExplodeSound );
;650:			trap_S_StartLocalSound(cgs.media.kamikazeExplodeSound, CHAN_AUTO);
;651:			le->leFlags |= LEF_SOUND1;
;652:		}
;653:		// 1st kamikaze shockwave
;654:		memset(&shockwave, 0, sizeof(shockwave));
;655:		shockwave.hModel = cgs.media.kamikazeShockWave;
;656:		shockwave.reType = RT_MODEL;
;657:		shockwave.shaderTime = re->shaderTime;
;658:		VectorCopy(re->origin, shockwave.origin);
;659:
;660:		c = (float)(t - KAMI_SHOCKWAVE_STARTTIME) / (float)(KAMI_SHOCKWAVE_ENDTIME - KAMI_SHOCKWAVE_STARTTIME);
;661:		VectorScale( axis[0], c * KAMI_SHOCKWAVE_MAXRADIUS / KAMI_SHOCKWAVEMODEL_RADIUS, shockwave.axis[0] );
;662:		VectorScale( axis[1], c * KAMI_SHOCKWAVE_MAXRADIUS / KAMI_SHOCKWAVEMODEL_RADIUS, shockwave.axis[1] );
;663:		VectorScale( axis[2], c * KAMI_SHOCKWAVE_MAXRADIUS / KAMI_SHOCKWAVEMODEL_RADIUS, shockwave.axis[2] );
;664:		shockwave.nonNormalizedAxes = qtrue;
;665:
;666:		if (t > KAMI_SHOCKWAVEFADE_STARTTIME) {
;667:			c = (float)(t - KAMI_SHOCKWAVEFADE_STARTTIME) / (float)(KAMI_SHOCKWAVE_ENDTIME - KAMI_SHOCKWAVEFADE_STARTTIME);
;668:		}
;669:		else {
;670:			c = 0;
;671:		}
;672:		c *= 0xff;
;673:		shockwave.shaderRGBA[0] = 0xff - c;
;674:		shockwave.shaderRGBA[1] = 0xff - c;
;675:		shockwave.shaderRGBA[2] = 0xff - c;
;676:		shockwave.shaderRGBA[3] = 0xff - c;
;677:
;678:		trap_R_AddRefEntityToScene( &shockwave );
;679:	}
;680:
;681:	if (t > KAMI_EXPLODE_STARTTIME && t < KAMI_IMPLODE_ENDTIME) {
;682:		// explosion and implosion
;683:		c = ( le->endTime - cg.time ) * le->lifeRate;
;684:		c *= 0xff;
;685:		re->shaderRGBA[0] = le->color[0] * c;
;686:		re->shaderRGBA[1] = le->color[1] * c;
;687:		re->shaderRGBA[2] = le->color[2] * c;
;688:		re->shaderRGBA[3] = le->color[3] * c;
;689:
;690:		if( t < KAMI_IMPLODE_STARTTIME ) {
;691:			c = (float)(t - KAMI_EXPLODE_STARTTIME) / (float)(KAMI_IMPLODE_STARTTIME - KAMI_EXPLODE_STARTTIME);
;692:		}
;693:		else {
;694:			if (!(le->leFlags & LEF_SOUND2)) {
;695://				trap_S_StartSound (re->origin, ENTITYNUM_WORLD, CHAN_AUTO, cgs.media.kamikazeImplodeSound );
;696:				trap_S_StartLocalSound(cgs.media.kamikazeImplodeSound, CHAN_AUTO);
;697:				le->leFlags |= LEF_SOUND2;
;698:			}
;699:			c = (float)(KAMI_IMPLODE_ENDTIME - t) / (float) (KAMI_IMPLODE_ENDTIME - KAMI_IMPLODE_STARTTIME);
;700:		}
;701:		VectorScale( axis[0], c * KAMI_BOOMSPHERE_MAXRADIUS / KAMI_BOOMSPHEREMODEL_RADIUS, re->axis[0] );
;702:		VectorScale( axis[1], c * KAMI_BOOMSPHERE_MAXRADIUS / KAMI_BOOMSPHEREMODEL_RADIUS, re->axis[1] );
;703:		VectorScale( axis[2], c * KAMI_BOOMSPHERE_MAXRADIUS / KAMI_BOOMSPHEREMODEL_RADIUS, re->axis[2] );
;704:		re->nonNormalizedAxes = qtrue;
;705:
;706:		trap_R_AddRefEntityToScene( re );
;707:		// add the dlight
;708:		trap_R_AddLightToScene( re->origin, c * 1000.0, 1.0, 1.0, c );
;709:	}
;710:
;711:	if (t > KAMI_SHOCKWAVE2_STARTTIME && t < KAMI_SHOCKWAVE2_ENDTIME) {
;712:		// 2nd kamikaze shockwave
;713:		if (le->angles.trBase[0] == 0 &&
;714:			le->angles.trBase[1] == 0 &&
;715:			le->angles.trBase[2] == 0) {
;716:			le->angles.trBase[0] = random() * 360;
;717:			le->angles.trBase[1] = random() * 360;
;718:			le->angles.trBase[2] = random() * 360;
;719:		}
;720:		else {
;721:			c = 0;
;722:		}
;723:		memset(&shockwave, 0, sizeof(shockwave));
;724:		shockwave.hModel = cgs.media.kamikazeShockWave;
;725:		shockwave.reType = RT_MODEL;
;726:		shockwave.shaderTime = re->shaderTime;
;727:		VectorCopy(re->origin, shockwave.origin);
;728:
;729:		test[0] = le->angles.trBase[0];
;730:		test[1] = le->angles.trBase[1];
;731:		test[2] = le->angles.trBase[2];
;732:		AnglesToAxis( test, axis );
;733:
;734:		c = (float)(t - KAMI_SHOCKWAVE2_STARTTIME) / (float)(KAMI_SHOCKWAVE2_ENDTIME - KAMI_SHOCKWAVE2_STARTTIME);
;735:		VectorScale( axis[0], c * KAMI_SHOCKWAVE2_MAXRADIUS / KAMI_SHOCKWAVEMODEL_RADIUS, shockwave.axis[0] );
;736:		VectorScale( axis[1], c * KAMI_SHOCKWAVE2_MAXRADIUS / KAMI_SHOCKWAVEMODEL_RADIUS, shockwave.axis[1] );
;737:		VectorScale( axis[2], c * KAMI_SHOCKWAVE2_MAXRADIUS / KAMI_SHOCKWAVEMODEL_RADIUS, shockwave.axis[2] );
;738:		shockwave.nonNormalizedAxes = qtrue;
;739:
;740:		if (t > KAMI_SHOCKWAVE2FADE_STARTTIME) {
;741:			c = (float)(t - KAMI_SHOCKWAVE2FADE_STARTTIME) / (float)(KAMI_SHOCKWAVE2_ENDTIME - KAMI_SHOCKWAVE2FADE_STARTTIME);
;742:		}
;743:		else {
;744:			c = 0;
;745:		}
;746:		c *= 0xff;
;747:		shockwave.shaderRGBA[0] = 0xff - c;
;748:		shockwave.shaderRGBA[1] = 0xff - c;
;749:		shockwave.shaderRGBA[2] = 0xff - c;
;750:		shockwave.shaderRGBA[3] = 0xff - c;
;751:
;752:		trap_R_AddRefEntityToScene( &shockwave );
;753:	}
;754:}
;755:
;756:/*
;757:===================
;758:CG_AddInvulnerabilityImpact
;759:===================
;760:*/
;761:void CG_AddInvulnerabilityImpact( localEntity_t *le ) {
;762:	trap_R_AddRefEntityToScene( &le->refEntity );
;763:}
;764:
;765:/*
;766:===================
;767:CG_AddInvulnerabilityJuiced
;768:===================
;769:*/
;770:void CG_AddInvulnerabilityJuiced( localEntity_t *le ) {
;771:	int t;
;772:
;773:	t = cg.time - le->startTime;
;774:	if ( t > 3000 ) {
;775:		le->refEntity.axis[0][0] = (float) 1.0 + 0.3 * (t - 3000) / 2000;
;776:		le->refEntity.axis[1][1] = (float) 1.0 + 0.3 * (t - 3000) / 2000;
;777:		le->refEntity.axis[2][2] = (float) 0.7 + 0.3 * (2000 - (t - 3000)) / 2000;
;778:	}
;779:	if ( t > 5000 ) {
;780:		le->endTime = 0;
;781:		CG_GibPlayer( le->refEntity.origin );
;782:	}
;783:	else {
;784:		trap_R_AddRefEntityToScene( &le->refEntity );
;785:	}
;786:}
;787:#endif
;788:
;789:
;790:/*
;791:===================
;792:CG_AddRefEntity
;793:===================
;794:*/
;795:static void CG_AddRefEntity( localEntity_t *le ) {
line 796
;796:	if ( le->endTime < cg.time ) {
ADDRFP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRGP4 cg+107604
INDIRI4
GEI4 $423
line 797
;797:		CG_FreeLocalEntity( le );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_FreeLocalEntity
CALLV
pop
line 798
;798:		return;
ADDRGP4 $422
JUMPV
LABELV $423
line 800
;799:	}
;800:	trap_R_AddRefEntityToScene( &le->refEntity );
ADDRFP4 0
INDIRP4
CNSTI4 152
ADDP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 801
;801:}
LABELV $422
endproc CG_AddRefEntity 0 4
data
align 4
LABELV $427
byte 4 0
byte 4 0
byte 4 1065353216
export CG_AddScorePlum
code
proc CG_AddScorePlum 160 12
line 811
;802:
;803:
;804:/*
;805:===================
;806:CG_AddScorePlum
;807:===================
;808:*/
;809:#define NUMBER_SIZE		8
;810:
;811:void CG_AddScorePlum( localEntity_t *le ) {
line 813
;812:	refEntity_t	*re;
;813:	vec3_t		origin, delta, dir, vec, up = {0, 0, 1};
ADDRLP4 112
ADDRGP4 $427
INDIRB
ASGNB 12
line 817
;814:	float		c, len;
;815:	int			i, score, digits[10], numdigits, negative;
;816:
;817:	re = &le->refEntity;
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 819
;818:
;819:	c = ( le->endTime - cg.time ) * le->lifeRate;
ADDRLP4 128
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 80
ADDRLP4 128
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
CVIF4 4
ADDRLP4 128
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
MULF4
ASGNF4
line 821
;820:
;821:	score = le->radius;
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 124
ADDP4
INDIRF4
CVFI4 4
ASGNI4
line 822
;822:	if (score < 0) {
ADDRLP4 12
INDIRI4
CNSTI4 0
GEI4 $429
line 823
;823:		re->shaderRGBA[0] = 0xff;
ADDRLP4 8
INDIRP4
CNSTI4 116
ADDP4
CNSTU1 255
ASGNU1
line 824
;824:		re->shaderRGBA[1] = 0x11;
ADDRLP4 8
INDIRP4
CNSTI4 117
ADDP4
CNSTU1 17
ASGNU1
line 825
;825:		re->shaderRGBA[2] = 0x11;
ADDRLP4 8
INDIRP4
CNSTI4 118
ADDP4
CNSTU1 17
ASGNU1
line 826
;826:	}
ADDRGP4 $430
JUMPV
LABELV $429
line 827
;827:	else {
line 828
;828:		re->shaderRGBA[0] = 0xff;
ADDRLP4 8
INDIRP4
CNSTI4 116
ADDP4
CNSTU1 255
ASGNU1
line 829
;829:		re->shaderRGBA[1] = 0xff;
ADDRLP4 8
INDIRP4
CNSTI4 117
ADDP4
CNSTU1 255
ASGNU1
line 830
;830:		re->shaderRGBA[2] = 0xff;
ADDRLP4 8
INDIRP4
CNSTI4 118
ADDP4
CNSTU1 255
ASGNU1
line 831
;831:		if (score >= 50) {
ADDRLP4 12
INDIRI4
CNSTI4 50
LTI4 $431
line 832
;832:			re->shaderRGBA[1] = 0;
ADDRLP4 8
INDIRP4
CNSTI4 117
ADDP4
CNSTU1 0
ASGNU1
line 833
;833:		} else if (score >= 20) {
ADDRGP4 $432
JUMPV
LABELV $431
ADDRLP4 12
INDIRI4
CNSTI4 20
LTI4 $433
line 834
;834:			re->shaderRGBA[0] = re->shaderRGBA[1] = 0;
ADDRLP4 136
CNSTU1 0
ASGNU1
ADDRLP4 8
INDIRP4
CNSTI4 117
ADDP4
ADDRLP4 136
INDIRU1
ASGNU1
ADDRLP4 8
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 136
INDIRU1
ASGNU1
line 835
;835:		} else if (score >= 10) {
ADDRGP4 $434
JUMPV
LABELV $433
ADDRLP4 12
INDIRI4
CNSTI4 10
LTI4 $435
line 836
;836:			re->shaderRGBA[2] = 0;
ADDRLP4 8
INDIRP4
CNSTI4 118
ADDP4
CNSTU1 0
ASGNU1
line 837
;837:		} else if (score >= 2) {
ADDRGP4 $436
JUMPV
LABELV $435
ADDRLP4 12
INDIRI4
CNSTI4 2
LTI4 $437
line 838
;838:			re->shaderRGBA[0] = re->shaderRGBA[2] = 0;
ADDRLP4 136
CNSTU1 0
ASGNU1
ADDRLP4 8
INDIRP4
CNSTI4 118
ADDP4
ADDRLP4 136
INDIRU1
ASGNU1
ADDRLP4 8
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 136
INDIRU1
ASGNU1
line 839
;839:		}
LABELV $437
LABELV $436
LABELV $434
LABELV $432
line 841
;840:
;841:	}
LABELV $430
line 842
;842:	if (c < 0.25f)
ADDRLP4 80
INDIRF4
CNSTF4 1048576000
GEF4 $439
line 843
;843:		re->shaderRGBA[3] = 0xff * 4.0f * c;
ADDRLP4 136
ADDRLP4 80
INDIRF4
CNSTF4 1149173760
MULF4
ASGNF4
ADDRLP4 140
CNSTF4 1325400064
ASGNF4
ADDRLP4 136
INDIRF4
ADDRLP4 140
INDIRF4
LTF4 $442
ADDRLP4 132
ADDRLP4 136
INDIRF4
ADDRLP4 140
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $443
JUMPV
LABELV $442
ADDRLP4 132
ADDRLP4 136
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $443
ADDRLP4 8
INDIRP4
CNSTI4 119
ADDP4
ADDRLP4 132
INDIRU4
CVUU1 4
ASGNU1
ADDRGP4 $440
JUMPV
LABELV $439
line 845
;844:	else
;845:		re->shaderRGBA[3] = 0xff;
ADDRLP4 8
INDIRP4
CNSTI4 119
ADDP4
CNSTU1 255
ASGNU1
LABELV $440
line 847
;846:
;847:	re->radius = NUMBER_SIZE / 2;
ADDRLP4 8
INDIRP4
CNSTI4 132
ADDP4
CNSTF4 1082130432
ASGNF4
line 849
;848:
;849:	VectorCopy(le->pos.trBase, origin);
ADDRLP4 16
ADDRFP4 0
INDIRP4
CNSTI4 44
ADDP4
INDIRB
ASGNB 12
line 850
;850:	origin[2] += 110.0f - c * 100.0f;
ADDRLP4 16+8
ADDRLP4 16+8
INDIRF4
CNSTF4 1121714176
ADDRLP4 80
INDIRF4
CNSTF4 1120403456
MULF4
SUBF4
ADDF4
ASGNF4
line 852
;851:
;852:	VectorSubtract(cg.refdef.vieworg, origin, dir);
ADDRLP4 96
ADDRGP4 cg+109056+24
INDIRF4
ADDRLP4 16
INDIRF4
SUBF4
ASGNF4
ADDRLP4 96+4
ADDRGP4 cg+109056+24+4
INDIRF4
ADDRLP4 16+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 96+8
ADDRGP4 cg+109056+24+8
INDIRF4
ADDRLP4 16+8
INDIRF4
SUBF4
ASGNF4
line 853
;853:	CrossProduct(dir, up, vec);
ADDRLP4 96
ARGP4
ADDRLP4 112
ARGP4
ADDRLP4 28
ARGP4
ADDRGP4 CrossProduct
CALLV
pop
line 854
;854:	VectorNormalize(vec);
ADDRLP4 28
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 856
;855:
;856:	VectorMA(origin, -10.0f + 20 * sin(c * 2 * M_PI), vec, origin);
ADDRLP4 80
INDIRF4
CNSTF4 1086918619
MULF4
ARGF4
ADDRLP4 144
ADDRGP4 sin
CALLF4
ASGNF4
ADDRLP4 16
ADDRLP4 16
INDIRF4
ADDRLP4 28
INDIRF4
ADDRLP4 144
INDIRF4
CNSTF4 1101004800
MULF4
CNSTF4 3240099840
ADDF4
MULF4
ADDF4
ASGNF4
ADDRLP4 80
INDIRF4
CNSTF4 1086918619
MULF4
ARGF4
ADDRLP4 148
ADDRGP4 sin
CALLF4
ASGNF4
ADDRLP4 16+4
ADDRLP4 16+4
INDIRF4
ADDRLP4 28+4
INDIRF4
ADDRLP4 148
INDIRF4
CNSTF4 1101004800
MULF4
CNSTF4 3240099840
ADDF4
MULF4
ADDF4
ASGNF4
ADDRLP4 80
INDIRF4
CNSTF4 1086918619
MULF4
ARGF4
ADDRLP4 152
ADDRGP4 sin
CALLF4
ASGNF4
ADDRLP4 16+8
ADDRLP4 16+8
INDIRF4
ADDRLP4 28+8
INDIRF4
ADDRLP4 152
INDIRF4
CNSTF4 1101004800
MULF4
CNSTF4 3240099840
ADDF4
MULF4
ADDF4
ASGNF4
line 860
;857:
;858:	// if the view would be "inside" the sprite, kill the sprite
;859:	// so it doesn't add too much overdraw
;860:	VectorSubtract( origin, cg.refdef.vieworg, delta );
ADDRLP4 84
ADDRLP4 16
INDIRF4
ADDRGP4 cg+109056+24
INDIRF4
SUBF4
ASGNF4
ADDRLP4 84+4
ADDRLP4 16+4
INDIRF4
ADDRGP4 cg+109056+24+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 84+8
ADDRLP4 16+8
INDIRF4
ADDRGP4 cg+109056+24+8
INDIRF4
SUBF4
ASGNF4
line 861
;861:	len = VectorLengthSquared( delta );
ADDRLP4 84
ARGP4
ADDRLP4 156
ADDRGP4 VectorLengthSquared
CALLF4
ASGNF4
ADDRLP4 124
ADDRLP4 156
INDIRF4
ASGNF4
line 862
;862:	if ( len < 20*20 ) {
ADDRLP4 124
INDIRF4
CNSTF4 1137180672
GEF4 $475
line 863
;863:		CG_FreeLocalEntity( le );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_FreeLocalEntity
CALLV
pop
line 864
;864:		return;
ADDRGP4 $426
JUMPV
LABELV $475
line 867
;865:	}
;866:
;867:	negative = qfalse;
ADDRLP4 108
CNSTI4 0
ASGNI4
line 868
;868:	if (score < 0) {
ADDRLP4 12
INDIRI4
CNSTI4 0
GEI4 $477
line 869
;869:		negative = qtrue;
ADDRLP4 108
CNSTI4 1
ASGNI4
line 870
;870:		score = -score;
ADDRLP4 12
ADDRLP4 12
INDIRI4
NEGI4
ASGNI4
line 871
;871:	}
LABELV $477
line 873
;872:
;873:	for (numdigits = 0; !(numdigits && !score); numdigits++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $482
JUMPV
LABELV $479
line 874
;874:		digits[numdigits] = score % 10;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 40
ADDP4
ADDRLP4 12
INDIRI4
CNSTI4 10
MODI4
ASGNI4
line 875
;875:		score = score / 10;
ADDRLP4 12
ADDRLP4 12
INDIRI4
CNSTI4 10
DIVI4
ASGNI4
line 876
;876:	}
LABELV $480
line 873
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $482
ADDRLP4 0
INDIRI4
CNSTI4 0
EQI4 $479
ADDRLP4 12
INDIRI4
CNSTI4 0
NEI4 $479
line 878
;877:
;878:	if (negative) {
ADDRLP4 108
INDIRI4
CNSTI4 0
EQI4 $483
line 879
;879:		digits[numdigits] = 10;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 40
ADDP4
CNSTI4 10
ASGNI4
line 880
;880:		numdigits++;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 881
;881:	}
LABELV $483
line 883
;882:
;883:	for (i = 0; i < numdigits; i++) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $488
JUMPV
LABELV $485
line 884
;884:		VectorMA(origin, (float) (((float) numdigits / 2) - i) * NUMBER_SIZE, vec, re->origin);
ADDRLP4 8
INDIRP4
CNSTI4 68
ADDP4
ADDRLP4 16
INDIRF4
ADDRLP4 28
INDIRF4
ADDRLP4 0
INDIRI4
CVIF4 4
CNSTF4 1056964608
MULF4
ADDRLP4 4
INDIRI4
CVIF4 4
SUBF4
CNSTF4 1090519040
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 8
INDIRP4
CNSTI4 72
ADDP4
ADDRLP4 16+4
INDIRF4
ADDRLP4 28+4
INDIRF4
ADDRLP4 0
INDIRI4
CVIF4 4
CNSTF4 1056964608
MULF4
ADDRLP4 4
INDIRI4
CVIF4 4
SUBF4
CNSTF4 1090519040
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 8
INDIRP4
CNSTI4 76
ADDP4
ADDRLP4 16+8
INDIRF4
ADDRLP4 28+8
INDIRF4
ADDRLP4 0
INDIRI4
CVIF4 4
CNSTF4 1056964608
MULF4
ADDRLP4 4
INDIRI4
CVIF4 4
SUBF4
CNSTF4 1090519040
MULF4
MULF4
ADDF4
ASGNF4
line 885
;885:		re->customShader = cgs.media.numberShaders[digits[numdigits-1-i]];
ADDRLP4 8
INDIRP4
CNSTI4 112
ADDP4
ADDRLP4 0
INDIRI4
CNSTI4 1
SUBI4
ADDRLP4 4
INDIRI4
SUBI4
CNSTI4 2
LSHI4
ADDRLP4 40
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+148692+300
ADDP4
INDIRI4
ASGNI4
line 886
;886:		trap_R_AddRefEntityToScene( re );
ADDRLP4 8
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 887
;887:	}
LABELV $486
line 883
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $488
ADDRLP4 4
INDIRI4
ADDRLP4 0
INDIRI4
LTI4 $485
line 888
;888:}
LABELV $426
endproc CG_AddScorePlum 160 12
export CG_AddLocalEntities
proc CG_AddLocalEntities 16 8
line 901
;889:
;890:
;891:
;892:
;893://==============================================================================
;894:
;895:/*
;896:===================
;897:CG_AddLocalEntities
;898:
;899:===================
;900:*/
;901:void CG_AddLocalEntities( void ) {
line 906
;902:	localEntity_t	*le, *next;
;903:
;904:	// walk the list backwards, so any new local entities generated
;905:	// (trails, marks, etc) will be present this frame
;906:	le = cg_activeLocalEntities.prev;
ADDRLP4 0
ADDRGP4 cg_activeLocalEntities
INDIRP4
ASGNP4
line 907
;907:	for ( ; le != &cg_activeLocalEntities ; le = next ) {
ADDRGP4 $499
JUMPV
LABELV $496
line 910
;908:		// grab next now, so if the local entity is freed we
;909:		// still have it
;910:		next = le->prev;
ADDRLP4 4
ADDRLP4 0
INDIRP4
INDIRP4
ASGNP4
line 912
;911:
;912:		if ( cg.time >= le->endTime ) {
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
LTI4 $500
line 913
;913:			CG_FreeLocalEntity( le );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_FreeLocalEntity
CALLV
pop
line 914
;914:			continue;
ADDRGP4 $497
JUMPV
LABELV $500
line 916
;915:		}
;916:		switch ( le->leType ) {
ADDRLP4 8
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 0
LTI4 $503
ADDRLP4 8
INDIRI4
CNSTI4 9
GTI4 $503
ADDRLP4 8
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $517
ADDP4
INDIRP4
JUMPV
data
align 4
LABELV $517
address $504
address $509
address $508
address $510
address $511
address $513
address $512
address $514
address $515
address $516
code
LABELV $503
line 918
;917:		default:
;918:			CG_Error( "Bad leType: %i", le->leType );
ADDRGP4 $506
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_Error
CALLV
pop
line 919
;919:			break;
ADDRGP4 $504
JUMPV
line 922
;920:
;921:		case LE_MARK:
;922:			break;
LABELV $508
line 925
;923:
;924:		case LE_SPRITE_EXPLOSION:
;925:			CG_AddSpriteExplosion( le );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_AddSpriteExplosion
CALLV
pop
line 926
;926:			break;
ADDRGP4 $504
JUMPV
LABELV $509
line 929
;927:
;928:		case LE_EXPLOSION:
;929:			CG_AddExplosion( le );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_AddExplosion
CALLV
pop
line 930
;930:			break;
ADDRGP4 $504
JUMPV
LABELV $510
line 933
;931:
;932:		case LE_FRAGMENT:			// gibs and brass
;933:			CG_AddFragment( le );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_AddFragment
CALLV
pop
line 934
;934:			break;
ADDRGP4 $504
JUMPV
LABELV $511
line 937
;935:
;936:		case LE_MOVE_SCALE_FADE:	// water bubbles, plasma trails, smoke puff
;937:			CG_AddMoveScaleFade( le );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_AddMoveScaleFade
CALLV
pop
line 938
;938:			break;
ADDRGP4 $504
JUMPV
LABELV $512
line 941
;939:
;940:		case LE_FADE_RGB:			// teleporters, railtrails
;941:			CG_AddFadeRGB( le );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_AddFadeRGB
CALLV
pop
line 942
;942:			break;
ADDRGP4 $504
JUMPV
LABELV $513
line 945
;943:
;944:		case LE_FALL_SCALE_FADE:	// gib blood trails
;945:			CG_AddFallScaleFade( le );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_AddFallScaleFade
CALLV
pop
line 946
;946:			break;
ADDRGP4 $504
JUMPV
LABELV $514
line 949
;947:
;948:		case LE_SCALE_FADE:			// rocket trails
;949:			CG_AddScaleFade( le );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_AddScaleFade
CALLV
pop
line 950
;950:			break;
ADDRGP4 $504
JUMPV
LABELV $515
line 953
;951:
;952:		case LE_SCOREPLUM:
;953:			CG_AddScorePlum( le );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_AddScorePlum
CALLV
pop
line 954
;954:			break;
ADDRGP4 $504
JUMPV
LABELV $516
line 968
;955:
;956:#ifdef MISSIONPACK
;957:		case LE_KAMIKAZE:
;958:			CG_AddKamikaze( le );
;959:			break;
;960:		case LE_INVULIMPACT:
;961:			CG_AddInvulnerabilityImpact( le );
;962:			break;
;963:		case LE_INVULJUICED:
;964:			CG_AddInvulnerabilityJuiced( le );
;965:			break;
;966:#endif
;967:		case LE_SHOWREFENTITY:
;968:			CG_AddRefEntity( le );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_AddRefEntity
CALLV
pop
line 969
;969:			break;
LABELV $504
line 971
;970:		}
;971:	}
LABELV $497
line 907
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
LABELV $499
ADDRLP4 0
INDIRP4
CVPU4 4
ADDRGP4 cg_activeLocalEntities
CVPU4 4
NEU4 $496
line 972
;972:}
LABELV $495
endproc CG_AddLocalEntities 16 8
bss
export cg_freeLocalEntities
align 4
LABELV cg_freeLocalEntities
skip 4
export cg_activeLocalEntities
align 4
LABELV cg_activeLocalEntities
skip 292
export cg_localEntities
align 4
LABELV cg_localEntities
skip 598016
import trap_R_AddLinearLightToScene
import trap_R_AddRefEntityToScene2
import linearLight
import intShaderTime
import CG_NewParticleArea
import initparticles
import CG_ParticleExplosion
import CG_ParticleMisc
import CG_ParticleDust
import CG_ParticleSparks
import CG_ParticleBulletDebris
import CG_ParticleSnowFlurry
import CG_AddParticleShrapnel
import CG_ParticleSmoke
import CG_ParticleSnow
import CG_AddParticles
import CG_ClearParticles
import trap_GetEntityToken
import trap_getCameraInfo
import trap_startCamera
import trap_loadCamera
import trap_SnapVector
import trap_CIN_SetExtents
import trap_CIN_DrawCinematic
import trap_CIN_RunCinematic
import trap_CIN_StopCinematic
import trap_CIN_PlayCinematic
import trap_Key_GetKey
import trap_Key_SetCatcher
import trap_Key_GetCatcher
import trap_Key_IsDown
import trap_R_RegisterFont
import trap_MemoryRemaining
import testPrintFloat
import testPrintInt
import trap_SetUserCmdValue
import trap_GetUserCmd
import trap_GetCurrentCmdNumber
import trap_GetServerCommand
import trap_GetSnapshot
import trap_GetCurrentSnapshotNumber
import trap_GetGameState
import trap_GetGlconfig
import trap_R_inPVS
import trap_R_RemapShader
import trap_R_LerpTag
import trap_R_ModelBounds
import trap_R_DrawStretchPic
import trap_R_SetColor
import trap_R_RenderScene
import trap_R_LightForPoint
import trap_R_AddAdditiveLightToScene
import trap_R_AddLightToScene
import trap_R_AddPolysToScene
import trap_R_AddPolyToScene
import trap_R_AddRefEntityToScene
import trap_R_ClearScene
import trap_R_RegisterShaderNoMip
import trap_R_RegisterShader
import trap_R_RegisterSkin
import trap_R_RegisterModel
import trap_R_LoadWorldMap
import trap_S_StopBackgroundTrack
import trap_S_StartBackgroundTrack
import trap_S_RegisterSound
import trap_S_Respatialize
import trap_S_UpdateEntityPosition
import trap_S_AddRealLoopingSound
import trap_S_AddLoopingSound
import trap_S_ClearLoopingSounds
import trap_S_StartLocalSound
import trap_S_StopLoopingSound
import trap_S_StartSound
import trap_CM_MarkFragments
import trap_CM_TransformedCapsuleTrace
import trap_CM_TransformedBoxTrace
import trap_CM_CapsuleTrace
import trap_CM_BoxTrace
import trap_CM_TransformedPointContents
import trap_CM_PointContents
import trap_CM_TempBoxModel
import trap_CM_InlineModel
import trap_CM_NumInlineModels
import trap_CM_LoadMap
import trap_UpdateScreen
import trap_SendClientCommand
import trap_RemoveCommand
import trap_AddCommand
import trap_RealTime
import trap_SendConsoleCommand
import trap_FS_Seek
import trap_FS_FCloseFile
import trap_FS_Write
import trap_FS_Read
import trap_FS_FOpenFile
import trap_Args
import trap_Argv
import trap_Argc
import trap_Cvar_VariableStringBuffer
import trap_Cvar_Set
import trap_Cvar_Update
import trap_Cvar_Register
import trap_Milliseconds
import trap_Error
import trap_Print
import CG_AddGib
import Q_Isfreeze
import CG_BodyObituary
import CG_Drop_f
import CG_CheckChangedPredictableEvents
import CG_TransitionPlayerState
import CG_Respawn
import CG_ShaderStateChanged
import CG_SetConfigValues
import CG_ParseSysteminfo
import CG_ParseServerinfo
import CG_ExecuteNewServerCommands
import CG_InitConsoleCommands
import CG_ConsoleCommand
import CG_ScoreboardClick
import CG_DrawOldTourneyScoreboard
import CG_DrawOldScoreboard
import CG_DrawInformation
import CG_LoadingClient
import CG_LoadingItem
import CG_LoadingString
import CG_ProcessSnapshots
import CG_MakeExplosion
import CG_Bleed
import CG_BigExplode
import CG_GibPlayer
import CG_ScorePlum
import CG_SpawnEffect
import CG_BubbleTrail
import CG_SmokePuff
import CG_ImpactMark
import CG_AddMarks
import CG_InitMarkPolys
import CG_OutOfAmmoChange
import CG_DrawWeaponSelect
import CG_AddPlayerWeapon
import CG_AddViewWeapon
import CG_GrappleTrail
import CG_RailTrail
import CG_Bullet
import CG_ShotgunFire
import CG_MissileHitPlayer
import CG_MissileHitWall
import CG_FireWeapon
import CG_RegisterItemVisuals
import CG_RegisterWeapon
import CG_Weapon_f
import CG_PrevWeapon_f
import CG_NextWeapon_f
import CG_PositionRotatedEntityOnTag
import CG_PositionEntityOnTag
import CG_AdjustPositionForMover
import CG_Beam
import CG_AddPacketEntities
import CG_SetEntitySoundPosition
import CG_PainEvent
import CG_EntityEvent
import CG_PlaceString
import CG_CheckEvents
import CG_PlayDroppedEvents
import CG_LoadDeferredPlayers
import CG_PredictPlayerState
import CG_Trace
import CG_PointContents
import CG_BuildSolidList
import CG_CustomSound
import CG_NewClientInfo
import CG_AddRefEntityWithPowerups
import CG_ResetPlayerEntity
import CG_Player
import CG_TrackClientTeamChange
import CG_ForceModelChange
import CG_StatusHandle
import CG_OtherTeamHasFlag
import CG_YourTeamHasFlag
import CG_GameTypeString
import CG_CheckOrderPending
import CG_Text_PaintChar
import CG_Draw3DModel
import CG_GetKillerText
import CG_GetGameStatusText
import CG_GetTeamColor
import CG_InitTeamChat
import CG_SetPrintString
import CG_ShowResponseHead
import CG_RunMenuScript
import CG_OwnerDrawVisible
import CG_GetValue
import CG_SelectNextPlayer
import CG_SelectPrevPlayer
import CG_Text_Height
import CG_Text_Width
import CG_Text_Paint
import CG_OwnerDraw
import CG_DrawTeamBackground
import CG_DrawFlagModel
import CG_DrawActive
import CG_DrawHead
import CG_CenterPrint
import CG_AddLagometerSnapshotInfo
import CG_AddLagometerFrameInfo
import teamChat2
import teamChat1
import systemChat
import drawTeamOverlayModificationCount
import numSortedTeamPlayers
import sortedTeamPlayers
import CG_SelectFont
import CG_LoadFonts
import CG_DrawString
import CG_DrawTopBottom
import CG_DrawSides
import CG_DrawRect
import UI_DrawProportionalString
import CG_GetColorForHealth
import CG_ColorForHealth
import CG_TileClear
import CG_TeamColor
import CG_FadeColorTime
import CG_FadeColor
import CG_DrawStrlen
import CG_DrawStringExt
import CG_DrawPic
import CG_FillScreen
import CG_FillRect
import CG_AdjustFrom640
import CG_DrawActiveFrame
import CG_AddBufferedSound
import CG_ZoomUp_f
import CG_ZoomDown_f
import CG_TestModelPrevSkin_f
import CG_TestModelNextSkin_f
import CG_TestModelPrevFrame_f
import CG_TestModelNextFrame_f
import CG_TestGun_f
import CG_TestModel_f
import CG_SetScoreCatcher
import CG_BuildSpectatorString
import CG_SetScoreSelection
import CG_RankRunFrame
import CG_EventHandling
import CG_MouseEvent
import CG_KeyEvent
import CG_LoadMenus
import CG_LastAttacker
import CG_CrosshairPlayer
import CG_UpdateCvars
import CG_StartMusic
import CG_Error
import CG_Printf
import CG_Argv
import CG_ConfigString
import eventnames
import cg_followKiller
import cg_fovAdjust
import cg_deadBodyDarken
import cg_teamColors
import cg_teamModel
import cg_enemyColors
import cg_enemyModel
import cg_hitSounds
import cg_trueLightning
import cg_oldPlasma
import cg_oldRocket
import cg_oldRail
import cg_noProjectileTrail
import cg_noTaunt
import cg_bigFont
import cg_smallFont
import cg_cameraMode
import cg_timescale
import cg_timescaleFadeSpeed
import cg_timescaleFadeEnd
import cg_cameraOrbitDelay
import cg_cameraOrbit
import cg_smoothClients
import cg_scorePlum
import cg_teamChatsOnly
import cg_drawFriend
import cg_deferPlayers
import cg_predictItems
import cg_blood
import cg_paused
import cg_buildScript
import cg_forceModel
import cg_stats
import cg_teamChatHeight
import cg_teamChatTime
import cg_drawSpeed
import cg_drawAttacker
import cg_lagometer
import cg_thirdPerson
import cg_thirdPersonAngle
import cg_thirdPersonRange
import cg_zoomFov
import cg_fov
import cg_simpleItems
import cg_ignore
import cg_autoswitch
import cg_tracerLength
import cg_tracerWidth
import cg_tracerChance
import cg_viewsize
import cg_drawGun
import cg_gun_z
import cg_gun_y
import cg_gun_x
import cg_gun_frame
import cg_brassTime
import cg_addMarks
import cg_footsteps
import cg_showmiss
import cg_noPlayerAnims
import cg_nopredict
import cg_errorDecay
import cg_railTrailRadius
import cg_railTrailTime
import cg_debugEvents
import cg_debugPosition
import cg_debugAnim
import cg_animSpeed
import cg_draw2D
import cg_drawStatus
import cg_crosshairHealth
import cg_crosshairSize
import cg_crosshairY
import cg_crosshairX
import cg_drawWeaponSelect
import cg_teamOverlayUserinfo
import cg_drawTeamOverlay
import cg_drawRewards
import cg_drawCrosshairNames
import cg_drawCrosshair
import cg_drawAmmoWarning
import cg_drawIcons
import cg_draw3dIcons
import cg_drawSnapshot
import cg_drawFPS
import cg_drawTimer
import cg_gibs
import cg_shadows
import cg_swingSpeed
import cg_bobroll
import cg_bobpitch
import cg_bobup
import cg_runroll
import cg_runpitch
import cg_centertime
import cg_markPolys
import cg_items
import cg_weapons
import cg_entities
import cg
import cgs
import BigEndian
import replace1
import Q_stradd
import Q_strcpy
import BG_StripColor
import BG_CleanName
import DecodedString
import EncodedString
import strtok
import Q_stristr
import BG_sprintf
import BG_PlayerTouchesItem
import BG_PlayerStateToEntityStateExtraPolate
import BG_PlayerStateToEntityState
import BG_TouchJumpPad
import BG_AddPredictableEventToPlayerstate
import BG_EvaluateTrajectoryDelta
import BG_EvaluateTrajectory
import BG_CanItemBeGrabbed
import BG_FindItemForHoldable
import BG_FindItemForPowerup
import BG_FindItemForWeapon
import BG_FindItem
import bg_numItems
import bg_itemlist
import Pmove
import PM_UpdateViewAngles
import Com_Printf
import Com_Error
import Info_NextPair
import Info_ValidateKeyValue
import Info_Validate
import Info_SetValueForKey_Big
import Info_SetValueForKey
import Info_ValueForKey
import va
import Q_CleanStr
import Q_PrintStrlen
import Q_strcat
import Q_strncpyz
import Q_strrchr
import Q_strupr
import Q_strlwr
import Q_stricmpn
import Q_strncmp
import Q_stricmp
import Q_isalpha
import Q_isupper
import Q_islower
import Q_isprint
import locase
import Com_sprintf
import Parse3DMatrix
import Parse2DMatrix
import Parse1DMatrix
import SkipRestOfLine
import SkipBracedSection
import COM_MatchToken
import Com_Split
import COM_ParseSep
import Com_InitSeparators
import SkipTillSeparators
import COM_ParseWarning
import COM_ParseError
import COM_Compress
import COM_ParseExt
import COM_Parse
import COM_GetCurrentParseLine
import COM_BeginParseSession
import COM_DefaultExtension
import COM_StripExtension
import COM_SkipPath
import Com_Clamp
import PerpendicularVector
import AngleVectors
import MatrixMultiply
import MakeNormalVectors
import RotateAroundDirection
import RotatePointAroundVector
import ProjectPointOnPlane
import PlaneFromPoints
import AngleDelta
import AngleNormalize180
import AngleNormalize360
import AnglesSubtract
import AngleSubtract
import LerpAngle
import AngleMod
import BoxOnPlaneSide
import SetPlaneSignbits
import AxisCopy
import AxisClear
import AnglesToAxis
import vectoangles
import Q_crandom
import Q_random
import Q_rand
import Q_acos
import Q_log2
import VectorRotate
import Vector4Scale
import VectorNormalize2
import VectorNormalize
import CrossProduct
import VectorInverse
import VectorNormalizeFast
import DistanceSquared
import Distance
import VectorLengthSquared
import VectorLength
import VectorCompare
import AddPointToBounds
import ClearBounds
import RadiusFromBounds
import NormalizeColor
import ColorBytes4
import ColorBytes3
import _VectorMA
import _VectorScale
import _VectorCopy
import _VectorAdd
import _VectorSubtract
import _DotProduct
import ByteToDir
import DirToByte
import ClampShort
import ClampChar
import Q_rsqrt
import Q_fabs
import axisDefault
import vec3_origin
import g_color_table
import colorDkGrey
import colorMdGrey
import colorLtGrey
import colorWhite
import colorCyan
import colorMagenta
import colorYellow
import colorBlue
import colorGreen
import colorRed
import colorBlack
import bytedirs
import Hunk_Alloc
import acos
import fabs
import abs
import tan
import atan2
import cos
import sin
import sqrt
import floor
import ceil
import memcpy
import memset
import memmove
import Q_sscanf
import ED_vsprintf
import atoi
import atof
import toupper
import tolower
import strncpy
import strstr
import strchr
import strcmp
import strcpy
import strcat
import strlen
import rand
import srand
import qsort
lit
align 1
LABELV $506
byte 1 66
byte 1 97
byte 1 100
byte 1 32
byte 1 108
byte 1 101
byte 1 84
byte 1 121
byte 1 112
byte 1 101
byte 1 58
byte 1 32
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $83
byte 1 67
byte 1 71
byte 1 95
byte 1 70
byte 1 114
byte 1 101
byte 1 101
byte 1 76
byte 1 111
byte 1 99
byte 1 97
byte 1 108
byte 1 69
byte 1 110
byte 1 116
byte 1 105
byte 1 116
byte 1 121
byte 1 58
byte 1 32
byte 1 110
byte 1 111
byte 1 116
byte 1 32
byte 1 97
byte 1 99
byte 1 116
byte 1 105
byte 1 118
byte 1 101
byte 1 0
